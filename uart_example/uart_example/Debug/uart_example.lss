
uart_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d0  00800100  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008002d0  008002d0  00000478  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b72  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fd  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d9  00000000  00000000  000019e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000501  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d3  00000000  00000000  000024e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	55 c0       	rjmp	.+170    	; 0xc8 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 3d       	cpi	r26, 0xD0	; 208
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 ed       	ldi	r26, 0xD0	; 208
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 3d       	cpi	r26, 0xD3	; 211
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a1 d0       	rcall	.+322    	; 0x206 <main>
  c4:	a5 c0       	rjmp	.+330    	; 0x210 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_7>:
	"But then I let you go And now it's only fair.\r",
	"That I should let you know What you should know\r",
};

ISR(INT6_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	cli();
  d4:	f8 94       	cli
	EINT6_FLAG_BIT = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <EINT6_FLAG_BIT>
	sei();
  dc:	78 94       	sei
}
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_18>:

ISR(USART0_RX_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	cli();
  f6:	f8 94       	cli
	RX_COMPLETE_FLAG_BIT = 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <__data_end>
	data = UDR0;
  fe:	8c b1       	in	r24, 0x0c	; 12
 100:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <data>
	sei();
 104:	78 94       	sei
}
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <init_ports>:

void init_ports()
{
	DDRC = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 116:	85 bb       	out	0x15, r24	; 21
 118:	08 95       	ret

0000011a <init_uart1>:
}

void init_uart1(void)
{
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	88 61       	ori	r24, 0x18	; 24
 11e:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1 << RXCIE0);
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	80 68       	ori	r24, 0x80	; 128
 124:	8a b9       	out	0x0a, r24	; 10
	//UCSR0B |= (1 << UDRIE0);
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 126:	e5 e9       	ldi	r30, 0x95	; 149
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	86 60       	ori	r24, 0x06	; 6
 12e:	80 83       	st	Z, r24
	
	UBRR0H = BAUD_RATE_H;
 130:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = BAUD_RATE_L;
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	89 b9       	out	0x09, r24	; 9
 138:	08 95       	ret

0000013a <init_eint>:
}

void init_eint(void)
{
	EICRB |= (1 << ISC61);
 13a:	8a b7       	in	r24, 0x3a	; 58
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1 << INT6);
 140:	89 b7       	in	r24, 0x39	; 57
 142:	80 64       	ori	r24, 0x40	; 64
 144:	89 bf       	out	0x39, r24	; 57
 146:	08 95       	ret

00000148 <uart1_transmit>:
	}
}

void uart1_transmit(char data)
{
	while((UCSR0A & 0x20) == 0);
 148:	5d 9b       	sbis	0x0b, 5	; 11
 14a:	fe cf       	rjmp	.-4      	; 0x148 <uart1_transmit>
	UDR0 = data;
 14c:	8c b9       	out	0x0c, r24	; 12
 14e:	08 95       	ret

00000150 <led_blink>:
	}
}

void led_blink(void)
{
	PORTC = 0x00;
 150:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <led_blink+0x8>
 160:	00 c0       	rjmp	.+0      	; 0x162 <led_blink+0x12>
 162:	00 00       	nop
	_delay_ms(50);
	PORTC = 0xFF;	
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	85 bb       	out	0x15, r24	; 21
 168:	08 95       	ret

0000016a <display_char>:
}

void display_char(const char* ch)
{
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	8c 01       	movw	r16, r24
	uint8_t ch_index;
	for(ch_index = 0; ch[ch_index]; ++ch_index)
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <display_char+0x10>
	{
		uart1_transmit(ch[ch_index]);
 176:	e8 df       	rcall	.-48     	; 0x148 <uart1_transmit>
}

void display_char(const char* ch)
{
	uint8_t ch_index;
	for(ch_index = 0; ch[ch_index]; ++ch_index)
 178:	cf 5f       	subi	r28, 0xFF	; 255
 17a:	f8 01       	movw	r30, r16
 17c:	ec 0f       	add	r30, r28
 17e:	f1 1d       	adc	r31, r1
 180:	80 81       	ld	r24, Z
 182:	81 11       	cpse	r24, r1
 184:	f8 cf       	rjmp	.-16     	; 0x176 <display_char+0xc>
	{
		uart1_transmit(ch[ch_index]);
	}
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <display_menu>:
	while((UCSR0A & 0x20) == 0);
	UDR0 = data;
}

void display_menu(void)
{
 18e:	cf 93       	push	r28
	uint8_t i;
	
	for(i = 0; i < 4; ++i)
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	0a c0       	rjmp	.+20     	; 0x1a8 <display_menu+0x1a>
	{
		display_char(menu_str[i]);	
 194:	ec 2f       	mov	r30, r28
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	ec 5e       	subi	r30, 0xEC	; 236
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	80 81       	ld	r24, Z
 1a2:	91 81       	ldd	r25, Z+1	; 0x01
 1a4:	e2 df       	rcall	.-60     	; 0x16a <display_char>

void display_menu(void)
{
	uint8_t i;
	
	for(i = 0; i < 4; ++i)
 1a6:	cf 5f       	subi	r28, 0xFF	; 255
 1a8:	c4 30       	cpi	r28, 0x04	; 4
 1aa:	a0 f3       	brcs	.-24     	; 0x194 <display_menu+0x6>
	{
		display_char(menu_str[i]);	
	}
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <display_withoutyou>:

void display_withoutyou(void)
{
 1b0:	cf 93       	push	r28
	uint8_t i;
	for(i = 0 ; i < 10; ++i)
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	0a c0       	rjmp	.+20     	; 0x1ca <display_withoutyou+0x1a>
	{
		display_char(pLyrics[i]);
 1b6:	ec 2f       	mov	r30, r28
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	e0 50       	subi	r30, 0x00	; 0
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	80 81       	ld	r24, Z
 1c4:	91 81       	ldd	r25, Z+1	; 0x01
 1c6:	d1 df       	rcall	.-94     	; 0x16a <display_char>
}

void display_withoutyou(void)
{
	uint8_t i;
	for(i = 0 ; i < 10; ++i)
 1c8:	cf 5f       	subi	r28, 0xFF	; 255
 1ca:	ca 30       	cpi	r28, 0x0A	; 10
 1cc:	a0 f3       	brcs	.-24     	; 0x1b6 <display_withoutyou+0x6>
	{
		display_char(pLyrics[i]);
	}
}
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <menu_main>:
	EIMSK |= (1 << INT6);
}

void menu_main(void)
{
	if (EINT6_FLAG_BIT == 1)
 1d2:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <EINT6_FLAG_BIT>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	21 f4       	brne	.+8      	; 0x1e2 <menu_main+0x10>
	{
		EINT6_FLAG_BIT = 0;
 1da:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <EINT6_FLAG_BIT>
		init_uart1();
 1de:	9d df       	rcall	.-198    	; 0x11a <init_uart1>
		display_menu();
 1e0:	d6 df       	rcall	.-84     	; 0x18e <display_menu>
 1e2:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <__data_end>
	}
	if (RX_COMPLETE_FLAG_BIT == 1)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	69 f4       	brne	.+26     	; 0x204 <menu_main+0x32>
 1ea:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <__data_end>
	{
		RX_COMPLETE_FLAG_BIT = 0;
 1ee:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <data>
		
		switch(data)
 1f2:	81 33       	cpi	r24, 0x31	; 49
 1f4:	19 f0       	breq	.+6      	; 0x1fc <menu_main+0x2a>
 1f6:	82 33       	cpi	r24, 0x32	; 50
 1f8:	19 f0       	breq	.+6      	; 0x200 <menu_main+0x2e>
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <menu_main+0x30>
		{
		case '1':
			led_blink();
 1fc:	a9 df       	rcall	.-174    	; 0x150 <led_blink>
			break;
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <menu_main+0x30>
		case '2':
			display_withoutyou();
 200:	d7 df       	rcall	.-82     	; 0x1b0 <display_withoutyou>
 202:	c5 cf       	rjmp	.-118    	; 0x18e <display_menu>
			break;
		default:
			break;
		}
		
		display_menu();
 204:	08 95       	ret

00000206 <main>:

#include "rxtx_example.h"

int main(void)
{
	init_ports();
 206:	85 df       	rcall	.-246    	; 0x112 <init_ports>
	//init_uart1();
	init_eint();
 208:	98 df       	rcall	.-208    	; 0x13a <init_eint>

	sei();
 20a:	78 94       	sei
	
    while (1) 
    {
		menu_main();
 20c:	e2 df       	rcall	.-60     	; 0x1d2 <menu_main>
 20e:	fe cf       	rjmp	.-4      	; 0x20c <main+0x6>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
