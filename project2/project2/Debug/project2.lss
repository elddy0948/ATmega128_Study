
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00000d8c  00000e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800232  00800232  00000f52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001884  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd8  00000000  00000000  00002a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f50  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  00004630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000897  00000000  00000000  00004a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000751  00000000  00000000  000052c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	c3 c0       	rjmp	.+390    	; 0x19c <__vector_5>
  16:	00 00       	nop
  18:	d2 c0       	rjmp	.+420    	; 0x1be <__vector_6>
  1a:	00 00       	nop
  1c:	e1 c0       	rjmp	.+450    	; 0x1e0 <__vector_7>
  1e:	00 00       	nop
  20:	f0 c0       	rjmp	.+480    	; 0x202 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	ba c3       	rjmp	.+1908   	; 0x79e <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	db c3       	rjmp	.+1974   	; 0x7e8 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	81 c3       	rjmp	.+1794   	; 0x744 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	71 c4       	rjmp	.+2274   	; 0x92c <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	39 c0       	rjmp	.+114    	; 0xc8 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a2 e3       	ldi	r26, 0x32	; 50
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 35       	cpi	r26, 0x56	; 86
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cc d0       	rcall	.+408    	; 0x25c <main>
  c4:	61 c6       	rjmp	.+3266   	; 0xd88 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_21>:
uint8_t AVCC_FLAG_BIT = 0;

uint8_t adc_flag = ADC_CLEAR_FLAG;

ISR(ADC_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	cli();
  d8:	f8 94       	cli
	adc_value = (int)ADCL + ((int)ADCH << 8);
  da:	24 b1       	in	r18, 0x04	; 4
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	98 2f       	mov	r25, r24
  e2:	88 27       	eor	r24, r24
  e4:	82 0f       	add	r24, r18
  e6:	91 1d       	adc	r25, r1
  e8:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <__data_end+0x1>
  ec:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
	if(adc_flag == TEMP_FLAG)
  f0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <adc_flag>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	21 f4       	brne	.+8      	; 0x100 <__vector_21+0x38>
		adc_flag = ADC_TEMP_COMPLETE_FLAG;
  f8:	8b e0       	ldi	r24, 0x0B	; 11
  fa:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <adc_flag>
  fe:	05 c0       	rjmp	.+10     	; 0x10a <__vector_21+0x42>
	else if(adc_flag == VCC_FLAG)
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	19 f4       	brne	.+6      	; 0x10a <__vector_21+0x42>
		adc_flag = ADC_VCC_COMPLETE_FLAG;
 104:	85 e1       	ldi	r24, 0x15	; 21
 106:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <adc_flag>
	sei();
 10a:	78 94       	sei
}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <ADC_init>:

void ADC_init(uint8_t flag, uint8_t target, uint8_t adfr)
{
	adc_flag = flag;
 11c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <adc_flag>
	
	ADMUX |= target;
 120:	87 b1       	in	r24, 0x07	; 7
 122:	68 2b       	or	r22, r24
 124:	67 b9       	out	0x07, r22	; 7
	ADCSRA |= (1 << ADEN);
 126:	86 b1       	in	r24, 0x06	; 6
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADIE);
 12c:	86 b1       	in	r24, 0x06	; 6
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= adfr;
 132:	86 b1       	in	r24, 0x06	; 6
 134:	48 2b       	or	r20, r24
 136:	46 b9       	out	0x06, r20	; 6
	ADCSRA |= 0x07;
 138:	86 b1       	in	r24, 0x06	; 6
 13a:	87 60       	ori	r24, 0x07	; 7
 13c:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC);
 13e:	86 b1       	in	r24, 0x06	; 6
 140:	80 64       	ori	r24, 0x40	; 64
 142:	86 b9       	out	0x06, r24	; 6
 144:	08 95       	ret

00000146 <ADC_clear>:
}

void ADC_clear(void)
{
	ADMUX = 0x00;
 146:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;
 148:	16 b8       	out	0x06, r1	; 6
 14a:	08 95       	ret

0000014c <ADC_get_value>:
}

int ADC_get_value(float mul)
{
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	6b 01       	movw	r12, r22
 156:	7c 01       	movw	r14, r24
	float float_value;
	int int_value;
	
	float_value = (float)adc_value * 5.0 / 1024.0;
 158:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <__data_end>
 15c:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <__data_end+0x1>
 160:	07 2e       	mov	r0, r23
 162:	00 0c       	add	r0, r0
 164:	88 0b       	sbc	r24, r24
 166:	99 0b       	sbc	r25, r25
 168:	f9 d4       	rcall	.+2546   	; 0xb5c <__floatsisf>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	40 ea       	ldi	r20, 0xA0	; 160
 170:	50 e4       	ldi	r21, 0x40	; 64
 172:	80 d5       	rcall	.+2816   	; 0xc74 <__mulsf3>
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	40 e8       	ldi	r20, 0x80	; 128
 17a:	5a e3       	ldi	r21, 0x3A	; 58
 17c:	7b d5       	rcall	.+2806   	; 0xc74 <__mulsf3>
	int_value = (int)(float_value * mul + 0.5);
 17e:	a7 01       	movw	r20, r14
 180:	96 01       	movw	r18, r12
 182:	78 d5       	rcall	.+2800   	; 0xc74 <__mulsf3>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	5f e3       	ldi	r21, 0x3F	; 63
 18c:	50 d4       	rcall	.+2208   	; 0xa2e <__addsf3>
 18e:	b3 d4       	rcall	.+2406   	; 0xaf6 <__fixsfsi>
 190:	cb 01       	movw	r24, r22
	
	return int_value;
}
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	08 95       	ret

0000019c <__vector_5>:
uint8_t EINT5_FLAG_BIT = 0;
uint8_t EINT6_FLAG_BIT = 0;
uint8_t EINT7_FLAG_BIT = 0;

ISR(INT4_vect)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	8f 93       	push	r24
	cli();
 1a8:	f8 94       	cli
	EINT4_FLAG_BIT = 1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <EINT4_FLAG_BIT>
	sei();
 1b0:	78 94       	sei
}
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_6>:

ISR(INT5_vect)
{
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
	cli();
 1ca:	f8 94       	cli
	EINT5_FLAG_BIT = 1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <EINT5_FLAG_BIT>
	sei();
 1d2:	78 94       	sei
}
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_7>:

ISR(INT6_vect)
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	8f 93       	push	r24
	cli();
 1ec:	f8 94       	cli
	EINT6_FLAG_BIT = 1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <EINT6_FLAG_BIT>
	sei();
 1f4:	78 94       	sei
}
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__vector_8>:

ISR(INT7_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
	cli();
 20e:	f8 94       	cli
	EINT7_FLAG_BIT = 1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <EINT7_FLAG_BIT>
	sei();
 216:	78 94       	sei
}
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <EINT4_init>:
	EINT5_init();
	EINT6_init();
	EINT7_init();
}
void EINT4_init(void) {
	EIMSK |= (1 << INT4);
 224:	89 b7       	in	r24, 0x39	; 57
 226:	80 61       	ori	r24, 0x10	; 16
 228:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1 << ISC41) | (1 << ISC40);
 22a:	8a b7       	in	r24, 0x3a	; 58
 22c:	83 60       	ori	r24, 0x03	; 3
 22e:	8a bf       	out	0x3a, r24	; 58
 230:	08 95       	ret

00000232 <EINT5_init>:
}
void EINT5_init(void) {
	EIMSK |= (1 << INT5);
 232:	89 b7       	in	r24, 0x39	; 57
 234:	80 62       	ori	r24, 0x20	; 32
 236:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1 << ISC51);	
 238:	8a b7       	in	r24, 0x3a	; 58
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	8a bf       	out	0x3a, r24	; 58
 23e:	08 95       	ret

00000240 <EINT6_init>:
}
void EINT6_init(void) {
	EIMSK |= (1 << INT6);
 240:	89 b7       	in	r24, 0x39	; 57
 242:	80 64       	ori	r24, 0x40	; 64
 244:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1 << ISC61) | (1 << ISC60);
 246:	8a b7       	in	r24, 0x3a	; 58
 248:	80 63       	ori	r24, 0x30	; 48
 24a:	8a bf       	out	0x3a, r24	; 58
 24c:	08 95       	ret

0000024e <EINT7_init>:
}
void EINT7_init(void) {
	EIMSK |= (1 << INT7);
 24e:	89 b7       	in	r24, 0x39	; 57
 250:	80 68       	ori	r24, 0x80	; 128
 252:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1 << ISC71);
 254:	8a b7       	in	r24, 0x3a	; 58
 256:	80 68       	ori	r24, 0x80	; 128
 258:	8a bf       	out	0x3a, r24	; 58
 25a:	08 95       	ret

0000025c <main>:
uint8_t menu_status = MENU_ENABLE;
uint8_t menu_input = 0;

int main(void)
{
	DDRC = 0xFF;
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 260:	85 bb       	out	0x15, r24	; 21
	
	SEG_init();
 262:	4d d1       	rcall	.+666    	; 0x4fe <SEG_init>
	UART0_init();
 264:	91 d3       	rcall	.+1826   	; 0x988 <UART0_init>
	SEG_display_birthday();
 266:	eb d1       	rcall	.+982    	; 0x63e <SEG_display_birthday>
 268:	78 94       	sei
	
	sei();
 26a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		
    while (1) 
    {
		if(menu_status == MENU_ENABLE)
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	19 f4       	brne	.+6      	; 0x278 <main+0x1c>
		{
			menu_status = MENU_DISABLE;
 272:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			UART0_display_menu();
 276:	ae d3       	rcall	.+1884   	; 0x9d4 <UART0_display_menu>
 278:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <EINT4_FLAG_BIT>
		}

		if(EINT4_FLAG_BIT == 1)
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	69 f4       	brne	.+26     	; 0x29a <main+0x3e>
 280:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <EINT4_FLAG_BIT>
		{
			EINT4_FLAG_BIT = 0;
			display_count = 0;
 284:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <display_count>
			ADC_clear();
 288:	5e df       	rcall	.-324    	; 0x146 <ADC_clear>
			TIMER_clear_all();
 28a:	4b d3       	rcall	.+1686   	; 0x922 <TIMER_clear_all>
 28c:	f4 d2       	rcall	.+1512   	; 0x876 <TIMER2_ovf_init>
			TIMER2_ovf_init();
 28e:	82 e0       	ldi	r24, 0x02	; 2
			timer0_usage = TIMER0_FOR_ADC;
 290:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <timer0_usage>
 294:	84 ef       	ldi	r24, 0xF4	; 244
			TIMER0_ovf_init(500);
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	cb d2       	rcall	.+1430   	; 0x830 <TIMER0_ovf_init>
 29a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <EINT5_FLAG_BIT>
		}
		if(EINT5_FLAG_BIT == 1)
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	69 f4       	brne	.+26     	; 0x2bc <main+0x60>
 2a2:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <EINT5_FLAG_BIT>
		{
			EINT5_FLAG_BIT= 0;
			display_count = 0;
 2a6:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <display_count>
			bday_flag = 1;
 2aa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <bday_flag>
			ADC_clear();
 2ae:	4b df       	rcall	.-362    	; 0x146 <ADC_clear>
			TIMER_clear_all();
 2b0:	38 d3       	rcall	.+1648   	; 0x922 <TIMER_clear_all>
 2b2:	cf d2       	rcall	.+1438   	; 0x852 <TIMER1_compa_init>
			TIMER1_compa_init();
 2b4:	40 e2       	ldi	r20, 0x20	; 32
 2b6:	66 e0       	ldi	r22, 0x06	; 6
			ADC_init(VCC_FLAG, 0x06, (1 << ADFR));
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	30 df       	rcall	.-416    	; 0x11c <ADC_init>
 2bc:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <EINT6_FLAG_BIT>
		}
		if(EINT6_FLAG_BIT == 1)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	c1 f4       	brne	.+48     	; 0x2f4 <main+0x98>
		{
			EINT6_FLAG_BIT = 0;
 2c4:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <EINT6_FLAG_BIT>
			display_count = 0;
 2c8:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <display_count>
			bday_flag = 1;
 2cc:	c1 e0       	ldi	r28, 0x01	; 1
			ADC_clear();
 2ce:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <bday_flag>
			TIMER_clear_all();
 2d2:	39 df       	rcall	.-398    	; 0x146 <ADC_clear>
 2d4:	26 d3       	rcall	.+1612   	; 0x922 <TIMER_clear_all>
			TIMER3_pwm_init();
 2d6:	dc d2       	rcall	.+1464   	; 0x890 <TIMER3_pwm_init>
 2d8:	86 e0       	ldi	r24, 0x06	; 6
			UART0_transmit_string("FAST PWM START\r");
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	69 d3       	rcall	.+1746   	; 0x9b0 <UART0_transmit_string>
 2de:	c0 93 39 02 	sts	0x0239, r28	; 0x800239 <timer0_usage>
			timer0_usage = TIMER0_FOR_TIMER3;
 2e2:	8c ea       	ldi	r24, 0xAC	; 172
 2e4:	9d e0       	ldi	r25, 0x0D	; 13
			TIMER0_ovf_init(3500);	// 7SEC
 2e6:	a4 d2       	rcall	.+1352   	; 0x830 <TIMER0_ovf_init>
 2e8:	86 e1       	ldi	r24, 0x16	; 22
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <uart_message+0x1>
			uart_message = "FAST PWM STOPPED\r";
 2f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <uart_message>
		}
		if(EINT7_FLAG_BIT == 1)
 2f4:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <EINT7_FLAG_BIT>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	c1 f4       	brne	.+48     	; 0x32c <main+0xd0>
		{
			EINT7_FLAG_BIT = 0;
 2fc:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <EINT7_FLAG_BIT>
			display_count = 0;
 300:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <display_count>
			bday_flag = 1;
 304:	c1 e0       	ldi	r28, 0x01	; 1
 306:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <bday_flag>
			ADC_clear();
 30a:	1d df       	rcall	.-454    	; 0x146 <ADC_clear>
			TIMER_clear_all();
 30c:	0a d3       	rcall	.+1556   	; 0x922 <TIMER_clear_all>
 30e:	da d2       	rcall	.+1460   	; 0x8c4 <TIMER3_pc_pwm_init>
			TIMER3_pc_pwm_init();
 310:	88 e2       	ldi	r24, 0x28	; 40
 312:	91 e0       	ldi	r25, 0x01	; 1
			UART0_transmit_string("PC PWM START\r");
 314:	4d d3       	rcall	.+1690   	; 0x9b0 <UART0_transmit_string>
 316:	c0 93 39 02 	sts	0x0239, r28	; 0x800239 <timer0_usage>
 31a:	80 ea       	ldi	r24, 0xA0	; 160
			timer0_usage = TIMER0_FOR_TIMER3;
 31c:	9f e0       	ldi	r25, 0x0F	; 15
 31e:	88 d2       	rcall	.+1296   	; 0x830 <TIMER0_ovf_init>
			TIMER0_ovf_init(4000);	// 8SEC
 320:	86 e3       	ldi	r24, 0x36	; 54
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <uart_message+0x1>
			uart_message = "PC PWM STOPPED\r";
 328:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <uart_message>
 32c:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <TIMER0_OVF_FLAG_BIT>
 330:	81 30       	cpi	r24, 0x01	; 1
		}
		if(TIMER0_OVF_FLAG_BIT == 1)
 332:	b1 f4       	brne	.+44     	; 0x360 <main+0x104>
 334:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <TIMER0_OVF_FLAG_BIT>
		{
			TIMER0_OVF_FLAG_BIT = 0;
 338:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <timer0_usage>
			if(timer0_usage == TIMER0_FOR_ADC)
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	19 f4       	brne	.+6      	; 0x346 <main+0xea>
 340:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <timer0_usage>
			{
				timer0_usage = 0;
 344:	0d c0       	rjmp	.+26     	; 0x360 <main+0x104>
 346:	81 30       	cpi	r24, 0x01	; 1
			}
			else if(timer0_usage == TIMER0_FOR_TIMER3)
 348:	59 f4       	brne	.+22     	; 0x360 <main+0x104>
 34a:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <timer0_usage>
			{
				timer0_usage = 0;
 34e:	e9 d2       	rcall	.+1490   	; 0x922 <TIMER_clear_all>
				TIMER_clear_all();
 350:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <uart_message>
				UART0_transmit_string(uart_message);
 354:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <uart_message+0x1>
 358:	2b d3       	rcall	.+1622   	; 0x9b0 <UART0_transmit_string>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				menu_status = MENU_ENABLE;
 360:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <TIMER2_OVF_FLAG_BIT>
 364:	81 30       	cpi	r24, 0x01	; 1
			}
		}
		if(TIMER2_OVF_FLAG_BIT == 1)
 366:	29 f4       	brne	.+10     	; 0x372 <main+0x116>
 368:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <TIMER2_OVF_FLAG_BIT>
		{
			TIMER2_OVF_FLAG_BIT = 0;
 36c:	40 e0       	ldi	r20, 0x00	; 0
			ADC_init(TEMP_FLAG, 0x07, 0x00);
 36e:	67 e0       	ldi	r22, 0x07	; 7
 370:	d5 de       	rcall	.-598    	; 0x11c <ADC_init>
 372:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <TIMER1_COMPA_FLAG_BIT>
		}
		if(TIMER1_COMPA_FLAG_BIT == 1)
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	d1 f4       	brne	.+52     	; 0x3ae <main+0x152>
		{
			TIMER1_COMPA_FLAG_BIT = 0;
 37a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <TIMER1_COMPA_FLAG_BIT>
			display_count++;
 37e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <display_count>
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <display_count>
			val = ADC_get_value(100.0);
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	88 ec       	ldi	r24, 0xC8	; 200
 38e:	92 e4       	ldi	r25, 0x42	; 66
 390:	dd de       	rcall	.-582    	; 0x14c <ADC_get_value>
 392:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <val+0x1>
 396:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <val>
 39a:	22 d3       	rcall	.+1604   	; 0x9e0 <UART0_transmit_voltage>
			UART0_transmit_voltage(val);
 39c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <display_count>
			
			if(display_count == 10) {
 3a0:	8a 30       	cpi	r24, 0x0A	; 10
 3a2:	29 f4       	brne	.+10     	; 0x3ae <main+0x152>
 3a4:	be d2       	rcall	.+1404   	; 0x922 <TIMER_clear_all>
				TIMER_clear_all();
 3a6:	cf de       	rcall	.-610    	; 0x146 <ADC_clear>
 3a8:	81 e0       	ldi	r24, 0x01	; 1
				ADC_clear();
 3aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				menu_status =MENU_ENABLE;
 3ae:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <adc_flag>
			}
		}
		if(adc_flag == ADC_TEMP_COMPLETE_FLAG)
 3b2:	8b 30       	cpi	r24, 0x0B	; 11
 3b4:	61 f5       	brne	.+88     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3b6:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <adc_flag>
		{
			adc_flag = ADC_CLEAR_FLAG;
			bday_flag = 0;
 3ba:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <bday_flag>
			display_count++;
 3be:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <display_count>
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <display_count>
			
			val = ADC_get_value(1000.0);
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	8a e7       	ldi	r24, 0x7A	; 122
 3ce:	94 e4       	ldi	r25, 0x44	; 68
 3d0:	bd de       	rcall	.-646    	; 0x14c <ADC_get_value>
 3d2:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <val+0x1>
 3d6:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <val>
			n1000 = val / 1000;
 3da:	68 ee       	ldi	r22, 0xE8	; 232
 3dc:	73 e0       	ldi	r23, 0x03	; 3
 3de:	ad d4       	rcall	.+2394   	; 0xd3a <__divmodhi4>
 3e0:	60 93 53 02 	sts	0x0253, r22	; 0x800253 <n1000>
			n100 = (val % 1000) / 100;
 3e4:	64 e6       	ldi	r22, 0x64	; 100
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	a8 d4       	rcall	.+2384   	; 0xd3a <__divmodhi4>
 3ea:	60 93 55 02 	sts	0x0255, r22	; 0x800255 <n100>
			n10 = ((val % 1000) % 100) / 10;
 3ee:	6a e0       	ldi	r22, 0x0A	; 10
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	a3 d4       	rcall	.+2374   	; 0xd3a <__divmodhi4>
 3f4:	60 93 52 02 	sts	0x0252, r22	; 0x800252 <n10>
 3f8:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <n1>
			n1 = ((val % 1000) % 100) % 10;
 3fc:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <display_count>
			
			if(display_count == 10)
 400:	8a 30       	cpi	r24, 0x0A	; 10
 402:	29 f4       	brne	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			{
				bday_flag = 1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <bday_flag>
				TIMER_clear_all();
 40a:	8b d2       	rcall	.+1302   	; 0x922 <TIMER_clear_all>
				ADC_clear();
 40c:	9c de       	rcall	.-712    	; 0x146 <ADC_clear>
 40e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <adc_flag>
			}
		}
		if(adc_flag == ADC_VCC_COMPLETE_FLAG)
 412:	85 31       	cpi	r24, 0x15	; 21
 414:	11 f4       	brne	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			adc_flag = ADC_CLEAR_FLAG;
 416:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <adc_flag>
		}
		if(EINT4_ENABLE_FLAG_BIT == 1)
 41a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <EINT4_ENABLE_FLAG_BIT>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	49 f4       	brne	.+18     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		{
			EINT4_ENABLE_FLAG_BIT = 0;
 422:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <EINT4_ENABLE_FLAG_BIT>
			EINT4_init();
			UART0_transmit_string("ENABLE EINT4...\r");
 426:	fe de       	rcall	.-516    	; 0x224 <EINT4_init>
 428:	86 e4       	ldi	r24, 0x46	; 70
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	c1 d2       	rcall	.+1410   	; 0x9b0 <UART0_transmit_string>
			menu_status = MENU_ENABLE;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if(EINT5_ENABLE_FLAG_BIT == 1)
 434:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <EINT5_ENABLE_FLAG_BIT>
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	31 f4       	brne	.+12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		{
			EINT5_ENABLE_FLAG_BIT = 0;
 43c:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <EINT5_ENABLE_FLAG_BIT>
			EINT5_init();
 440:	f8 de       	rcall	.-528    	; 0x232 <EINT5_init>
			UART0_transmit_string("ENABLE EINT5...\r");
 442:	87 e5       	ldi	r24, 0x57	; 87
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	b4 d2       	rcall	.+1384   	; 0x9b0 <UART0_transmit_string>
 448:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <EINT6_ENABLE_FLAG_BIT>
		}
		if(EINT6_ENABLE_FLAG_BIT == 1)
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	31 f4       	brne	.+12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 450:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <EINT6_ENABLE_FLAG_BIT>
		{
			EINT6_ENABLE_FLAG_BIT = 0;
 454:	f5 de       	rcall	.-534    	; 0x240 <EINT6_init>
			EINT6_init();
 456:	88 e6       	ldi	r24, 0x68	; 104
 458:	91 e0       	ldi	r25, 0x01	; 1
			UART0_transmit_string("ENABLE EINT6...\r");
 45a:	aa d2       	rcall	.+1364   	; 0x9b0 <UART0_transmit_string>
 45c:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <EINT7_ENABLE_FLAG_BIT>
		}
		if(EINT7_ENABLE_FLAG_BIT == 1)
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	31 f4       	brne	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 464:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <EINT7_ENABLE_FLAG_BIT>
		{
			EINT7_ENABLE_FLAG_BIT = 0;
 468:	f2 de       	rcall	.-540    	; 0x24e <EINT7_init>
 46a:	89 e7       	ldi	r24, 0x79	; 121
			EINT7_init();
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	a0 d2       	rcall	.+1344   	; 0x9b0 <UART0_transmit_string>
			UART0_transmit_string("ENABLE EINT7... \r");
 470:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <bday_flag>
 474:	88 23       	and	r24, r24
 476:	51 f0       	breq	.+20     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		}
		if (bday_flag)
 478:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <digits_display>
 47c:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <digits_display+0x1>
		{
			SEG_display_4byte(digits_display);
 480:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <digits_display+0x2>
 484:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <digits_display+0x3>
 488:	45 d0       	rcall	.+138    	; 0x514 <SEG_display_4byte>
 48a:	ef ce       	rjmp	.-546    	; 0x26a <main+0xe>
 48c:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <timer0_count>
 490:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <timer0_count+0x1>
		}
		else
		{
 			if(timer0_count % 4 == 0)
 494:	9c 01       	movw	r18, r24
 496:	23 70       	andi	r18, 0x03	; 3
 498:	33 27       	eor	r19, r19
 49a:	23 2b       	or	r18, r19
 49c:	39 f4       	brne	.+14     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 49e:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <n1000>
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 			{
 				SEG_display_digit(4, n1000);
 4a4:	84 e0       	ldi	r24, 0x04	; 4
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	2e d1       	rcall	.+604    	; 0x706 <SEG_display_digit>
 4aa:	df ce       	rjmp	.-578    	; 0x26a <main+0xe>
 4ac:	83 70       	andi	r24, 0x03	; 3
 4ae:	90 78       	andi	r25, 0x80	; 128
 4b0:	99 23       	and	r25, r25
 			}
 			else if(timer0_count % 4 == 1)
 4b2:	24 f4       	brge	.+8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	8c 6f       	ori	r24, 0xFC	; 252
 4b8:	9f 6f       	ori	r25, 0xFF	; 255
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	91 05       	cpc	r25, r1
 4c0:	39 f4       	brne	.+14     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4c2:	60 91 55 02 	lds	r22, 0x0255	; 0x800255 <n100>
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 			{
 				SEG_display_digit(3, n100);
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	1c d1       	rcall	.+568    	; 0x706 <SEG_display_digit>
 4ce:	cd ce       	rjmp	.-614    	; 0x26a <main+0xe>
 4d0:	82 30       	cpi	r24, 0x02	; 2
 4d2:	91 05       	cpc	r25, r1
 4d4:	51 f4       	brne	.+20     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4d6:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <n10>
 			}
 			else if(timer0_count % 4 == 2)
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 			{
 				SEG_display_digit(2, n10);
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	12 d1       	rcall	.+548    	; 0x706 <SEG_display_digit>
 4e2:	88 b3       	in	r24, 0x18	; 24
 4e4:	80 68       	ori	r24, 0x80	; 128
 4e6:	88 bb       	out	0x18, r24	; 24
 4e8:	c0 ce       	rjmp	.-640    	; 0x26a <main+0xe>
 4ea:	03 97       	sbiw	r24, 0x03	; 3
				PORTB = PORTB | 0x80;
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4ee:	bd ce       	rjmp	.-646    	; 0x26a <main+0xe>
 4f0:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <n1>
 			}
 			else if(timer0_count % 4 == 3)
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 			{
 				SEG_display_digit(1, n1);
 4fa:	05 d1       	rcall	.+522    	; 0x706 <SEG_display_digit>
 4fc:	b6 ce       	rjmp	.-660    	; 0x26a <main+0xe>

000004fe <SEG_init>:
const char seg_pat[10]= {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
uint32_t digits_display = 0x00000000;

void SEG_init(void)
{
	DDRB = 0xF0;
 4fe:	80 ef       	ldi	r24, 0xF0	; 240
 500:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xF0;
 502:	81 bb       	out	0x11, r24	; 17
	DDRG = 0x0F;
 504:	8f e0       	ldi	r24, 0x0F	; 15
 506:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	PORTB = 0x00;
 50a:	18 ba       	out	0x18, r1	; 24
	PORTD = 0x00;
 50c:	12 ba       	out	0x12, r1	; 18
	PORTG = 0x0F;
 50e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 512:	08 95       	ret

00000514 <SEG_display_4byte>:
}

void SEG_display_4byte(uint32_t val)
{
 514:	cf 92       	push	r12
 516:	df 92       	push	r13
 518:	ef 92       	push	r14
 51a:	ff 92       	push	r15
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
	PORTG = 0x08;
 520:	e5 e6       	ldi	r30, 0x65	; 101
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	28 e0       	ldi	r18, 0x08	; 8
 526:	20 83       	st	Z, r18
	PORTD = ((val & 0x0000000F) << 4) | (PORTD & 0x0F);
 528:	22 b3       	in	r18, 0x12	; 18
 52a:	36 2f       	mov	r19, r22
 52c:	32 95       	swap	r19
 52e:	30 7f       	andi	r19, 0xF0	; 240
 530:	2f 70       	andi	r18, 0x0F	; 15
 532:	23 2b       	or	r18, r19
 534:	22 bb       	out	0x12, r18	; 18
	PORTB = (val & 0x000000F0) | (PORTB & 0x0F);
 536:	28 b3       	in	r18, 0x18	; 24
 538:	36 2f       	mov	r19, r22
 53a:	30 7f       	andi	r19, 0xF0	; 240
 53c:	2f 70       	andi	r18, 0x0F	; 15
 53e:	23 2b       	or	r18, r19
 540:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 542:	af e3       	ldi	r26, 0x3F	; 63
 544:	bf e1       	ldi	r27, 0x1F	; 31
 546:	11 97       	sbiw	r26, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <SEG_display_4byte+0x32>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <SEG_display_4byte+0x38>
 54c:	00 00       	nop
	_delay_ms(2);
	PORTG = 0x04;
 54e:	24 e0       	ldi	r18, 0x04	; 4
 550:	20 83       	st	Z, r18
	PORTD = ((val & 0x00000F00) >> 4) | (PORTD & 0x0F);
 552:	8b 01       	movw	r16, r22
 554:	9c 01       	movw	r18, r24
 556:	00 27       	eor	r16, r16
 558:	1f 70       	andi	r17, 0x0F	; 15
 55a:	22 27       	eor	r18, r18
 55c:	33 27       	eor	r19, r19
 55e:	68 94       	set
 560:	13 f8       	bld	r1, 3
 562:	36 95       	lsr	r19
 564:	27 95       	ror	r18
 566:	17 95       	ror	r17
 568:	07 95       	ror	r16
 56a:	16 94       	lsr	r1
 56c:	d1 f7       	brne	.-12     	; 0x562 <SEG_display_4byte+0x4e>
 56e:	42 b3       	in	r20, 0x12	; 18
 570:	4f 70       	andi	r20, 0x0F	; 15
 572:	04 2b       	or	r16, r20
 574:	02 bb       	out	0x12, r16	; 18
	PORTB = ((val & 0x0000F000) >> 8) | (PORTB & 0x0F);
 576:	6b 01       	movw	r12, r22
 578:	7c 01       	movw	r14, r24
 57a:	cc 24       	eor	r12, r12
 57c:	b0 ef       	ldi	r27, 0xF0	; 240
 57e:	db 22       	and	r13, r27
 580:	ee 24       	eor	r14, r14
 582:	ff 24       	eor	r15, r15
 584:	28 b3       	in	r18, 0x18	; 24
 586:	2f 70       	andi	r18, 0x0F	; 15
 588:	2d 29       	or	r18, r13
 58a:	28 bb       	out	0x18, r18	; 24
 58c:	af e3       	ldi	r26, 0x3F	; 63
 58e:	bf e1       	ldi	r27, 0x1F	; 31
 590:	11 97       	sbiw	r26, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <SEG_display_4byte+0x7c>
 594:	00 c0       	rjmp	.+0      	; 0x596 <SEG_display_4byte+0x82>
 596:	00 00       	nop
	_delay_ms(2);
	PORTG = 0x02;
 598:	22 e0       	ldi	r18, 0x02	; 2
 59a:	20 83       	st	Z, r18
	PORTD = ((val & 0x000F0000) >> 12) | (PORTD & 0x0F);
 59c:	8b 01       	movw	r16, r22
 59e:	9c 01       	movw	r18, r24
 5a0:	00 27       	eor	r16, r16
 5a2:	11 27       	eor	r17, r17
 5a4:	2f 70       	andi	r18, 0x0F	; 15
 5a6:	33 27       	eor	r19, r19
 5a8:	0f 2e       	mov	r0, r31
 5aa:	fc e0       	ldi	r31, 0x0C	; 12
 5ac:	36 95       	lsr	r19
 5ae:	27 95       	ror	r18
 5b0:	17 95       	ror	r17
 5b2:	07 95       	ror	r16
 5b4:	fa 95       	dec	r31
 5b6:	d1 f7       	brne	.-12     	; 0x5ac <SEG_display_4byte+0x98>
 5b8:	f0 2d       	mov	r31, r0
 5ba:	42 b3       	in	r20, 0x12	; 18
 5bc:	4f 70       	andi	r20, 0x0F	; 15
 5be:	04 2b       	or	r16, r20
 5c0:	02 bb       	out	0x12, r16	; 18
	PORTB = ((val & 0x00F00000) >>16) | (PORTB & 0x0F);
 5c2:	6b 01       	movw	r12, r22
 5c4:	7c 01       	movw	r14, r24
 5c6:	cc 24       	eor	r12, r12
 5c8:	dd 24       	eor	r13, r13
 5ca:	b0 ef       	ldi	r27, 0xF0	; 240
 5cc:	eb 22       	and	r14, r27
 5ce:	ff 24       	eor	r15, r15
 5d0:	28 b3       	in	r18, 0x18	; 24
 5d2:	2f 70       	andi	r18, 0x0F	; 15
 5d4:	2e 29       	or	r18, r14
 5d6:	28 bb       	out	0x18, r18	; 24
 5d8:	af e3       	ldi	r26, 0x3F	; 63
 5da:	bf e1       	ldi	r27, 0x1F	; 31
 5dc:	11 97       	sbiw	r26, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <SEG_display_4byte+0xc8>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <SEG_display_4byte+0xce>
 5e2:	00 00       	nop
	_delay_ms(2);
	PORTG = 0x01;
 5e4:	21 e0       	ldi	r18, 0x01	; 1
 5e6:	20 83       	st	Z, r18
	PORTD = ((val & 0x0F000000) >> 20) | (PORTD & 0x0F);
 5e8:	8b 01       	movw	r16, r22
 5ea:	9c 01       	movw	r18, r24
 5ec:	00 27       	eor	r16, r16
 5ee:	11 27       	eor	r17, r17
 5f0:	22 27       	eor	r18, r18
 5f2:	3f 70       	andi	r19, 0x0F	; 15
 5f4:	0f 2e       	mov	r0, r31
 5f6:	f4 e1       	ldi	r31, 0x14	; 20
 5f8:	36 95       	lsr	r19
 5fa:	27 95       	ror	r18
 5fc:	17 95       	ror	r17
 5fe:	07 95       	ror	r16
 600:	fa 95       	dec	r31
 602:	d1 f7       	brne	.-12     	; 0x5f8 <SEG_display_4byte+0xe4>
 604:	f0 2d       	mov	r31, r0
 606:	42 b3       	in	r20, 0x12	; 18
 608:	4f 70       	andi	r20, 0x0F	; 15
 60a:	04 2b       	or	r16, r20
 60c:	02 bb       	out	0x12, r16	; 18
	PORTB = ((val & 0xF0000000) >> 24) | (PORTB & 0x0F);
 60e:	dc 01       	movw	r26, r24
 610:	cb 01       	movw	r24, r22
 612:	88 27       	eor	r24, r24
 614:	99 27       	eor	r25, r25
 616:	aa 27       	eor	r26, r26
 618:	b0 7f       	andi	r27, 0xF0	; 240
 61a:	28 b3       	in	r18, 0x18	; 24
 61c:	2f 70       	andi	r18, 0x0F	; 15
 61e:	82 2f       	mov	r24, r18
 620:	8b 2b       	or	r24, r27
 622:	88 bb       	out	0x18, r24	; 24
 624:	8f e3       	ldi	r24, 0x3F	; 63
 626:	9f e1       	ldi	r25, 0x1F	; 31
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	f1 f7       	brne	.-4      	; 0x628 <SEG_display_4byte+0x114>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <SEG_display_4byte+0x11a>
 62e:	00 00       	nop
	_delay_ms(2);
}
 630:	1f 91       	pop	r17
 632:	0f 91       	pop	r16
 634:	ff 90       	pop	r15
 636:	ef 90       	pop	r14
 638:	df 90       	pop	r13
 63a:	cf 90       	pop	r12
 63c:	08 95       	ret

0000063e <SEG_display_birthday>:

void SEG_display_birthday(void)
{
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
 64a:	28 97       	sbiw	r28, 0x08	; 8
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	f8 94       	cli
 650:	de bf       	out	0x3e, r29	; 62
 652:	0f be       	out	0x3f, r0	; 63
 654:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t bday[8] = {
 656:	9b e5       	ldi	r25, 0x5B	; 91
 658:	99 83       	std	Y+1, r25	; 0x01
 65a:	8f e3       	ldi	r24, 0x3F	; 63
 65c:	8a 83       	std	Y+2, r24	; 0x02
 65e:	9b 83       	std	Y+3, r25	; 0x03
 660:	2f e4       	ldi	r18, 0x4F	; 79
 662:	2c 83       	std	Y+4, r18	; 0x04
 664:	8d 83       	std	Y+5, r24	; 0x05
 666:	2e 83       	std	Y+6, r18	; 0x06
 668:	9f 83       	std	Y+7, r25	; 0x07
 66a:	88 87       	std	Y+8, r24	; 0x08
	};
	uint8_t bday_size = sizeof(bday) / sizeof(bday[0]);
	
	uint8_t digit_index = 0;
	
	for (i = 0; i < bday_size; ++i)
 66c:	00 e0       	ldi	r16, 0x00	; 0
 66e:	3d c0       	rjmp	.+122    	; 0x6ea <SEG_display_birthday+0xac>
	{
		digits_display |= bday[i];
 670:	e1 e0       	ldi	r30, 0x01	; 1
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	ec 0f       	add	r30, r28
 676:	fd 1f       	adc	r31, r29
 678:	e0 0f       	add	r30, r16
 67a:	f1 1d       	adc	r31, r1
 67c:	20 81       	ld	r18, Z
 67e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <digits_display>
 682:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <digits_display+0x1>
 686:	a0 91 3f 02 	lds	r26, 0x023F	; 0x80023f <digits_display+0x2>
 68a:	b0 91 40 02 	lds	r27, 0x0240	; 0x800240 <digits_display+0x3>
 68e:	82 2b       	or	r24, r18
 690:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <digits_display>
 694:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <digits_display+0x1>
 698:	a0 93 3f 02 	sts	0x023F, r26	; 0x80023f <digits_display+0x2>
 69c:	b0 93 40 02 	sts	0x0240, r27	; 0x800240 <digits_display+0x3>
		
		for (digit_index = 0; digit_index < 25; ++digit_index)
 6a0:	10 e0       	ldi	r17, 0x00	; 0
 6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <SEG_display_birthday+0x7a>
		{
			SEG_display_4byte(digits_display);
 6a4:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <digits_display>
 6a8:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <digits_display+0x1>
 6ac:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <digits_display+0x2>
 6b0:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <digits_display+0x3>
 6b4:	2f df       	rcall	.-418    	; 0x514 <SEG_display_4byte>
	
	for (i = 0; i < bday_size; ++i)
	{
		digits_display |= bday[i];
		
		for (digit_index = 0; digit_index < 25; ++digit_index)
 6b6:	1f 5f       	subi	r17, 0xFF	; 255
 6b8:	19 31       	cpi	r17, 0x19	; 25
 6ba:	a0 f3       	brcs	.-24     	; 0x6a4 <SEG_display_birthday+0x66>
		{
			SEG_display_4byte(digits_display);
		}
		
		if (i != bday_size - 1) {		
 6bc:	07 30       	cpi	r16, 0x07	; 7
 6be:	a1 f0       	breq	.+40     	; 0x6e8 <SEG_display_birthday+0xaa>
			digits_display <<= 8;	
 6c0:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <digits_display>
 6c4:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <digits_display+0x1>
 6c8:	a0 91 3f 02 	lds	r26, 0x023F	; 0x80023f <digits_display+0x2>
 6cc:	b0 91 40 02 	lds	r27, 0x0240	; 0x800240 <digits_display+0x3>
 6d0:	ba 2f       	mov	r27, r26
 6d2:	a9 2f       	mov	r26, r25
 6d4:	98 2f       	mov	r25, r24
 6d6:	88 27       	eor	r24, r24
 6d8:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <digits_display>
 6dc:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <digits_display+0x1>
 6e0:	a0 93 3f 02 	sts	0x023F, r26	; 0x80023f <digits_display+0x2>
 6e4:	b0 93 40 02 	sts	0x0240, r27	; 0x800240 <digits_display+0x3>
	};
	uint8_t bday_size = sizeof(bday) / sizeof(bday[0]);
	
	uint8_t digit_index = 0;
	
	for (i = 0; i < bday_size; ++i)
 6e8:	0f 5f       	subi	r16, 0xFF	; 255
 6ea:	08 30       	cpi	r16, 0x08	; 8
 6ec:	08 f4       	brcc	.+2      	; 0x6f0 <SEG_display_birthday+0xb2>
 6ee:	c0 cf       	rjmp	.-128    	; 0x670 <SEG_display_birthday+0x32>
		
		if (i != bday_size - 1) {		
			digits_display <<= 8;	
		}
	}
}
 6f0:	28 96       	adiw	r28, 0x08	; 8
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	de bf       	out	0x3e, r29	; 62
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	cd bf       	out	0x3d, r28	; 61
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	08 95       	ret

00000706 <SEG_display_digit>:

void SEG_display_digit(int pos, int val)
{
	PORTG = (1 << (4 - pos));
 706:	24 e0       	ldi	r18, 0x04	; 4
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	28 1b       	sub	r18, r24
 70c:	39 0b       	sbc	r19, r25
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <SEG_display_digit+0x12>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	2a 95       	dec	r18
 71a:	e2 f7       	brpl	.-8      	; 0x714 <SEG_display_digit+0xe>
 71c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	PORTD = ((seg_pat[val] & 0x0F) << 4) | (PORTD & 0x0F);
 720:	fb 01       	movw	r30, r22
 722:	e5 57       	subi	r30, 0x75	; 117
 724:	fe 4f       	sbci	r31, 0xFE	; 254
 726:	90 81       	ld	r25, Z
 728:	80 e1       	ldi	r24, 0x10	; 16
 72a:	98 9f       	mul	r25, r24
 72c:	90 01       	movw	r18, r0
 72e:	11 24       	eor	r1, r1
 730:	82 b3       	in	r24, 0x12	; 18
 732:	8f 70       	andi	r24, 0x0F	; 15
 734:	28 2b       	or	r18, r24
 736:	22 bb       	out	0x12, r18	; 18
	PORTB = (seg_pat[val] & 0x70) | (PORTB & 0x0F);
 738:	88 b3       	in	r24, 0x18	; 24
 73a:	90 77       	andi	r25, 0x70	; 112
 73c:	8f 70       	andi	r24, 0x0F	; 15
 73e:	89 2b       	or	r24, r25
 740:	88 bb       	out	0x18, r24	; 24
 742:	08 95       	ret

00000744 <__vector_16>:
uint8_t TIMER1_COMPA_FLAG_BIT = 0;
uint8_t TIMER0_OVF_FLAG_BIT = 0;

/* TIMER SERVICE ROUTINE */
ISR(TIMER0_OVF_vect)
{
 744:	1f 92       	push	r1
 746:	0f 92       	push	r0
 748:	0f b6       	in	r0, 0x3f	; 63
 74a:	0f 92       	push	r0
 74c:	11 24       	eor	r1, r1
 74e:	2f 93       	push	r18
 750:	3f 93       	push	r19
 752:	8f 93       	push	r24
 754:	9f 93       	push	r25
	cli();
 756:	f8 94       	cli
	timer0_count++;
 758:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <timer0_count>
 75c:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <timer0_count+0x1>
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <timer0_count+0x1>
 766:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <timer0_count>
	if(timer0_count >= BASE_COUNT)
 76a:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <BASE_COUNT>
 76e:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <BASE_COUNT+0x1>
 772:	82 17       	cp	r24, r18
 774:	93 07       	cpc	r25, r19
 776:	38 f0       	brcs	.+14     	; 0x786 <__vector_16+0x42>
	{
		TIMER0_OVF_FLAG_BIT = 1;
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <TIMER0_OVF_FLAG_BIT>
		timer0_count = 0;
 77e:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <timer0_count+0x1>
 782:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <timer0_count>
	}
	TCNT0 = TCNT0_BASE;
 786:	83 e8       	ldi	r24, 0x83	; 131
 788:	82 bf       	out	0x32, r24	; 50

	sei();
 78a:	78 94       	sei
}
 78c:	9f 91       	pop	r25
 78e:	8f 91       	pop	r24
 790:	3f 91       	pop	r19
 792:	2f 91       	pop	r18
 794:	0f 90       	pop	r0
 796:	0f be       	out	0x3f, r0	; 63
 798:	0f 90       	pop	r0
 79a:	1f 90       	pop	r1
 79c:	18 95       	reti

0000079e <__vector_10>:

ISR(TIMER2_OVF_vect)
{
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	8f 93       	push	r24
 7aa:	9f 93       	push	r25
	cli();
 7ac:	f8 94       	cli
	
	timer2_count++;
 7ae:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <timer2_count>
 7b2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <timer2_count+0x1>
 7b6:	01 96       	adiw	r24, 0x01	; 1
 7b8:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <timer2_count+0x1>
 7bc:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <timer2_count>
	if(timer2_count >= 200)
 7c0:	88 3c       	cpi	r24, 0xC8	; 200
 7c2:	91 05       	cpc	r25, r1
 7c4:	3c f0       	brlt	.+14     	; 0x7d4 <__vector_10+0x36>
	{
		TIMER2_OVF_FLAG_BIT = 1;
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <TIMER2_OVF_FLAG_BIT>
		timer2_count = 0;
 7cc:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <timer2_count+0x1>
 7d0:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <timer2_count>
	}
	TCNT2 = TCNT2_BASE;
 7d4:	86 e0       	ldi	r24, 0x06	; 6
 7d6:	84 bd       	out	0x24, r24	; 36
	
	sei();
 7d8:	78 94       	sei
}
 7da:	9f 91       	pop	r25
 7dc:	8f 91       	pop	r24
 7de:	0f 90       	pop	r0
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	0f 90       	pop	r0
 7e4:	1f 90       	pop	r1
 7e6:	18 95       	reti

000007e8 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
 7e8:	1f 92       	push	r1
 7ea:	0f 92       	push	r0
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	0f 92       	push	r0
 7f0:	11 24       	eor	r1, r1
 7f2:	8f 93       	push	r24
 7f4:	9f 93       	push	r25
	cli();
 7f6:	f8 94       	cli
	timer1_count++;
 7f8:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <timer1_count>
 7fc:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <timer1_count+0x1>
 800:	01 96       	adiw	r24, 0x01	; 1
 802:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <timer1_count+0x1>
 806:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <timer1_count>
	if(timer1_count >= 10)
 80a:	0a 97       	sbiw	r24, 0x0a	; 10
 80c:	3c f0       	brlt	.+14     	; 0x81c <__vector_12+0x34>
	{
		TIMER1_COMPA_FLAG_BIT = 1;
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <TIMER1_COMPA_FLAG_BIT>
		timer1_count = 0;
 814:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <timer1_count+0x1>
 818:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <timer1_count>
	}
	TCNT1 = 0;
 81c:	1d bc       	out	0x2d, r1	; 45
 81e:	1c bc       	out	0x2c, r1	; 44
	sei();
 820:	78 94       	sei
}
 822:	9f 91       	pop	r25
 824:	8f 91       	pop	r24
 826:	0f 90       	pop	r0
 828:	0f be       	out	0x3f, r0	; 63
 82a:	0f 90       	pop	r0
 82c:	1f 90       	pop	r1
 82e:	18 95       	reti

00000830 <TIMER0_ovf_init>:

/* TIMER INIT */
void TIMER0_ovf_init(uint16_t cnt)
{
	timer0_count = 0;
 830:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <timer0_count+0x1>
 834:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <timer0_count>
	
	BASE_COUNT = cnt;
 838:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <BASE_COUNT+0x1>
 83c:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <BASE_COUNT>
	TIMSK |= (1 << TOIE0);
 840:	87 b7       	in	r24, 0x37	; 55
 842:	81 60       	ori	r24, 0x01	; 1
 844:	87 bf       	out	0x37, r24	; 55
	TCNT0 = TCNT0_BASE;
 846:	83 e8       	ldi	r24, 0x83	; 131
 848:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= (1 << CS02) | (1 << CS01);
 84a:	83 b7       	in	r24, 0x33	; 51
 84c:	86 60       	ori	r24, 0x06	; 6
 84e:	83 bf       	out	0x33, r24	; 51
 850:	08 95       	ret

00000852 <TIMER1_compa_init>:
}

void TIMER1_compa_init(void)
{
	timer1_count = 0;
 852:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <timer1_count+0x1>
 856:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <timer1_count>
	TIMSK |= (1 << OCIE1A);
 85a:	87 b7       	in	r24, 0x37	; 55
 85c:	80 61       	ori	r24, 0x10	; 16
 85e:	87 bf       	out	0x37, r24	; 55
	TCCR1B |= (1 << WGM12);
 860:	8e b5       	in	r24, 0x2e	; 46
 862:	88 60       	ori	r24, 0x08	; 8
 864:	8e bd       	out	0x2e, r24	; 46
	OCR1AH = OCR1_H;
 866:	83 e1       	ldi	r24, 0x13	; 19
 868:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = OCR1_L;
 86a:	87 e8       	ldi	r24, 0x87	; 135
 86c:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << CS12) | (1 << CS10);
 86e:	8e b5       	in	r24, 0x2e	; 46
 870:	85 60       	ori	r24, 0x05	; 5
 872:	8e bd       	out	0x2e, r24	; 46
 874:	08 95       	ret

00000876 <TIMER2_ovf_init>:
}

void TIMER2_ovf_init(void)
{
	timer2_count = 0;
 876:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <timer2_count+0x1>
 87a:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <timer2_count>
	TIMSK |= (1 << TOIE2);
 87e:	87 b7       	in	r24, 0x37	; 55
 880:	80 64       	ori	r24, 0x40	; 64
 882:	87 bf       	out	0x37, r24	; 55
	TCNT2 = TCNT2_BASE;
 884:	86 e0       	ldi	r24, 0x06	; 6
 886:	84 bd       	out	0x24, r24	; 36
	TCCR2 |= (1 << CS22) | (1 << CS20); // 1024
 888:	85 b5       	in	r24, 0x25	; 37
 88a:	85 60       	ori	r24, 0x05	; 5
 88c:	85 bd       	out	0x25, r24	; 37
 88e:	08 95       	ret

00000890 <TIMER3_pwm_init>:
}

void TIMER3_pwm_init(void)
{
	DDRE |= (1 << PORTE3);
 890:	82 b1       	in	r24, 0x02	; 2
 892:	88 60       	ori	r24, 0x08	; 8
 894:	82 b9       	out	0x02, r24	; 2

	TCCR3A |= (1 << COM3A1) | (1 << COM3A0);
 896:	eb e8       	ldi	r30, 0x8B	; 139
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	80 6c       	ori	r24, 0xC0	; 192
 89e:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31);	// MODE 6: FAST PWM
 8a0:	80 81       	ld	r24, Z
 8a2:	82 60       	ori	r24, 0x02	; 2
 8a4:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32);
 8a6:	ea e8       	ldi	r30, 0x8A	; 138
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	80 81       	ld	r24, Z
 8ac:	88 60       	ori	r24, 0x08	; 8
 8ae:	80 83       	st	Z, r24
	OCR3AH = OCR3_H;
 8b0:	83 e3       	ldi	r24, 0x33	; 51
 8b2:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	OCR3AL = OCR3_L;
 8b6:	82 e3       	ldi	r24, 0x32	; 50
 8b8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	TCCR3B |= (1 << CS31) | (1 << CS30);
 8bc:	80 81       	ld	r24, Z
 8be:	83 60       	ori	r24, 0x03	; 3
 8c0:	80 83       	st	Z, r24
 8c2:	08 95       	ret

000008c4 <TIMER3_pc_pwm_init>:
}

void TIMER3_pc_pwm_init(void)
{
	DDRE |= (1 << PORTE3);	
 8c4:	82 b1       	in	r24, 0x02	; 2
 8c6:	88 60       	ori	r24, 0x08	; 8
 8c8:	82 b9       	out	0x02, r24	; 2
	TCCR3A |= (1 << COM3A1) | (1 << COM3A0);
 8ca:	eb e8       	ldi	r30, 0x8B	; 139
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	80 6c       	ori	r24, 0xC0	; 192
 8d2:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31);	// MODE 2: PC PWM
 8d4:	80 81       	ld	r24, Z
 8d6:	82 60       	ori	r24, 0x02	; 2
 8d8:	80 83       	st	Z, r24
	OCR3AH = OCR3_H;
 8da:	83 e3       	ldi	r24, 0x33	; 51
 8dc:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	OCR3AL = OCR3_L;
 8e0:	82 e3       	ldi	r24, 0x32	; 50
 8e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	TCCR3B |= (1 << CS31) | (1 << CS30);
 8e6:	ea e8       	ldi	r30, 0x8A	; 138
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 81       	ld	r24, Z
 8ec:	83 60       	ori	r24, 0x03	; 3
 8ee:	80 83       	st	Z, r24
 8f0:	08 95       	ret

000008f2 <TIMER0_clear>:
	TIMER3_clear();
}

void TIMER0_clear(void)
{
	TIMSK &= ~(1 << TOIE0);
 8f2:	87 b7       	in	r24, 0x37	; 55
 8f4:	8e 7f       	andi	r24, 0xFE	; 254
 8f6:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0x00;
 8f8:	13 be       	out	0x33, r1	; 51
 8fa:	08 95       	ret

000008fc <TIMER1_clear>:
}

void TIMER1_clear(void)
{
	TIMSK &= ~(1 << OCIE1A);
 8fc:	87 b7       	in	r24, 0x37	; 55
 8fe:	8f 7e       	andi	r24, 0xEF	; 239
 900:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0x00;
 902:	1e bc       	out	0x2e, r1	; 46
	OCR1A = 0;
 904:	1b bc       	out	0x2b, r1	; 43
 906:	1a bc       	out	0x2a, r1	; 42
 908:	08 95       	ret

0000090a <TIMER2_clear>:
}

void TIMER2_clear(void)
{
	TCCR2 = 0x00;
 90a:	15 bc       	out	0x25, r1	; 37
	TIMSK &= ~(1 << TOIE2);
 90c:	87 b7       	in	r24, 0x37	; 55
 90e:	8f 7b       	andi	r24, 0xBF	; 191
 910:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 0;
 912:	14 bc       	out	0x24, r1	; 36
 914:	08 95       	ret

00000916 <TIMER3_clear>:
}

void TIMER3_clear(void)
{
	DDRE = 0x00;
 916:	12 b8       	out	0x02, r1	; 2
	TCCR3A = 0x00;
 918:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x00;
 91c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 920:	08 95       	ret

00000922 <TIMER_clear_all>:
}

/* CLEAR TIMERS */
void TIMER_clear_all(void)
{
	TIMER0_clear();
 922:	e7 df       	rcall	.-50     	; 0x8f2 <TIMER0_clear>
	TIMER1_clear();
 924:	eb df       	rcall	.-42     	; 0x8fc <TIMER1_clear>
	TIMER2_clear();
 926:	f1 df       	rcall	.-30     	; 0x90a <TIMER2_clear>
 928:	f6 cf       	rjmp	.-20     	; 0x916 <TIMER3_clear>
	TIMER3_clear();
 92a:	08 95       	ret

0000092c <__vector_18>:
 92c:	1f 92       	push	r1
 92e:	0f 92       	push	r0
uint8_t EINT6_ENABLE_FLAG_BIT = 0;
uint8_t EINT7_ENABLE_FLAG_BIT = 0;
uint8_t data = 0;

ISR(USART0_RX_vect)
{
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	0f 92       	push	r0
 934:	11 24       	eor	r1, r1
 936:	8f 93       	push	r24
	cli();
 938:	f8 94       	cli

	UART0_RX_FLAG_BIT = 1;
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <UART0_RX_FLAG_BIT>
	data = UDR0;
 940:	8c b1       	in	r24, 0x0c	; 12
 942:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <data>
	switch(data)
 946:	85 33       	cpi	r24, 0x35	; 53
 948:	69 f0       	breq	.+26     	; 0x964 <__vector_18+0x38>
 94a:	18 f4       	brcc	.+6      	; 0x952 <__vector_18+0x26>
 94c:	84 33       	cpi	r24, 0x34	; 52
 94e:	31 f0       	breq	.+12     	; 0x95c <__vector_18+0x30>
 950:	14 c0       	rjmp	.+40     	; 0x97a <__vector_18+0x4e>
 952:	86 33       	cpi	r24, 0x36	; 54
 954:	59 f0       	breq	.+22     	; 0x96c <__vector_18+0x40>
 956:	87 33       	cpi	r24, 0x37	; 55
 958:	69 f0       	breq	.+26     	; 0x974 <__vector_18+0x48>
 95a:	0f c0       	rjmp	.+30     	; 0x97a <__vector_18+0x4e>
	{
		case '4':
		EINT4_ENABLE_FLAG_BIT = 1;
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <EINT4_ENABLE_FLAG_BIT>
		break;
 962:	0b c0       	rjmp	.+22     	; 0x97a <__vector_18+0x4e>
		case '5':
		EINT5_ENABLE_FLAG_BIT = 1;
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <EINT5_ENABLE_FLAG_BIT>
		break;
 96a:	07 c0       	rjmp	.+14     	; 0x97a <__vector_18+0x4e>
		case '6':
		EINT6_ENABLE_FLAG_BIT = 1;
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <EINT6_ENABLE_FLAG_BIT>
		break;
 972:	03 c0       	rjmp	.+6      	; 0x97a <__vector_18+0x4e>
		case '7':
		EINT7_ENABLE_FLAG_BIT = 1;
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <EINT7_ENABLE_FLAG_BIT>
		break;
		default:
		break;
	}
	
	sei();
 97a:	78 94       	sei
}
 97c:	8f 91       	pop	r24
 97e:	0f 90       	pop	r0
 980:	0f be       	out	0x3f, r0	; 63
 982:	0f 90       	pop	r0
 984:	1f 90       	pop	r1
 986:	18 95       	reti

00000988 <UART0_init>:

void UART0_init()
{
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 988:	8a b1       	in	r24, 0x0a	; 10
 98a:	88 61       	ori	r24, 0x18	; 24
 98c:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1 << RXCIE0);
 98e:	8a b1       	in	r24, 0x0a	; 10
 990:	80 68       	ori	r24, 0x80	; 128
 992:	8a b9       	out	0x0a, r24	; 10
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 994:	e5 e9       	ldi	r30, 0x95	; 149
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	86 60       	ori	r24, 0x06	; 6
 99c:	80 83       	st	Z, r24
	
	UBRR0H = BAUD_RATE_H;
 99e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = BAUD_RATE_L;
 9a2:	87 e6       	ldi	r24, 0x67	; 103
 9a4:	89 b9       	out	0x09, r24	; 9
 9a6:	08 95       	ret

000009a8 <UART0_transmit>:
	UART0_transmit_string(menu_description);
}

void UART0_transmit(char data)
{
	while((UCSR0A & (1 << UDRE0)) == 0x00);
 9a8:	5d 9b       	sbis	0x0b, 5	; 11
 9aa:	fe cf       	rjmp	.-4      	; 0x9a8 <UART0_transmit>
	UDR0 = data;
 9ac:	8c b9       	out	0x0c, r24	; 12
 9ae:	08 95       	ret

000009b0 <UART0_transmit_string>:
}

void UART0_transmit_string(const char* ch)
{
 9b0:	0f 93       	push	r16
 9b2:	1f 93       	push	r17
 9b4:	cf 93       	push	r28
 9b6:	8c 01       	movw	r16, r24
	uint8_t ch_index;
	for(ch_index = 0; ch[ch_index]; ch_index++)
 9b8:	c0 e0       	ldi	r28, 0x00	; 0
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <UART0_transmit_string+0x10>
	{
		UART0_transmit(ch[ch_index]);
 9bc:	f5 df       	rcall	.-22     	; 0x9a8 <UART0_transmit>
}

void UART0_transmit_string(const char* ch)
{
	uint8_t ch_index;
	for(ch_index = 0; ch[ch_index]; ch_index++)
 9be:	cf 5f       	subi	r28, 0xFF	; 255
 9c0:	f8 01       	movw	r30, r16
 9c2:	ec 0f       	add	r30, r28
 9c4:	f1 1d       	adc	r31, r1
 9c6:	80 81       	ld	r24, Z
 9c8:	81 11       	cpse	r24, r1
 9ca:	f8 cf       	rjmp	.-16     	; 0x9bc <UART0_transmit_string+0xc>
	{
		UART0_transmit(ch[ch_index]);
	}
}
 9cc:	cf 91       	pop	r28
 9ce:	1f 91       	pop	r17
 9d0:	0f 91       	pop	r16
 9d2:	08 95       	ret

000009d4 <UART0_display_menu>:
	UBRR0L = BAUD_RATE_L;
}

void UART0_display_menu(void)
{
	UART0_transmit_string(menu_description);
 9d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <menu_description>
 9d8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <menu_description+0x1>
 9dc:	e9 cf       	rjmp	.-46     	; 0x9b0 <UART0_transmit_string>
 9de:	08 95       	ret

000009e0 <UART0_transmit_voltage>:
		UART0_transmit(ch[ch_index]);
	}
}

void UART0_transmit_voltage(int volt)
{
 9e0:	0f 93       	push	r16
 9e2:	1f 93       	push	r17
 9e4:	cf 93       	push	r28
 9e6:	df 93       	push	r29
 9e8:	9c 01       	movw	r18, r24
	int buf;
	buf = volt % 10;
 9ea:	ca e0       	ldi	r28, 0x0A	; 10
 9ec:	d0 e0       	ldi	r29, 0x00	; 0
 9ee:	be 01       	movw	r22, r28
 9f0:	a4 d1       	rcall	.+840    	; 0xd3a <__divmodhi4>
 9f2:	8c 01       	movw	r16, r24
	UART0_transmit(volt / 100 + NUMBER_OFFSET);
 9f4:	c9 01       	movw	r24, r18
 9f6:	64 e6       	ldi	r22, 0x64	; 100
 9f8:	70 e0       	ldi	r23, 0x00	; 0
 9fa:	9f d1       	rcall	.+830    	; 0xd3a <__divmodhi4>
 9fc:	80 e3       	ldi	r24, 0x30	; 48
 9fe:	86 0f       	add	r24, r22
 a00:	d3 df       	rcall	.-90     	; 0x9a8 <UART0_transmit>
	UART0_transmit('.');
 a02:	8e e2       	ldi	r24, 0x2E	; 46
 a04:	d1 df       	rcall	.-94     	; 0x9a8 <UART0_transmit>
	UART0_transmit(buf / 10 + NUMBER_OFFSET);
 a06:	c8 01       	movw	r24, r16
 a08:	be 01       	movw	r22, r28
 a0a:	97 d1       	rcall	.+814    	; 0xd3a <__divmodhi4>
 a0c:	c8 2f       	mov	r28, r24
 a0e:	80 e3       	ldi	r24, 0x30	; 48
 a10:	86 0f       	add	r24, r22
 a12:	ca df       	rcall	.-108    	; 0x9a8 <UART0_transmit>
	UART0_transmit(buf % 10 + NUMBER_OFFSET);
 a14:	80 e3       	ldi	r24, 0x30	; 48
 a16:	8c 0f       	add	r24, r28
 a18:	c7 df       	rcall	.-114    	; 0x9a8 <UART0_transmit>
	UART0_transmit('V');
 a1a:	86 e5       	ldi	r24, 0x56	; 86
 a1c:	c5 df       	rcall	.-118    	; 0x9a8 <UART0_transmit>
 a1e:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_transmit('\r');
 a20:	c3 df       	rcall	.-122    	; 0x9a8 <UART0_transmit>
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
}
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	08 95       	ret

00000a2c <__subsf3>:
 a2c:	50 58       	subi	r21, 0x80	; 128

00000a2e <__addsf3>:
 a2e:	bb 27       	eor	r27, r27
 a30:	aa 27       	eor	r26, r26
 a32:	0e d0       	rcall	.+28     	; 0xa50 <__addsf3x>
 a34:	e5 c0       	rjmp	.+458    	; 0xc00 <__fp_round>
 a36:	d6 d0       	rcall	.+428    	; 0xbe4 <__fp_pscA>
 a38:	30 f0       	brcs	.+12     	; 0xa46 <__addsf3+0x18>
 a3a:	db d0       	rcall	.+438    	; 0xbf2 <__fp_pscB>
 a3c:	20 f0       	brcs	.+8      	; 0xa46 <__addsf3+0x18>
 a3e:	31 f4       	brne	.+12     	; 0xa4c <__addsf3+0x1e>
 a40:	9f 3f       	cpi	r25, 0xFF	; 255
 a42:	11 f4       	brne	.+4      	; 0xa48 <__addsf3+0x1a>
 a44:	1e f4       	brtc	.+6      	; 0xa4c <__addsf3+0x1e>
 a46:	cb c0       	rjmp	.+406    	; 0xbde <__fp_nan>
 a48:	0e f4       	brtc	.+2      	; 0xa4c <__addsf3+0x1e>
 a4a:	e0 95       	com	r30
 a4c:	e7 fb       	bst	r30, 7
 a4e:	c1 c0       	rjmp	.+386    	; 0xbd2 <__fp_inf>

00000a50 <__addsf3x>:
 a50:	e9 2f       	mov	r30, r25
 a52:	e7 d0       	rcall	.+462    	; 0xc22 <__fp_split3>
 a54:	80 f3       	brcs	.-32     	; 0xa36 <__addsf3+0x8>
 a56:	ba 17       	cp	r27, r26
 a58:	62 07       	cpc	r22, r18
 a5a:	73 07       	cpc	r23, r19
 a5c:	84 07       	cpc	r24, r20
 a5e:	95 07       	cpc	r25, r21
 a60:	18 f0       	brcs	.+6      	; 0xa68 <__addsf3x+0x18>
 a62:	71 f4       	brne	.+28     	; 0xa80 <__addsf3x+0x30>
 a64:	9e f5       	brtc	.+102    	; 0xacc <__addsf3x+0x7c>
 a66:	ff c0       	rjmp	.+510    	; 0xc66 <__fp_zero>
 a68:	0e f4       	brtc	.+2      	; 0xa6c <__addsf3x+0x1c>
 a6a:	e0 95       	com	r30
 a6c:	0b 2e       	mov	r0, r27
 a6e:	ba 2f       	mov	r27, r26
 a70:	a0 2d       	mov	r26, r0
 a72:	0b 01       	movw	r0, r22
 a74:	b9 01       	movw	r22, r18
 a76:	90 01       	movw	r18, r0
 a78:	0c 01       	movw	r0, r24
 a7a:	ca 01       	movw	r24, r20
 a7c:	a0 01       	movw	r20, r0
 a7e:	11 24       	eor	r1, r1
 a80:	ff 27       	eor	r31, r31
 a82:	59 1b       	sub	r21, r25
 a84:	99 f0       	breq	.+38     	; 0xaac <__addsf3x+0x5c>
 a86:	59 3f       	cpi	r21, 0xF9	; 249
 a88:	50 f4       	brcc	.+20     	; 0xa9e <__addsf3x+0x4e>
 a8a:	50 3e       	cpi	r21, 0xE0	; 224
 a8c:	68 f1       	brcs	.+90     	; 0xae8 <__addsf3x+0x98>
 a8e:	1a 16       	cp	r1, r26
 a90:	f0 40       	sbci	r31, 0x00	; 0
 a92:	a2 2f       	mov	r26, r18
 a94:	23 2f       	mov	r18, r19
 a96:	34 2f       	mov	r19, r20
 a98:	44 27       	eor	r20, r20
 a9a:	58 5f       	subi	r21, 0xF8	; 248
 a9c:	f3 cf       	rjmp	.-26     	; 0xa84 <__addsf3x+0x34>
 a9e:	46 95       	lsr	r20
 aa0:	37 95       	ror	r19
 aa2:	27 95       	ror	r18
 aa4:	a7 95       	ror	r26
 aa6:	f0 40       	sbci	r31, 0x00	; 0
 aa8:	53 95       	inc	r21
 aaa:	c9 f7       	brne	.-14     	; 0xa9e <__addsf3x+0x4e>
 aac:	7e f4       	brtc	.+30     	; 0xacc <__addsf3x+0x7c>
 aae:	1f 16       	cp	r1, r31
 ab0:	ba 0b       	sbc	r27, r26
 ab2:	62 0b       	sbc	r22, r18
 ab4:	73 0b       	sbc	r23, r19
 ab6:	84 0b       	sbc	r24, r20
 ab8:	ba f0       	brmi	.+46     	; 0xae8 <__addsf3x+0x98>
 aba:	91 50       	subi	r25, 0x01	; 1
 abc:	a1 f0       	breq	.+40     	; 0xae6 <__addsf3x+0x96>
 abe:	ff 0f       	add	r31, r31
 ac0:	bb 1f       	adc	r27, r27
 ac2:	66 1f       	adc	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	c2 f7       	brpl	.-16     	; 0xaba <__addsf3x+0x6a>
 aca:	0e c0       	rjmp	.+28     	; 0xae8 <__addsf3x+0x98>
 acc:	ba 0f       	add	r27, r26
 ace:	62 1f       	adc	r22, r18
 ad0:	73 1f       	adc	r23, r19
 ad2:	84 1f       	adc	r24, r20
 ad4:	48 f4       	brcc	.+18     	; 0xae8 <__addsf3x+0x98>
 ad6:	87 95       	ror	r24
 ad8:	77 95       	ror	r23
 ada:	67 95       	ror	r22
 adc:	b7 95       	ror	r27
 ade:	f7 95       	ror	r31
 ae0:	9e 3f       	cpi	r25, 0xFE	; 254
 ae2:	08 f0       	brcs	.+2      	; 0xae6 <__addsf3x+0x96>
 ae4:	b3 cf       	rjmp	.-154    	; 0xa4c <__addsf3+0x1e>
 ae6:	93 95       	inc	r25
 ae8:	88 0f       	add	r24, r24
 aea:	08 f0       	brcs	.+2      	; 0xaee <__addsf3x+0x9e>
 aec:	99 27       	eor	r25, r25
 aee:	ee 0f       	add	r30, r30
 af0:	97 95       	ror	r25
 af2:	87 95       	ror	r24
 af4:	08 95       	ret

00000af6 <__fixsfsi>:
 af6:	04 d0       	rcall	.+8      	; 0xb00 <__fixunssfsi>
 af8:	68 94       	set
 afa:	b1 11       	cpse	r27, r1
 afc:	b5 c0       	rjmp	.+362    	; 0xc68 <__fp_szero>
 afe:	08 95       	ret

00000b00 <__fixunssfsi>:
 b00:	98 d0       	rcall	.+304    	; 0xc32 <__fp_splitA>
 b02:	88 f0       	brcs	.+34     	; 0xb26 <__fixunssfsi+0x26>
 b04:	9f 57       	subi	r25, 0x7F	; 127
 b06:	90 f0       	brcs	.+36     	; 0xb2c <__fixunssfsi+0x2c>
 b08:	b9 2f       	mov	r27, r25
 b0a:	99 27       	eor	r25, r25
 b0c:	b7 51       	subi	r27, 0x17	; 23
 b0e:	a0 f0       	brcs	.+40     	; 0xb38 <__fixunssfsi+0x38>
 b10:	d1 f0       	breq	.+52     	; 0xb46 <__fixunssfsi+0x46>
 b12:	66 0f       	add	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	1a f0       	brmi	.+6      	; 0xb22 <__fixunssfsi+0x22>
 b1c:	ba 95       	dec	r27
 b1e:	c9 f7       	brne	.-14     	; 0xb12 <__fixunssfsi+0x12>
 b20:	12 c0       	rjmp	.+36     	; 0xb46 <__fixunssfsi+0x46>
 b22:	b1 30       	cpi	r27, 0x01	; 1
 b24:	81 f0       	breq	.+32     	; 0xb46 <__fixunssfsi+0x46>
 b26:	9f d0       	rcall	.+318    	; 0xc66 <__fp_zero>
 b28:	b1 e0       	ldi	r27, 0x01	; 1
 b2a:	08 95       	ret
 b2c:	9c c0       	rjmp	.+312    	; 0xc66 <__fp_zero>
 b2e:	67 2f       	mov	r22, r23
 b30:	78 2f       	mov	r23, r24
 b32:	88 27       	eor	r24, r24
 b34:	b8 5f       	subi	r27, 0xF8	; 248
 b36:	39 f0       	breq	.+14     	; 0xb46 <__fixunssfsi+0x46>
 b38:	b9 3f       	cpi	r27, 0xF9	; 249
 b3a:	cc f3       	brlt	.-14     	; 0xb2e <__fixunssfsi+0x2e>
 b3c:	86 95       	lsr	r24
 b3e:	77 95       	ror	r23
 b40:	67 95       	ror	r22
 b42:	b3 95       	inc	r27
 b44:	d9 f7       	brne	.-10     	; 0xb3c <__fixunssfsi+0x3c>
 b46:	3e f4       	brtc	.+14     	; 0xb56 <__fixunssfsi+0x56>
 b48:	90 95       	com	r25
 b4a:	80 95       	com	r24
 b4c:	70 95       	com	r23
 b4e:	61 95       	neg	r22
 b50:	7f 4f       	sbci	r23, 0xFF	; 255
 b52:	8f 4f       	sbci	r24, 0xFF	; 255
 b54:	9f 4f       	sbci	r25, 0xFF	; 255
 b56:	08 95       	ret

00000b58 <__floatunsisf>:
 b58:	e8 94       	clt
 b5a:	09 c0       	rjmp	.+18     	; 0xb6e <__floatsisf+0x12>

00000b5c <__floatsisf>:
 b5c:	97 fb       	bst	r25, 7
 b5e:	3e f4       	brtc	.+14     	; 0xb6e <__floatsisf+0x12>
 b60:	90 95       	com	r25
 b62:	80 95       	com	r24
 b64:	70 95       	com	r23
 b66:	61 95       	neg	r22
 b68:	7f 4f       	sbci	r23, 0xFF	; 255
 b6a:	8f 4f       	sbci	r24, 0xFF	; 255
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	99 23       	and	r25, r25
 b70:	a9 f0       	breq	.+42     	; 0xb9c <__floatsisf+0x40>
 b72:	f9 2f       	mov	r31, r25
 b74:	96 e9       	ldi	r25, 0x96	; 150
 b76:	bb 27       	eor	r27, r27
 b78:	93 95       	inc	r25
 b7a:	f6 95       	lsr	r31
 b7c:	87 95       	ror	r24
 b7e:	77 95       	ror	r23
 b80:	67 95       	ror	r22
 b82:	b7 95       	ror	r27
 b84:	f1 11       	cpse	r31, r1
 b86:	f8 cf       	rjmp	.-16     	; 0xb78 <__floatsisf+0x1c>
 b88:	fa f4       	brpl	.+62     	; 0xbc8 <__floatsisf+0x6c>
 b8a:	bb 0f       	add	r27, r27
 b8c:	11 f4       	brne	.+4      	; 0xb92 <__floatsisf+0x36>
 b8e:	60 ff       	sbrs	r22, 0
 b90:	1b c0       	rjmp	.+54     	; 0xbc8 <__floatsisf+0x6c>
 b92:	6f 5f       	subi	r22, 0xFF	; 255
 b94:	7f 4f       	sbci	r23, 0xFF	; 255
 b96:	8f 4f       	sbci	r24, 0xFF	; 255
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	16 c0       	rjmp	.+44     	; 0xbc8 <__floatsisf+0x6c>
 b9c:	88 23       	and	r24, r24
 b9e:	11 f0       	breq	.+4      	; 0xba4 <__floatsisf+0x48>
 ba0:	96 e9       	ldi	r25, 0x96	; 150
 ba2:	11 c0       	rjmp	.+34     	; 0xbc6 <__floatsisf+0x6a>
 ba4:	77 23       	and	r23, r23
 ba6:	21 f0       	breq	.+8      	; 0xbb0 <__floatsisf+0x54>
 ba8:	9e e8       	ldi	r25, 0x8E	; 142
 baa:	87 2f       	mov	r24, r23
 bac:	76 2f       	mov	r23, r22
 bae:	05 c0       	rjmp	.+10     	; 0xbba <__floatsisf+0x5e>
 bb0:	66 23       	and	r22, r22
 bb2:	71 f0       	breq	.+28     	; 0xbd0 <__floatsisf+0x74>
 bb4:	96 e8       	ldi	r25, 0x86	; 134
 bb6:	86 2f       	mov	r24, r22
 bb8:	70 e0       	ldi	r23, 0x00	; 0
 bba:	60 e0       	ldi	r22, 0x00	; 0
 bbc:	2a f0       	brmi	.+10     	; 0xbc8 <__floatsisf+0x6c>
 bbe:	9a 95       	dec	r25
 bc0:	66 0f       	add	r22, r22
 bc2:	77 1f       	adc	r23, r23
 bc4:	88 1f       	adc	r24, r24
 bc6:	da f7       	brpl	.-10     	; 0xbbe <__floatsisf+0x62>
 bc8:	88 0f       	add	r24, r24
 bca:	96 95       	lsr	r25
 bcc:	87 95       	ror	r24
 bce:	97 f9       	bld	r25, 7
 bd0:	08 95       	ret

00000bd2 <__fp_inf>:
 bd2:	97 f9       	bld	r25, 7
 bd4:	9f 67       	ori	r25, 0x7F	; 127
 bd6:	80 e8       	ldi	r24, 0x80	; 128
 bd8:	70 e0       	ldi	r23, 0x00	; 0
 bda:	60 e0       	ldi	r22, 0x00	; 0
 bdc:	08 95       	ret

00000bde <__fp_nan>:
 bde:	9f ef       	ldi	r25, 0xFF	; 255
 be0:	80 ec       	ldi	r24, 0xC0	; 192
 be2:	08 95       	ret

00000be4 <__fp_pscA>:
 be4:	00 24       	eor	r0, r0
 be6:	0a 94       	dec	r0
 be8:	16 16       	cp	r1, r22
 bea:	17 06       	cpc	r1, r23
 bec:	18 06       	cpc	r1, r24
 bee:	09 06       	cpc	r0, r25
 bf0:	08 95       	ret

00000bf2 <__fp_pscB>:
 bf2:	00 24       	eor	r0, r0
 bf4:	0a 94       	dec	r0
 bf6:	12 16       	cp	r1, r18
 bf8:	13 06       	cpc	r1, r19
 bfa:	14 06       	cpc	r1, r20
 bfc:	05 06       	cpc	r0, r21
 bfe:	08 95       	ret

00000c00 <__fp_round>:
 c00:	09 2e       	mov	r0, r25
 c02:	03 94       	inc	r0
 c04:	00 0c       	add	r0, r0
 c06:	11 f4       	brne	.+4      	; 0xc0c <__fp_round+0xc>
 c08:	88 23       	and	r24, r24
 c0a:	52 f0       	brmi	.+20     	; 0xc20 <__fp_round+0x20>
 c0c:	bb 0f       	add	r27, r27
 c0e:	40 f4       	brcc	.+16     	; 0xc20 <__fp_round+0x20>
 c10:	bf 2b       	or	r27, r31
 c12:	11 f4       	brne	.+4      	; 0xc18 <__fp_round+0x18>
 c14:	60 ff       	sbrs	r22, 0
 c16:	04 c0       	rjmp	.+8      	; 0xc20 <__fp_round+0x20>
 c18:	6f 5f       	subi	r22, 0xFF	; 255
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	08 95       	ret

00000c22 <__fp_split3>:
 c22:	57 fd       	sbrc	r21, 7
 c24:	90 58       	subi	r25, 0x80	; 128
 c26:	44 0f       	add	r20, r20
 c28:	55 1f       	adc	r21, r21
 c2a:	59 f0       	breq	.+22     	; 0xc42 <__fp_splitA+0x10>
 c2c:	5f 3f       	cpi	r21, 0xFF	; 255
 c2e:	71 f0       	breq	.+28     	; 0xc4c <__fp_splitA+0x1a>
 c30:	47 95       	ror	r20

00000c32 <__fp_splitA>:
 c32:	88 0f       	add	r24, r24
 c34:	97 fb       	bst	r25, 7
 c36:	99 1f       	adc	r25, r25
 c38:	61 f0       	breq	.+24     	; 0xc52 <__fp_splitA+0x20>
 c3a:	9f 3f       	cpi	r25, 0xFF	; 255
 c3c:	79 f0       	breq	.+30     	; 0xc5c <__fp_splitA+0x2a>
 c3e:	87 95       	ror	r24
 c40:	08 95       	ret
 c42:	12 16       	cp	r1, r18
 c44:	13 06       	cpc	r1, r19
 c46:	14 06       	cpc	r1, r20
 c48:	55 1f       	adc	r21, r21
 c4a:	f2 cf       	rjmp	.-28     	; 0xc30 <__fp_split3+0xe>
 c4c:	46 95       	lsr	r20
 c4e:	f1 df       	rcall	.-30     	; 0xc32 <__fp_splitA>
 c50:	08 c0       	rjmp	.+16     	; 0xc62 <__fp_splitA+0x30>
 c52:	16 16       	cp	r1, r22
 c54:	17 06       	cpc	r1, r23
 c56:	18 06       	cpc	r1, r24
 c58:	99 1f       	adc	r25, r25
 c5a:	f1 cf       	rjmp	.-30     	; 0xc3e <__fp_splitA+0xc>
 c5c:	86 95       	lsr	r24
 c5e:	71 05       	cpc	r23, r1
 c60:	61 05       	cpc	r22, r1
 c62:	08 94       	sec
 c64:	08 95       	ret

00000c66 <__fp_zero>:
 c66:	e8 94       	clt

00000c68 <__fp_szero>:
 c68:	bb 27       	eor	r27, r27
 c6a:	66 27       	eor	r22, r22
 c6c:	77 27       	eor	r23, r23
 c6e:	cb 01       	movw	r24, r22
 c70:	97 f9       	bld	r25, 7
 c72:	08 95       	ret

00000c74 <__mulsf3>:
 c74:	0b d0       	rcall	.+22     	; 0xc8c <__mulsf3x>
 c76:	c4 cf       	rjmp	.-120    	; 0xc00 <__fp_round>
 c78:	b5 df       	rcall	.-150    	; 0xbe4 <__fp_pscA>
 c7a:	28 f0       	brcs	.+10     	; 0xc86 <__mulsf3+0x12>
 c7c:	ba df       	rcall	.-140    	; 0xbf2 <__fp_pscB>
 c7e:	18 f0       	brcs	.+6      	; 0xc86 <__mulsf3+0x12>
 c80:	95 23       	and	r25, r21
 c82:	09 f0       	breq	.+2      	; 0xc86 <__mulsf3+0x12>
 c84:	a6 cf       	rjmp	.-180    	; 0xbd2 <__fp_inf>
 c86:	ab cf       	rjmp	.-170    	; 0xbde <__fp_nan>
 c88:	11 24       	eor	r1, r1
 c8a:	ee cf       	rjmp	.-36     	; 0xc68 <__fp_szero>

00000c8c <__mulsf3x>:
 c8c:	ca df       	rcall	.-108    	; 0xc22 <__fp_split3>
 c8e:	a0 f3       	brcs	.-24     	; 0xc78 <__mulsf3+0x4>

00000c90 <__mulsf3_pse>:
 c90:	95 9f       	mul	r25, r21
 c92:	d1 f3       	breq	.-12     	; 0xc88 <__mulsf3+0x14>
 c94:	95 0f       	add	r25, r21
 c96:	50 e0       	ldi	r21, 0x00	; 0
 c98:	55 1f       	adc	r21, r21
 c9a:	62 9f       	mul	r22, r18
 c9c:	f0 01       	movw	r30, r0
 c9e:	72 9f       	mul	r23, r18
 ca0:	bb 27       	eor	r27, r27
 ca2:	f0 0d       	add	r31, r0
 ca4:	b1 1d       	adc	r27, r1
 ca6:	63 9f       	mul	r22, r19
 ca8:	aa 27       	eor	r26, r26
 caa:	f0 0d       	add	r31, r0
 cac:	b1 1d       	adc	r27, r1
 cae:	aa 1f       	adc	r26, r26
 cb0:	64 9f       	mul	r22, r20
 cb2:	66 27       	eor	r22, r22
 cb4:	b0 0d       	add	r27, r0
 cb6:	a1 1d       	adc	r26, r1
 cb8:	66 1f       	adc	r22, r22
 cba:	82 9f       	mul	r24, r18
 cbc:	22 27       	eor	r18, r18
 cbe:	b0 0d       	add	r27, r0
 cc0:	a1 1d       	adc	r26, r1
 cc2:	62 1f       	adc	r22, r18
 cc4:	73 9f       	mul	r23, r19
 cc6:	b0 0d       	add	r27, r0
 cc8:	a1 1d       	adc	r26, r1
 cca:	62 1f       	adc	r22, r18
 ccc:	83 9f       	mul	r24, r19
 cce:	a0 0d       	add	r26, r0
 cd0:	61 1d       	adc	r22, r1
 cd2:	22 1f       	adc	r18, r18
 cd4:	74 9f       	mul	r23, r20
 cd6:	33 27       	eor	r19, r19
 cd8:	a0 0d       	add	r26, r0
 cda:	61 1d       	adc	r22, r1
 cdc:	23 1f       	adc	r18, r19
 cde:	84 9f       	mul	r24, r20
 ce0:	60 0d       	add	r22, r0
 ce2:	21 1d       	adc	r18, r1
 ce4:	82 2f       	mov	r24, r18
 ce6:	76 2f       	mov	r23, r22
 ce8:	6a 2f       	mov	r22, r26
 cea:	11 24       	eor	r1, r1
 cec:	9f 57       	subi	r25, 0x7F	; 127
 cee:	50 40       	sbci	r21, 0x00	; 0
 cf0:	8a f0       	brmi	.+34     	; 0xd14 <__mulsf3_pse+0x84>
 cf2:	e1 f0       	breq	.+56     	; 0xd2c <__mulsf3_pse+0x9c>
 cf4:	88 23       	and	r24, r24
 cf6:	4a f0       	brmi	.+18     	; 0xd0a <__mulsf3_pse+0x7a>
 cf8:	ee 0f       	add	r30, r30
 cfa:	ff 1f       	adc	r31, r31
 cfc:	bb 1f       	adc	r27, r27
 cfe:	66 1f       	adc	r22, r22
 d00:	77 1f       	adc	r23, r23
 d02:	88 1f       	adc	r24, r24
 d04:	91 50       	subi	r25, 0x01	; 1
 d06:	50 40       	sbci	r21, 0x00	; 0
 d08:	a9 f7       	brne	.-22     	; 0xcf4 <__mulsf3_pse+0x64>
 d0a:	9e 3f       	cpi	r25, 0xFE	; 254
 d0c:	51 05       	cpc	r21, r1
 d0e:	70 f0       	brcs	.+28     	; 0xd2c <__mulsf3_pse+0x9c>
 d10:	60 cf       	rjmp	.-320    	; 0xbd2 <__fp_inf>
 d12:	aa cf       	rjmp	.-172    	; 0xc68 <__fp_szero>
 d14:	5f 3f       	cpi	r21, 0xFF	; 255
 d16:	ec f3       	brlt	.-6      	; 0xd12 <__mulsf3_pse+0x82>
 d18:	98 3e       	cpi	r25, 0xE8	; 232
 d1a:	dc f3       	brlt	.-10     	; 0xd12 <__mulsf3_pse+0x82>
 d1c:	86 95       	lsr	r24
 d1e:	77 95       	ror	r23
 d20:	67 95       	ror	r22
 d22:	b7 95       	ror	r27
 d24:	f7 95       	ror	r31
 d26:	e7 95       	ror	r30
 d28:	9f 5f       	subi	r25, 0xFF	; 255
 d2a:	c1 f7       	brne	.-16     	; 0xd1c <__mulsf3_pse+0x8c>
 d2c:	fe 2b       	or	r31, r30
 d2e:	88 0f       	add	r24, r24
 d30:	91 1d       	adc	r25, r1
 d32:	96 95       	lsr	r25
 d34:	87 95       	ror	r24
 d36:	97 f9       	bld	r25, 7
 d38:	08 95       	ret

00000d3a <__divmodhi4>:
 d3a:	97 fb       	bst	r25, 7
 d3c:	07 2e       	mov	r0, r23
 d3e:	16 f4       	brtc	.+4      	; 0xd44 <__divmodhi4+0xa>
 d40:	00 94       	com	r0
 d42:	06 d0       	rcall	.+12     	; 0xd50 <__divmodhi4_neg1>
 d44:	77 fd       	sbrc	r23, 7
 d46:	08 d0       	rcall	.+16     	; 0xd58 <__divmodhi4_neg2>
 d48:	0b d0       	rcall	.+22     	; 0xd60 <__udivmodhi4>
 d4a:	07 fc       	sbrc	r0, 7
 d4c:	05 d0       	rcall	.+10     	; 0xd58 <__divmodhi4_neg2>
 d4e:	3e f4       	brtc	.+14     	; 0xd5e <__divmodhi4_exit>

00000d50 <__divmodhi4_neg1>:
 d50:	90 95       	com	r25
 d52:	81 95       	neg	r24
 d54:	9f 4f       	sbci	r25, 0xFF	; 255
 d56:	08 95       	ret

00000d58 <__divmodhi4_neg2>:
 d58:	70 95       	com	r23
 d5a:	61 95       	neg	r22
 d5c:	7f 4f       	sbci	r23, 0xFF	; 255

00000d5e <__divmodhi4_exit>:
 d5e:	08 95       	ret

00000d60 <__udivmodhi4>:
 d60:	aa 1b       	sub	r26, r26
 d62:	bb 1b       	sub	r27, r27
 d64:	51 e1       	ldi	r21, 0x11	; 17
 d66:	07 c0       	rjmp	.+14     	; 0xd76 <__udivmodhi4_ep>

00000d68 <__udivmodhi4_loop>:
 d68:	aa 1f       	adc	r26, r26
 d6a:	bb 1f       	adc	r27, r27
 d6c:	a6 17       	cp	r26, r22
 d6e:	b7 07       	cpc	r27, r23
 d70:	10 f0       	brcs	.+4      	; 0xd76 <__udivmodhi4_ep>
 d72:	a6 1b       	sub	r26, r22
 d74:	b7 0b       	sbc	r27, r23

00000d76 <__udivmodhi4_ep>:
 d76:	88 1f       	adc	r24, r24
 d78:	99 1f       	adc	r25, r25
 d7a:	5a 95       	dec	r21
 d7c:	a9 f7       	brne	.-22     	; 0xd68 <__udivmodhi4_loop>
 d7e:	80 95       	com	r24
 d80:	90 95       	com	r25
 d82:	bc 01       	movw	r22, r24
 d84:	cd 01       	movw	r24, r26
 d86:	08 95       	ret

00000d88 <_exit>:
 d88:	f8 94       	cli

00000d8a <__stop_program>:
 d8a:	ff cf       	rjmp	.-2      	; 0xd8a <__stop_program>
