
dac_practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800126  00800126  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a42  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000407  00000000  00000000  00001639  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c6  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019b  00000000  00000000  00001f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002135  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	73 c0       	rjmp	.+230    	; 0xfc <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 32       	cpi	r26, 0x2A	; 42
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	41 d0       	rcall	.+130    	; 0x146 <main>
  c4:	a9 c0       	rjmp	.+338    	; 0x218 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
uint8_t clk_timer_counter = 0;
uint8_t clk_status = 0;

// 10us
ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	cli();
  d4:	f8 94       	cli
	clk_timer_counter++;
  d6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <clk_timer_counter>
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <clk_timer_counter>
	if(clk_timer_counter >= 6) {
  e0:	86 30       	cpi	r24, 0x06	; 6
  e2:	28 f0       	brcs	.+10     	; 0xee <__vector_16+0x26>
		clk_timer_counter = 0;
  e4:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <clk_timer_counter>
		TIMER0_FOR_CLK = 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <TIMER0_FOR_CLK>
	}
	
	sei();
  ee:	78 94       	sei
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_5>:

ISR(INT4_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
	cli();
 108:	f8 94       	cli
	EINT4_FLAG_BIT = 1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <EINT4_FLAG_BIT>
	sei();
 110:	78 94       	sei
}
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <TIMER0_init>:

void TIMER0_init(void)
{
	TIMSK |= (1 << TOIE0);
 11e:	87 b7       	in	r24, 0x37	; 55
 120:	81 60       	ori	r24, 0x01	; 1
 122:	87 bf       	out	0x37, r24	; 55
	TCNT0 = TCNT0_BASE;
 124:	8c ee       	ldi	r24, 0xEC	; 236
 126:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= (1 << CS01);
 128:	83 b7       	in	r24, 0x33	; 51
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	83 bf       	out	0x33, r24	; 51
 12e:	08 95       	ret

00000130 <TIMER0_clear>:
}

void TIMER0_clear(void)
{
	TCCR0 &= ~(1 << CS01);
 130:	83 b7       	in	r24, 0x33	; 51
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	83 bf       	out	0x33, r24	; 51
 136:	08 95       	ret

00000138 <EINT4_init>:
}

void EINT4_init(void)
{
	EIMSK |= (1 << INT4);
 138:	89 b7       	in	r24, 0x39	; 57
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1 << ISC41);
 13e:	8a b7       	in	r24, 0x3a	; 58
 140:	82 60       	ori	r24, 0x02	; 2
 142:	8a bf       	out	0x3a, r24	; 58
 144:	08 95       	ret

00000146 <main>:
{
	uint8_t table_index = 0;
	uint8_t data_index = 0;
	uint8_t data_status = 0;
	
	DDRD |= 0x07;	// PORTD0, PORTD1, PORTD2
 146:	81 b3       	in	r24, 0x11	; 17
 148:	87 60       	ori	r24, 0x07	; 7
 14a:	81 bb       	out	0x11, r24	; 17
	LD_LOW;
 14c:	82 b3       	in	r24, 0x12	; 18
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	82 bb       	out	0x12, r24	; 18
	
	EINT4_init();
 152:	f2 df       	rcall	.-28     	; 0x138 <EINT4_init>
	
	sei();
 154:	78 94       	sei

int main(void)
{
	uint8_t table_index = 0;
	uint8_t data_index = 0;
	uint8_t data_status = 0;
 156:	c0 e0       	ldi	r28, 0x00	; 0
}

int main(void)
{
	uint8_t table_index = 0;
	uint8_t data_index = 0;
 158:	d0 e0       	ldi	r29, 0x00	; 0
	EICRB |= (1 << ISC41);
}

int main(void)
{
	uint8_t table_index = 0;
 15a:	10 e0       	ldi	r17, 0x00	; 0
	
	sei();
	
    while (1) 
    {
		if(EINT4_FLAG_BIT == 1)
 15c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <EINT4_FLAG_BIT>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	29 f4       	brne	.+10     	; 0x16e <main+0x28>
		{
			EINT4_FLAG_BIT = 0;
 164:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <EINT4_FLAG_BIT>
			table_index++;
			data_index = 0;
			TIMER0_init();
 168:	1f 5f       	subi	r17, 0xFF	; 255
 16a:	d9 df       	rcall	.-78     	; 0x11e <TIMER0_init>
    {
		if(EINT4_FLAG_BIT == 1)
		{
			EINT4_FLAG_BIT = 0;
			table_index++;
			data_index = 0;
 16c:	d0 e0       	ldi	r29, 0x00	; 0
			TIMER0_init();
		}
		
		if(TIMER0_FOR_CLK == 1)
 16e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <TIMER0_FOR_CLK>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	99 f5       	brne	.+102    	; 0x1dc <main+0x96>
		{
			TIMER0_FOR_CLK = 0;
 176:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <TIMER0_FOR_CLK>
			if(clk_status == 1)
 17a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	29 f5       	brne	.+74     	; 0x1cc <main+0x86>
			{
				CLK_LOW;
 182:	82 b3       	in	r24, 0x12	; 18
 184:	8e 7f       	andi	r24, 0xFE	; 254
 186:	82 bb       	out	0x12, r24	; 18
				clk_status = 0;
 188:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
				if(data_index == 10)
 18c:	da 30       	cpi	r29, 0x0A	; 10
 18e:	29 f4       	brne	.+10     	; 0x19a <main+0x54>
				{
					data_status = 1;
					DATA_LOW;
 190:	82 b3       	in	r24, 0x12	; 18
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	82 bb       	out	0x12, r24	; 18
			{
				CLK_LOW;
				clk_status = 0;
				if(data_index == 10)
				{
					data_status = 1;
 196:	c1 e0       	ldi	r28, 0x01	; 1
 198:	21 c0       	rjmp	.+66     	; 0x1dc <main+0x96>
					DATA_LOW;
				}
				else
				{
					// DATA SET
					if(((DAC_TABLE[table_index] << data_index) & 0x200) == 0x200)
 19a:	e1 2f       	mov	r30, r17
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	e0 50       	subi	r30, 0x00	; 0
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	91 81       	ldd	r25, Z+1	; 0x01
 1aa:	0d 2e       	mov	r0, r29
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <main+0x6c>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	0a 94       	dec	r0
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <main+0x68>
 1b6:	91 ff       	sbrs	r25, 1
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <main+0x7c>
					{
						DATA_HIGH;
 1ba:	82 b3       	in	r24, 0x12	; 18
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	82 bb       	out	0x12, r24	; 18
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <main+0x82>
					}
					else
					{
						DATA_LOW;
 1c2:	82 b3       	in	r24, 0x12	; 18
 1c4:	8d 7f       	andi	r24, 0xFD	; 253
 1c6:	82 bb       	out	0x12, r24	; 18
					}
					
					data_index++;
 1c8:	df 5f       	subi	r29, 0xFF	; 255
 1ca:	08 c0       	rjmp	.+16     	; 0x1dc <main+0x96>
				}
			}
			else if(clk_status == 0)
 1cc:	81 11       	cpse	r24, r1
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <main+0x96>
			{
				CLK_HIGH;
 1d0:	82 b3       	in	r24, 0x12	; 18
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	82 bb       	out	0x12, r24	; 18
				clk_status = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
			}
		}
		
		if(data_status == 1)
 1dc:	c1 30       	cpi	r28, 0x01	; 1
 1de:	09 f0       	breq	.+2      	; 0x1e2 <main+0x9c>
		{
			data_status = 0;
			TIMER0_clear();
 1e0:	bd cf       	rjmp	.-134    	; 0x15c <main+0x16>
 1e2:	a6 df       	rcall	.-180    	; 0x130 <TIMER0_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	87 ec       	ldi	r24, 0xC7	; 199
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0xa2>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0xa8>
 1ee:	00 00       	nop
			_delay_us(50);
			LD_HIGH;
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	84 60       	ori	r24, 0x04	; 4
 1f4:	82 bb       	out	0x12, r24	; 18
 1f6:	87 ec       	ldi	r24, 0xC7	; 199
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0xb4>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0xba>
 200:	00 00       	nop
			_delay_us(50);
			LD_LOW;
 202:	82 b3       	in	r24, 0x12	; 18
 204:	8b 7f       	andi	r24, 0xFB	; 251
 206:	82 bb       	out	0x12, r24	; 18
 208:	87 ec       	ldi	r24, 0xC7	; 199
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0xc6>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0xcc>
 212:	00 00       	nop
			}
		}
		
		if(data_status == 1)
		{
			data_status = 0;
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	a2 cf       	rjmp	.-188    	; 0x15c <main+0x16>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
