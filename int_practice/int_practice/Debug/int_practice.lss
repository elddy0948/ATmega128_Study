
int_practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000776  0000080a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000776  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  0080010c  0080010c  00000816  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6e  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008dc  00000000  00000000  0000145a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000434  00000000  00000000  00001d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  0000216c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d0  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000385  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	63 c0       	rjmp	.+198    	; 0xc8 <__ctors_end>
   2:	00 00       	nop
   4:	7e c0       	rjmp	.+252    	; 0x102 <__bad_interrupt>
   6:	00 00       	nop
   8:	7c c0       	rjmp	.+248    	; 0x102 <__bad_interrupt>
   a:	00 00       	nop
   c:	7a c0       	rjmp	.+244    	; 0x102 <__bad_interrupt>
   e:	00 00       	nop
  10:	78 c0       	rjmp	.+240    	; 0x102 <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c2       	rjmp	.+1174   	; 0x4ac <__vector_5>
  16:	00 00       	nop
  18:	5a c2       	rjmp	.+1204   	; 0x4ce <__vector_6>
  1a:	00 00       	nop
  1c:	72 c0       	rjmp	.+228    	; 0x102 <__bad_interrupt>
  1e:	00 00       	nop
  20:	70 c0       	rjmp	.+224    	; 0x102 <__bad_interrupt>
  22:	00 00       	nop
  24:	6e c0       	rjmp	.+220    	; 0x102 <__bad_interrupt>
  26:	00 00       	nop
  28:	6c c0       	rjmp	.+216    	; 0x102 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6a c0       	rjmp	.+212    	; 0x102 <__bad_interrupt>
  2e:	00 00       	nop
  30:	68 c0       	rjmp	.+208    	; 0x102 <__bad_interrupt>
  32:	00 00       	nop
  34:	66 c0       	rjmp	.+204    	; 0x102 <__bad_interrupt>
  36:	00 00       	nop
  38:	64 c0       	rjmp	.+200    	; 0x102 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	62 c0       	rjmp	.+196    	; 0x102 <__bad_interrupt>
  3e:	00 00       	nop
  40:	60 c0       	rjmp	.+192    	; 0x102 <__bad_interrupt>
  42:	00 00       	nop
  44:	5e c0       	rjmp	.+188    	; 0x102 <__bad_interrupt>
  46:	00 00       	nop
  48:	5c c0       	rjmp	.+184    	; 0x102 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5a c0       	rjmp	.+180    	; 0x102 <__bad_interrupt>
  4e:	00 00       	nop
  50:	58 c0       	rjmp	.+176    	; 0x102 <__bad_interrupt>
  52:	00 00       	nop
  54:	56 c0       	rjmp	.+172    	; 0x102 <__bad_interrupt>
  56:	00 00       	nop
  58:	54 c0       	rjmp	.+168    	; 0x102 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	52 c0       	rjmp	.+164    	; 0x102 <__bad_interrupt>
  5e:	00 00       	nop
  60:	50 c0       	rjmp	.+160    	; 0x102 <__bad_interrupt>
  62:	00 00       	nop
  64:	4e c0       	rjmp	.+156    	; 0x102 <__bad_interrupt>
  66:	00 00       	nop
  68:	4c c0       	rjmp	.+152    	; 0x102 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4a c0       	rjmp	.+148    	; 0x102 <__bad_interrupt>
  6e:	00 00       	nop
  70:	48 c0       	rjmp	.+144    	; 0x102 <__bad_interrupt>
  72:	00 00       	nop
  74:	46 c0       	rjmp	.+140    	; 0x102 <__bad_interrupt>
  76:	00 00       	nop
  78:	44 c0       	rjmp	.+136    	; 0x102 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	42 c0       	rjmp	.+132    	; 0x102 <__bad_interrupt>
  7e:	00 00       	nop
  80:	40 c0       	rjmp	.+128    	; 0x102 <__bad_interrupt>
  82:	00 00       	nop
  84:	3e c0       	rjmp	.+124    	; 0x102 <__bad_interrupt>
  86:	00 00       	nop
  88:	3c c0       	rjmp	.+120    	; 0x102 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
  8c:	53 75       	andi	r21, 0x53	; 83
  8e:	6e 4d       	sbci	r22, 0xDE	; 222
  90:	6f 6e       	ori	r22, 0xEF	; 239
  92:	54 75       	andi	r21, 0x54	; 84
  94:	65 57       	subi	r22, 0x75	; 117
  96:	65 64       	ori	r22, 0x45	; 69
  98:	54 68       	ori	r21, 0x84	; 132
  9a:	75 46       	sbci	r23, 0x65	; 101
  9c:	72 69       	ori	r23, 0x92	; 146
  9e:	53 61       	ori	r21, 0x13	; 19
  a0:	74 00       	.word	0x0074	; ????

000000a2 <ascmonths>:
  a2:	4a 61 6e 46 65 62 4d 61 72 41 70 72 4d 61 79 4a     JanFebMarAprMayJ
  b2:	75 6e 4a 75 6c 41 75 67 53 65 70 4f 63 74 4e 6f     unJulAugSepOctNo
  c2:	76 44 65 63 00 00                                   vDec..

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d0 e1       	ldi	r29, 0x10	; 16
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e6 e7       	ldi	r30, 0x76	; 118
  dc:	f7 e0       	ldi	r31, 0x07	; 7
  de:	00 e0       	ldi	r16, 0x00	; 0
  e0:	0b bf       	out	0x3b, r16	; 59
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x14>
  e4:	07 90       	elpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	ac 30       	cpi	r26, 0x0C	; 12
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0x10>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	ac e0       	ldi	r26, 0x0C	; 12
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a9 33       	cpi	r26, 0x39	; 57
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	82 d2       	rcall	.+1284   	; 0x604 <main>
 100:	38 c3       	rjmp	.+1648   	; 0x772 <_exit>

00000102 <__bad_interrupt>:
 102:	7e cf       	rjmp	.-260    	; 0x0 <__vectors>

00000104 <ctime>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	2c 97       	sbiw	r28, 0x0c	; 12
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	be 01       	movw	r22, r28
 11a:	6f 5f       	subi	r22, 0xFF	; 255
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	1a d0       	rcall	.+52     	; 0x154 <localtime_r>
 120:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	63 d0       	rcall	.+198    	; 0x1f4 <asctime_r>
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	2c 96       	adiw	r28, 0x0c	; 12
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <localtime>:
 148:	6d e0       	ldi	r22, 0x0D	; 13
 14a:	71 e0       	ldi	r23, 0x01	; 1
 14c:	03 d0       	rcall	.+6      	; 0x154 <localtime_r>
 14e:	8d e0       	ldi	r24, 0x0D	; 13
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	08 95       	ret

00000154 <localtime_r>:
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	00 d0       	rcall	.+0      	; 0x166 <localtime_r+0x12>
 166:	00 d0       	rcall	.+0      	; 0x168 <localtime_r+0x14>
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	6c 01       	movw	r12, r24
 16e:	7b 01       	movw	r14, r22
 170:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <__dst_ptr>
 174:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <__dst_ptr+0x1>
 178:	30 97       	sbiw	r30, 0x00	; 0
 17a:	29 f0       	breq	.+10     	; 0x186 <localtime_r+0x32>
 17c:	69 e1       	ldi	r22, 0x19	; 25
 17e:	71 e0       	ldi	r23, 0x01	; 1
 180:	09 95       	icall
 182:	8c 01       	movw	r16, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <localtime_r+0x36>
 186:	0f ef       	ldi	r16, 0xFF	; 255
 188:	1f ef       	ldi	r17, 0xFF	; 255
 18a:	f6 01       	movw	r30, r12
 18c:	40 81       	ld	r20, Z
 18e:	51 81       	ldd	r21, Z+1	; 0x01
 190:	62 81       	ldd	r22, Z+2	; 0x02
 192:	73 81       	ldd	r23, Z+3	; 0x03
 194:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <__utc_offset>
 198:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <__utc_offset+0x1>
 19c:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <__utc_offset+0x2>
 1a0:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <__utc_offset+0x3>
 1a4:	84 0f       	add	r24, r20
 1a6:	95 1f       	adc	r25, r21
 1a8:	a6 1f       	adc	r26, r22
 1aa:	b7 1f       	adc	r27, r23
 1ac:	10 16       	cp	r1, r16
 1ae:	11 06       	cpc	r1, r17
 1b0:	4c f4       	brge	.+18     	; 0x1c4 <localtime_r+0x70>
 1b2:	a8 01       	movw	r20, r16
 1b4:	01 2e       	mov	r0, r17
 1b6:	00 0c       	add	r0, r0
 1b8:	66 0b       	sbc	r22, r22
 1ba:	77 0b       	sbc	r23, r23
 1bc:	84 0f       	add	r24, r20
 1be:	95 1f       	adc	r25, r21
 1c0:	a6 1f       	adc	r26, r22
 1c2:	b7 1f       	adc	r27, r23
 1c4:	89 83       	std	Y+1, r24	; 0x01
 1c6:	9a 83       	std	Y+2, r25	; 0x02
 1c8:	ab 83       	std	Y+3, r26	; 0x03
 1ca:	bc 83       	std	Y+4, r27	; 0x04
 1cc:	b7 01       	movw	r22, r14
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	8a d0       	rcall	.+276    	; 0x2e8 <gmtime_r>
 1d4:	f7 01       	movw	r30, r14
 1d6:	13 87       	std	Z+11, r17	; 0x0b
 1d8:	02 87       	std	Z+10, r16	; 0x0a
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	cf 90       	pop	r12
 1f2:	08 95       	ret

000001f4 <asctime_r>:
 1f4:	cf 92       	push	r12
 1f6:	df 92       	push	r13
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	8c 01       	movw	r16, r24
 206:	eb 01       	movw	r28, r22
 208:	fc 01       	movw	r30, r24
 20a:	84 81       	ldd	r24, Z+4	; 0x04
 20c:	b8 2f       	mov	r27, r24
 20e:	bb 0f       	add	r27, r27
 210:	b8 0f       	add	r27, r24
 212:	85 81       	ldd	r24, Z+5	; 0x05
 214:	78 2f       	mov	r23, r24
 216:	77 0f       	add	r23, r23
 218:	78 0f       	add	r23, r24
 21a:	9e 01       	movw	r18, r28
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	8b 2f       	mov	r24, r27
 220:	84 0f       	add	r24, r20
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	a0 e0       	ldi	r26, 0x00	; 0
 226:	84 57       	subi	r24, 0x74	; 116
 228:	9f 4f       	sbci	r25, 0xFF	; 255
 22a:	af 4f       	sbci	r26, 0xFF	; 255
 22c:	fc 01       	movw	r30, r24
 22e:	5a 2f       	mov	r21, r26
 230:	99 d2       	rcall	.+1330   	; 0x764 <__xload_1>
 232:	f9 01       	movw	r30, r18
 234:	61 93       	st	Z+, r22
 236:	9f 01       	movw	r18, r30
 238:	87 2f       	mov	r24, r23
 23a:	84 0f       	add	r24, r20
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	a0 e0       	ldi	r26, 0x00	; 0
 240:	8e 55       	subi	r24, 0x5E	; 94
 242:	9f 4f       	sbci	r25, 0xFF	; 255
 244:	af 4f       	sbci	r26, 0xFF	; 255
 246:	fc 01       	movw	r30, r24
 248:	5a 2f       	mov	r21, r26
 24a:	8c d2       	rcall	.+1304   	; 0x764 <__xload_1>
 24c:	f9 01       	movw	r30, r18
 24e:	63 83       	std	Z+3, r22	; 0x03
 250:	4f 5f       	subi	r20, 0xFF	; 255
 252:	43 30       	cpi	r20, 0x03	; 3
 254:	21 f7       	brne	.-56     	; 0x21e <asctime_r+0x2a>
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	8f 83       	std	Y+7, r24	; 0x07
 25a:	8b 83       	std	Y+3, r24	; 0x03
 25c:	be 01       	movw	r22, r28
 25e:	68 5f       	subi	r22, 0xF8	; 248
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	f8 01       	movw	r30, r16
 264:	83 81       	ldd	r24, Z+3	; 0x03
 266:	40 e2       	ldi	r20, 0x20	; 32
 268:	08 2e       	mov	r0, r24
 26a:	00 0c       	add	r0, r0
 26c:	99 0b       	sbc	r25, r25
 26e:	0d d1       	rcall	.+538    	; 0x48a <__print_lz>
 270:	be 01       	movw	r22, r28
 272:	65 5f       	subi	r22, 0xF5	; 245
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	f8 01       	movw	r30, r16
 278:	82 81       	ldd	r24, Z+2	; 0x02
 27a:	4a e3       	ldi	r20, 0x3A	; 58
 27c:	08 2e       	mov	r0, r24
 27e:	00 0c       	add	r0, r0
 280:	99 0b       	sbc	r25, r25
 282:	03 d1       	rcall	.+518    	; 0x48a <__print_lz>
 284:	be 01       	movw	r22, r28
 286:	62 5f       	subi	r22, 0xF2	; 242
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	f8 01       	movw	r30, r16
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	4a e3       	ldi	r20, 0x3A	; 58
 290:	08 2e       	mov	r0, r24
 292:	00 0c       	add	r0, r0
 294:	99 0b       	sbc	r25, r25
 296:	f9 d0       	rcall	.+498    	; 0x48a <__print_lz>
 298:	be 01       	movw	r22, r28
 29a:	6f 5e       	subi	r22, 0xEF	; 239
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	f8 01       	movw	r30, r16
 2a0:	80 81       	ld	r24, Z
 2a2:	40 e2       	ldi	r20, 0x20	; 32
 2a4:	08 2e       	mov	r0, r24
 2a6:	00 0c       	add	r0, r0
 2a8:	99 0b       	sbc	r25, r25
 2aa:	ef d0       	rcall	.+478    	; 0x48a <__print_lz>
 2ac:	f8 01       	movw	r30, r16
 2ae:	86 81       	ldd	r24, Z+6	; 0x06
 2b0:	97 81       	ldd	r25, Z+7	; 0x07
 2b2:	64 e6       	ldi	r22, 0x64	; 100
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	84 59       	subi	r24, 0x94	; 148
 2b8:	98 4f       	sbci	r25, 0xF8	; 248
 2ba:	ef d1       	rcall	.+990    	; 0x69a <__divmodhi4>
 2bc:	6b 01       	movw	r12, r22
 2be:	7c 01       	movw	r14, r24
 2c0:	be 01       	movw	r22, r28
 2c2:	6c 5e       	subi	r22, 0xEC	; 236
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	40 e2       	ldi	r20, 0x20	; 32
 2c8:	c6 01       	movw	r24, r12
 2ca:	df d0       	rcall	.+446    	; 0x48a <__print_lz>
 2cc:	be 01       	movw	r22, r28
 2ce:	6a 5e       	subi	r22, 0xEA	; 234
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	c7 01       	movw	r24, r14
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	d1 c0       	rjmp	.+418    	; 0x48a <__print_lz>

000002e8 <gmtime_r>:
 2e8:	cf 92       	push	r12
 2ea:	df 92       	push	r13
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	28 97       	sbiw	r28, 0x08	; 8
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
 308:	8b 01       	movw	r16, r22
 30a:	fc 01       	movw	r30, r24
 30c:	60 81       	ld	r22, Z
 30e:	71 81       	ldd	r23, Z+1	; 0x01
 310:	82 81       	ldd	r24, Z+2	; 0x02
 312:	93 81       	ldd	r25, Z+3	; 0x03
 314:	20 e8       	ldi	r18, 0x80	; 128
 316:	31 e5       	ldi	r19, 0x51	; 81
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	e5 d1       	rcall	.+970    	; 0x6e8 <__udivmodsi4>
 31e:	69 01       	movw	r12, r18
 320:	7a 01       	movw	r14, r20
 322:	2c e3       	ldi	r18, 0x3C	; 60
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	00 d2       	rcall	.+1024   	; 0x72c <__divmodsi4>
 32c:	29 83       	std	Y+1, r18	; 0x01
 32e:	3a 83       	std	Y+2, r19	; 0x02
 330:	4b 83       	std	Y+3, r20	; 0x03
 332:	5c 83       	std	Y+4, r21	; 0x04
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	9a 81       	ldd	r25, Y+2	; 0x02
 338:	ab 81       	ldd	r26, Y+3	; 0x03
 33a:	bc 81       	ldd	r27, Y+4	; 0x04
 33c:	f8 01       	movw	r30, r16
 33e:	60 83       	st	Z, r22
 340:	6c e3       	ldi	r22, 0x3C	; 60
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	aa d1       	rcall	.+852    	; 0x69a <__divmodhi4>
 346:	dc 01       	movw	r26, r24
 348:	cb 01       	movw	r24, r22
 34a:	f8 01       	movw	r30, r16
 34c:	a1 83       	std	Z+1, r26	; 0x01
 34e:	82 83       	std	Z+2, r24	; 0x02
 350:	c6 01       	movw	r24, r12
 352:	06 96       	adiw	r24, 0x06	; 6
 354:	67 e0       	ldi	r22, 0x07	; 7
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	b3 d1       	rcall	.+870    	; 0x6c0 <__udivmodhi4>
 35a:	84 83       	std	Z+4, r24	; 0x04
 35c:	2d ea       	ldi	r18, 0xAD	; 173
 35e:	3e e8       	ldi	r19, 0x8E	; 142
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	c7 01       	movw	r24, r14
 366:	b6 01       	movw	r22, r12
 368:	e1 d1       	rcall	.+962    	; 0x72c <__divmodsi4>
 36a:	29 83       	std	Y+1, r18	; 0x01
 36c:	3a 83       	std	Y+2, r19	; 0x02
 36e:	6d 83       	std	Y+5, r22	; 0x05
 370:	7e 83       	std	Y+6, r23	; 0x06
 372:	8f 83       	std	Y+7, r24	; 0x07
 374:	98 87       	std	Y+8, r25	; 0x08
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	9a 81       	ldd	r25, Y+2	; 0x02
 37a:	24 e6       	ldi	r18, 0x64	; 100
 37c:	28 9f       	mul	r18, r24
 37e:	60 01       	movw	r12, r0
 380:	29 9f       	mul	r18, r25
 382:	d0 0c       	add	r13, r0
 384:	11 24       	eor	r1, r1
 386:	6d 81       	ldd	r22, Y+5	; 0x05
 388:	7e 81       	ldd	r23, Y+6	; 0x06
 38a:	8f 81       	ldd	r24, Y+7	; 0x07
 38c:	98 85       	ldd	r25, Y+8	; 0x08
 38e:	25 eb       	ldi	r18, 0xB5	; 181
 390:	35 e0       	ldi	r19, 0x05	; 5
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	ca d1       	rcall	.+916    	; 0x72c <__divmodsi4>
 398:	29 83       	std	Y+1, r18	; 0x01
 39a:	3a 83       	std	Y+2, r19	; 0x02
 39c:	6d 83       	std	Y+5, r22	; 0x05
 39e:	7e 83       	std	Y+6, r23	; 0x06
 3a0:	e9 80       	ldd	r14, Y+1	; 0x01
 3a2:	fa 80       	ldd	r15, Y+2	; 0x02
 3a4:	ee 0c       	add	r14, r14
 3a6:	ff 1c       	adc	r15, r15
 3a8:	ee 0c       	add	r14, r14
 3aa:	ff 1c       	adc	r15, r15
 3ac:	ec 0c       	add	r14, r12
 3ae:	fd 1c       	adc	r15, r13
 3b0:	8d 81       	ldd	r24, Y+5	; 0x05
 3b2:	9e 81       	ldd	r25, Y+6	; 0x06
 3b4:	f5 e6       	ldi	r31, 0x65	; 101
 3b6:	ef 16       	cp	r14, r31
 3b8:	f1 04       	cpc	r15, r1
 3ba:	10 f0       	brcs	.+4      	; 0x3c0 <gmtime_r+0xd8>
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <gmtime_r+0xe0>
 3c0:	24 e6       	ldi	r18, 0x64	; 100
 3c2:	e2 16       	cp	r14, r18
 3c4:	f1 04       	cpc	r15, r1
 3c6:	19 f0       	breq	.+6      	; 0x3ce <gmtime_r+0xe6>
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <gmtime_r+0xea>
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	a9 01       	movw	r20, r18
 3d4:	44 59       	subi	r20, 0x94	; 148
 3d6:	5e 4f       	sbci	r21, 0xFE	; 254
 3d8:	48 17       	cp	r20, r24
 3da:	59 07       	cpc	r21, r25
 3dc:	60 f4       	brcc	.+24     	; 0x3f6 <gmtime_r+0x10e>
 3de:	6d e6       	ldi	r22, 0x6D	; 109
 3e0:	71 e0       	ldi	r23, 0x01	; 1
 3e2:	82 1b       	sub	r24, r18
 3e4:	93 0b       	sbc	r25, r19
 3e6:	59 d1       	rcall	.+690    	; 0x69a <__divmodhi4>
 3e8:	dc 01       	movw	r26, r24
 3ea:	cb 01       	movw	r24, r22
 3ec:	e8 0e       	add	r14, r24
 3ee:	f9 1e       	adc	r15, r25
 3f0:	cd 01       	movw	r24, r26
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	44 e6       	ldi	r20, 0x64	; 100
 3f8:	e4 0e       	add	r14, r20
 3fa:	f1 1c       	adc	r15, r1
 3fc:	f8 01       	movw	r30, r16
 3fe:	f7 82       	std	Z+7, r15	; 0x07
 400:	e6 82       	std	Z+6, r14	; 0x06
 402:	91 87       	std	Z+9, r25	; 0x09
 404:	80 87       	std	Z+8, r24	; 0x08
 406:	25 5c       	subi	r18, 0xC5	; 197
 408:	3f 4f       	sbci	r19, 0xFF	; 255
 40a:	82 17       	cp	r24, r18
 40c:	93 07       	cpc	r25, r19
 40e:	40 f4       	brcc	.+16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 410:	6f e1       	ldi	r22, 0x1F	; 31
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	42 d1       	rcall	.+644    	; 0x69a <__divmodhi4>
 416:	dc 01       	movw	r26, r24
 418:	cb 01       	movw	r24, r22
 41a:	f8 01       	movw	r30, r16
 41c:	85 83       	std	Z+5, r24	; 0x05
 41e:	1f c0       	rjmp	.+62     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 420:	69 e9       	ldi	r22, 0x99	; 153
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	82 1b       	sub	r24, r18
 426:	93 0b       	sbc	r25, r19
 428:	38 d1       	rcall	.+624    	; 0x69a <__divmodhi4>
 42a:	dc 01       	movw	r26, r24
 42c:	cb 01       	movw	r24, r22
 42e:	f8 2e       	mov	r15, r24
 430:	ff 0c       	add	r15, r15
 432:	ff 0c       	add	r15, r15
 434:	f8 0e       	add	r15, r24
 436:	6d e3       	ldi	r22, 0x3D	; 61
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	cd 01       	movw	r24, r26
 43c:	2e d1       	rcall	.+604    	; 0x69a <__divmodhi4>
 43e:	dc 01       	movw	r26, r24
 440:	cb 01       	movw	r24, r22
 442:	e8 2e       	mov	r14, r24
 444:	ee 0c       	add	r14, r14
 446:	6f e1       	ldi	r22, 0x1F	; 31
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	cd 01       	movw	r24, r26
 44c:	26 d1       	rcall	.+588    	; 0x69a <__divmodhi4>
 44e:	dc 01       	movw	r26, r24
 450:	cb 01       	movw	r24, r22
 452:	22 e0       	ldi	r18, 0x02	; 2
 454:	28 0f       	add	r18, r24
 456:	f2 0e       	add	r15, r18
 458:	fe 0c       	add	r15, r14
 45a:	f8 01       	movw	r30, r16
 45c:	f5 82       	std	Z+5, r15	; 0x05
 45e:	a3 83       	std	Z+3, r26	; 0x03
 460:	f8 01       	movw	r30, r16
 462:	13 86       	std	Z+11, r1	; 0x0b
 464:	12 86       	std	Z+10, r1	; 0x0a
 466:	83 81       	ldd	r24, Z+3	; 0x03
 468:	8f 5f       	subi	r24, 0xFF	; 255
 46a:	83 83       	std	Z+3, r24	; 0x03
 46c:	28 96       	adiw	r28, 0x08	; 8
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	df 90       	pop	r13
 486:	cf 90       	pop	r12
 488:	08 95       	ret

0000048a <__print_lz>:
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	eb 01       	movw	r28, r22
 492:	14 2f       	mov	r17, r20
 494:	6a e0       	ldi	r22, 0x0A	; 10
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	00 d1       	rcall	.+512    	; 0x69a <__divmodhi4>
 49a:	60 5d       	subi	r22, 0xD0	; 208
 49c:	68 83       	st	Y, r22
 49e:	80 5d       	subi	r24, 0xD0	; 208
 4a0:	89 83       	std	Y+1, r24	; 0x01
 4a2:	1a 83       	std	Y+2, r17	; 0x02
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	08 95       	ret

000004ac <__vector_5>:
unsigned char EINT4_FLAG_BIT = 0;

const unsigned char seg_pat[10]= {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07,0x7f, 0x6f};

ISR(INT4_vect)
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	8f 93       	push	r24
	cli();
 4b8:	f8 94       	cli
	EINT4_FLAG_BIT = 1;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	sei();
 4c0:	78 94       	sei
}
 4c2:	8f 91       	pop	r24
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <__vector_6>:

ISR(INT5_vect)
{
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	8f 93       	push	r24
	cli();
 4da:	f8 94       	cli
	PORTC = 0x55;
 4dc:	85 e5       	ldi	r24, 0x55	; 85
 4de:	85 bb       	out	0x15, r24	; 21
	sei();
 4e0:	78 94       	sei
}
 4e2:	8f 91       	pop	r24
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <Seg4_out>:
		}
    }
}

void Seg4_out(int num)
{
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
	int i, n1000, n100, n10, n1, buf;
	
	n1000 = num / 1000;
 4fa:	68 ee       	ldi	r22, 0xE8	; 232
 4fc:	73 e0       	ldi	r23, 0x03	; 3
 4fe:	cd d0       	rcall	.+410    	; 0x69a <__divmodhi4>
 500:	7b 01       	movw	r14, r22
	buf = num % 1000;
	n100 = buf / 100;
 502:	64 e6       	ldi	r22, 0x64	; 100
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	c9 d0       	rcall	.+402    	; 0x69a <__divmodhi4>
 508:	9b 01       	movw	r18, r22
	buf = buf % 100;
	
	n10 = buf / 10;
	n1 = buf % 10;
 50a:	6a e0       	ldi	r22, 0x0A	; 10
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	c5 d0       	rcall	.+394    	; 0x69a <__divmodhi4>
 510:	dc 01       	movw	r26, r24
	for (i = 0; i < 2; ++i)
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	6b c0       	rjmp	.+214    	; 0x5ee <Seg4_out+0x100>
	{
		PORTG = 0x08;
 518:	c5 e6       	ldi	r28, 0x65	; 101
 51a:	d0 e0       	ldi	r29, 0x00	; 0
 51c:	88 e0       	ldi	r24, 0x08	; 8
 51e:	88 83       	st	Y, r24
		PORTD = ((seg_pat[n1] & 0x0F) << 4) | (PORTD & 0x0F);
 520:	cd 01       	movw	r24, r26
 522:	8e 5f       	subi	r24, 0xFE	; 254
 524:	9e 4f       	sbci	r25, 0xFE	; 254
 526:	fc 01       	movw	r30, r24
 528:	90 81       	ld	r25, Z
 52a:	f0 e1       	ldi	r31, 0x10	; 16
 52c:	9f 9f       	mul	r25, r31
 52e:	80 01       	movw	r16, r0
 530:	11 24       	eor	r1, r1
 532:	82 b3       	in	r24, 0x12	; 18
 534:	8f 70       	andi	r24, 0x0F	; 15
 536:	08 2b       	or	r16, r24
 538:	02 bb       	out	0x12, r16	; 18
		PORTB = (seg_pat[n1] & 0x70 ) | (PORTB & 0x0F);
 53a:	88 b3       	in	r24, 0x18	; 24
 53c:	90 77       	andi	r25, 0x70	; 112
 53e:	8f 70       	andi	r24, 0x0F	; 15
 540:	89 2b       	or	r24, r25
 542:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 544:	8f e1       	ldi	r24, 0x1F	; 31
 546:	9e e4       	ldi	r25, 0x4E	; 78
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <Seg4_out+0x5a>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <Seg4_out+0x60>
 54e:	00 00       	nop
		_delay_ms(5);
		PORTG = 0x04;
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	88 83       	st	Y, r24
		PORTD = ((seg_pat[n10] & 0x0F) << 4) | (PORTD & 0x0F);
 554:	cb 01       	movw	r24, r22
 556:	8e 5f       	subi	r24, 0xFE	; 254
 558:	9e 4f       	sbci	r25, 0xFE	; 254
 55a:	fc 01       	movw	r30, r24
 55c:	80 81       	ld	r24, Z
 55e:	f0 e1       	ldi	r31, 0x10	; 16
 560:	8f 9f       	mul	r24, r31
 562:	80 01       	movw	r16, r0
 564:	11 24       	eor	r1, r1
 566:	92 b3       	in	r25, 0x12	; 18
 568:	9f 70       	andi	r25, 0x0F	; 15
 56a:	09 2b       	or	r16, r25
 56c:	02 bb       	out	0x12, r16	; 18
		PORTB = (seg_pat[n10] & 0x70 ) | (PORTB & 0x0F);
 56e:	98 b3       	in	r25, 0x18	; 24
 570:	80 77       	andi	r24, 0x70	; 112
 572:	9f 70       	andi	r25, 0x0F	; 15
 574:	98 2b       	or	r25, r24
 576:	98 bb       	out	0x18, r25	; 24
 578:	8f e1       	ldi	r24, 0x1F	; 31
 57a:	9e e4       	ldi	r25, 0x4E	; 78
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <Seg4_out+0x8e>
 580:	00 c0       	rjmp	.+0      	; 0x582 <Seg4_out+0x94>
 582:	00 00       	nop
		_delay_ms(5);
		PORTG = 0x02;
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	88 83       	st	Y, r24
		PORTD = ((seg_pat[n100] & 0x0F) << 4) | (PORTD & 0x0F);
 588:	c9 01       	movw	r24, r18
 58a:	8e 5f       	subi	r24, 0xFE	; 254
 58c:	9e 4f       	sbci	r25, 0xFE	; 254
 58e:	fc 01       	movw	r30, r24
 590:	80 81       	ld	r24, Z
 592:	f0 e1       	ldi	r31, 0x10	; 16
 594:	8f 9f       	mul	r24, r31
 596:	80 01       	movw	r16, r0
 598:	11 24       	eor	r1, r1
 59a:	92 b3       	in	r25, 0x12	; 18
 59c:	9f 70       	andi	r25, 0x0F	; 15
 59e:	09 2b       	or	r16, r25
 5a0:	02 bb       	out	0x12, r16	; 18
		PORTB = (seg_pat[n100] & 0x70 ) | (PORTB & 0x0F);
 5a2:	98 b3       	in	r25, 0x18	; 24
 5a4:	80 77       	andi	r24, 0x70	; 112
 5a6:	9f 70       	andi	r25, 0x0F	; 15
 5a8:	98 2b       	or	r25, r24
 5aa:	98 bb       	out	0x18, r25	; 24
 5ac:	8f e1       	ldi	r24, 0x1F	; 31
 5ae:	9e e4       	ldi	r25, 0x4E	; 78
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <Seg4_out+0xc2>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <Seg4_out+0xc8>
 5b6:	00 00       	nop
		_delay_ms(5);
		PORTG = 0x01;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	88 83       	st	Y, r24
		PORTD = ((seg_pat[n1000] & 0x0F) << 4) | (PORTD & 0x0F);
 5bc:	e7 01       	movw	r28, r14
 5be:	ce 5f       	subi	r28, 0xFE	; 254
 5c0:	de 4f       	sbci	r29, 0xFE	; 254
 5c2:	88 81       	ld	r24, Y
 5c4:	90 e1       	ldi	r25, 0x10	; 16
 5c6:	89 9f       	mul	r24, r25
 5c8:	e0 01       	movw	r28, r0
 5ca:	11 24       	eor	r1, r1
 5cc:	92 b3       	in	r25, 0x12	; 18
 5ce:	9f 70       	andi	r25, 0x0F	; 15
 5d0:	c9 2b       	or	r28, r25
 5d2:	c2 bb       	out	0x12, r28	; 18
		PORTB = (seg_pat[n1000] & 0x70 ) | (PORTB & 0x0F);
 5d4:	98 b3       	in	r25, 0x18	; 24
 5d6:	80 77       	andi	r24, 0x70	; 112
 5d8:	9f 70       	andi	r25, 0x0F	; 15
 5da:	98 2b       	or	r25, r24
 5dc:	98 bb       	out	0x18, r25	; 24
 5de:	ef e1       	ldi	r30, 0x1F	; 31
 5e0:	fe e4       	ldi	r31, 0x4E	; 78
 5e2:	31 97       	sbiw	r30, 0x01	; 1
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <Seg4_out+0xf4>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <Seg4_out+0xfa>
 5e8:	00 00       	nop
	n100 = buf / 100;
	buf = buf % 100;
	
	n10 = buf / 10;
	n1 = buf % 10;
	for (i = 0; i < 2; ++i)
 5ea:	4f 5f       	subi	r20, 0xFF	; 255
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
 5ee:	42 30       	cpi	r20, 0x02	; 2
 5f0:	51 05       	cpc	r21, r1
 5f2:	0c f4       	brge	.+2      	; 0x5f6 <Seg4_out+0x108>
 5f4:	91 cf       	rjmp	.-222    	; 0x518 <Seg4_out+0x2a>
		PORTD = ((seg_pat[n1000] & 0x0F) << 4) | (PORTD & 0x0F);
		PORTB = (seg_pat[n1000] & 0x70 ) | (PORTB & 0x0F);
		_delay_ms(5);
	}
	
}
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	ff 90       	pop	r15
 600:	ef 90       	pop	r14
 602:	08 95       	ret

00000604 <main>:
}

void Seg4_out(int num);

int main(void)
{
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	00 d0       	rcall	.+0      	; 0x60a <main+0x6>
 60a:	00 d0       	rcall	.+0      	; 0x60c <main+0x8>
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
	int num = 0;
	DDRB |= SEGMENT_OUTPUT;
 610:	87 b3       	in	r24, 0x17	; 23
 612:	80 6f       	ori	r24, 0xF0	; 240
 614:	87 bb       	out	0x17, r24	; 23
	DDRD |= SEGMENT_OUTPUT;
 616:	81 b3       	in	r24, 0x11	; 17
 618:	80 6f       	ori	r24, 0xF0	; 240
 61a:	81 bb       	out	0x11, r24	; 17
	DDRG |= DIGIT_SELECTION_OUTPUT;
 61c:	e4 e6       	ldi	r30, 0x64	; 100
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	8f 60       	ori	r24, 0x0F	; 15
 624:	80 83       	st	Z, r24
	
	EIMSK |= 0xF0;
 626:	89 b7       	in	r24, 0x39	; 57
 628:	80 6f       	ori	r24, 0xF0	; 240
 62a:	89 bf       	out	0x39, r24	; 57
	EICRB = 0b10101010;
 62c:	8a ea       	ldi	r24, 0xAA	; 170
 62e:	8a bf       	out	0x3a, r24	; 58
	//EICRB &= 0xFE;
	
	PORTB = 0x0;
 630:	18 ba       	out	0x18, r1	; 24
	PORTD = 0x0;
 632:	12 ba       	out	0x12, r1	; 18
	PORTG = 0x00;
 634:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	
	sei();
 638:	78 94       	sei
	
	time_t c_time;
	struct tm * timeinfo;
	
	ctime(&c_time);
 63a:	ce 01       	movw	r24, r28
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	62 dd       	rcall	.-1340   	; 0x104 <ctime>
	timeinfo = localtime(&c_time);
 640:	ce 01       	movw	r24, r28
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	81 dd       	rcall	.-1278   	; 0x148 <localtime>
 646:	7c 01       	movw	r14, r24

void Seg4_out(int num);

int main(void)
{
	int num = 0;
 648:	00 e0       	ldi	r16, 0x00	; 0
 64a:	10 e0       	ldi	r17, 0x00	; 0
	ctime(&c_time);
	timeinfo = localtime(&c_time);
    
    while (1) 
    {
		PORTD = ((seg_pat[num] & 0x0F) << 4) | (PORTD & 0x0F);
 64c:	f8 01       	movw	r30, r16
 64e:	ee 5f       	subi	r30, 0xFE	; 254
 650:	fe 4f       	sbci	r31, 0xFE	; 254
 652:	90 81       	ld	r25, Z
 654:	80 e1       	ldi	r24, 0x10	; 16
 656:	98 9f       	mul	r25, r24
 658:	90 01       	movw	r18, r0
 65a:	11 24       	eor	r1, r1
 65c:	82 b3       	in	r24, 0x12	; 18
 65e:	8f 70       	andi	r24, 0x0F	; 15
 660:	28 2b       	or	r18, r24
 662:	22 bb       	out	0x12, r18	; 18
		PORTB = (seg_pat[num] & 0x70) | (PORTB & 0x0F);
 664:	88 b3       	in	r24, 0x18	; 24
 666:	90 77       	andi	r25, 0x70	; 112
 668:	8f 70       	andi	r24, 0x0F	; 15
 66a:	89 2b       	or	r24, r25
		
		Seg4_out(num);
 66c:	88 bb       	out	0x18, r24	; 24
 66e:	c8 01       	movw	r24, r16
 670:	3e df       	rcall	.-388    	; 0x4ee <Seg4_out>
		
		if (EINT4_FLAG_BIT == 1)
 672:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	49 f7       	brne	.-46     	; 0x64c <main+0x48>
		{
		    EINT4_FLAG_BIT = 0;
 67a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		    num += (timeinfo->tm_hour * 100);
 67e:	f7 01       	movw	r30, r14
 680:	82 81       	ldd	r24, Z+2	; 0x02
 682:	f4 e6       	ldi	r31, 0x64	; 100
 684:	8f 02       	muls	r24, r31
 686:	00 0d       	add	r16, r0
 688:	11 1d       	adc	r17, r1
 68a:	11 24       	eor	r1, r1
		    num += timeinfo->tm_min;
 68c:	f7 01       	movw	r30, r14
 68e:	81 81       	ldd	r24, Z+1	; 0x01
 690:	08 0f       	add	r16, r24
 692:	11 1d       	adc	r17, r1
 694:	87 fd       	sbrc	r24, 7
 696:	1a 95       	dec	r17
 698:	d9 cf       	rjmp	.-78     	; 0x64c <main+0x48>

0000069a <__divmodhi4>:
 69a:	97 fb       	bst	r25, 7
 69c:	07 2e       	mov	r0, r23
 69e:	16 f4       	brtc	.+4      	; 0x6a4 <__divmodhi4+0xa>
 6a0:	00 94       	com	r0
 6a2:	06 d0       	rcall	.+12     	; 0x6b0 <__divmodhi4_neg1>
 6a4:	77 fd       	sbrc	r23, 7
 6a6:	08 d0       	rcall	.+16     	; 0x6b8 <__divmodhi4_neg2>
 6a8:	0b d0       	rcall	.+22     	; 0x6c0 <__udivmodhi4>
 6aa:	07 fc       	sbrc	r0, 7
 6ac:	05 d0       	rcall	.+10     	; 0x6b8 <__divmodhi4_neg2>
 6ae:	3e f4       	brtc	.+14     	; 0x6be <__divmodhi4_exit>

000006b0 <__divmodhi4_neg1>:
 6b0:	90 95       	com	r25
 6b2:	81 95       	neg	r24
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	08 95       	ret

000006b8 <__divmodhi4_neg2>:
 6b8:	70 95       	com	r23
 6ba:	61 95       	neg	r22
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255

000006be <__divmodhi4_exit>:
 6be:	08 95       	ret

000006c0 <__udivmodhi4>:
 6c0:	aa 1b       	sub	r26, r26
 6c2:	bb 1b       	sub	r27, r27
 6c4:	51 e1       	ldi	r21, 0x11	; 17
 6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <__udivmodhi4_ep>

000006c8 <__udivmodhi4_loop>:
 6c8:	aa 1f       	adc	r26, r26
 6ca:	bb 1f       	adc	r27, r27
 6cc:	a6 17       	cp	r26, r22
 6ce:	b7 07       	cpc	r27, r23
 6d0:	10 f0       	brcs	.+4      	; 0x6d6 <__udivmodhi4_ep>
 6d2:	a6 1b       	sub	r26, r22
 6d4:	b7 0b       	sbc	r27, r23

000006d6 <__udivmodhi4_ep>:
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	5a 95       	dec	r21
 6dc:	a9 f7       	brne	.-22     	; 0x6c8 <__udivmodhi4_loop>
 6de:	80 95       	com	r24
 6e0:	90 95       	com	r25
 6e2:	bc 01       	movw	r22, r24
 6e4:	cd 01       	movw	r24, r26
 6e6:	08 95       	ret

000006e8 <__udivmodsi4>:
 6e8:	a1 e2       	ldi	r26, 0x21	; 33
 6ea:	1a 2e       	mov	r1, r26
 6ec:	aa 1b       	sub	r26, r26
 6ee:	bb 1b       	sub	r27, r27
 6f0:	fd 01       	movw	r30, r26
 6f2:	0d c0       	rjmp	.+26     	; 0x70e <__udivmodsi4_ep>

000006f4 <__udivmodsi4_loop>:
 6f4:	aa 1f       	adc	r26, r26
 6f6:	bb 1f       	adc	r27, r27
 6f8:	ee 1f       	adc	r30, r30
 6fa:	ff 1f       	adc	r31, r31
 6fc:	a2 17       	cp	r26, r18
 6fe:	b3 07       	cpc	r27, r19
 700:	e4 07       	cpc	r30, r20
 702:	f5 07       	cpc	r31, r21
 704:	20 f0       	brcs	.+8      	; 0x70e <__udivmodsi4_ep>
 706:	a2 1b       	sub	r26, r18
 708:	b3 0b       	sbc	r27, r19
 70a:	e4 0b       	sbc	r30, r20
 70c:	f5 0b       	sbc	r31, r21

0000070e <__udivmodsi4_ep>:
 70e:	66 1f       	adc	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	1a 94       	dec	r1
 718:	69 f7       	brne	.-38     	; 0x6f4 <__udivmodsi4_loop>
 71a:	60 95       	com	r22
 71c:	70 95       	com	r23
 71e:	80 95       	com	r24
 720:	90 95       	com	r25
 722:	9b 01       	movw	r18, r22
 724:	ac 01       	movw	r20, r24
 726:	bd 01       	movw	r22, r26
 728:	cf 01       	movw	r24, r30
 72a:	08 95       	ret

0000072c <__divmodsi4>:
 72c:	05 2e       	mov	r0, r21
 72e:	97 fb       	bst	r25, 7
 730:	16 f4       	brtc	.+4      	; 0x736 <__divmodsi4+0xa>
 732:	00 94       	com	r0
 734:	0f d0       	rcall	.+30     	; 0x754 <__negsi2>
 736:	57 fd       	sbrc	r21, 7
 738:	05 d0       	rcall	.+10     	; 0x744 <__divmodsi4_neg2>
 73a:	d6 df       	rcall	.-84     	; 0x6e8 <__udivmodsi4>
 73c:	07 fc       	sbrc	r0, 7
 73e:	02 d0       	rcall	.+4      	; 0x744 <__divmodsi4_neg2>
 740:	46 f4       	brtc	.+16     	; 0x752 <__divmodsi4_exit>
 742:	08 c0       	rjmp	.+16     	; 0x754 <__negsi2>

00000744 <__divmodsi4_neg2>:
 744:	50 95       	com	r21
 746:	40 95       	com	r20
 748:	30 95       	com	r19
 74a:	21 95       	neg	r18
 74c:	3f 4f       	sbci	r19, 0xFF	; 255
 74e:	4f 4f       	sbci	r20, 0xFF	; 255
 750:	5f 4f       	sbci	r21, 0xFF	; 255

00000752 <__divmodsi4_exit>:
 752:	08 95       	ret

00000754 <__negsi2>:
 754:	90 95       	com	r25
 756:	80 95       	com	r24
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	08 95       	ret

00000764 <__xload_1>:
 764:	57 fd       	sbrc	r21, 7
 766:	03 c0       	rjmp	.+6      	; 0x76e <__xload_1+0xa>
 768:	5b bf       	out	0x3b, r21	; 59
 76a:	67 91       	elpm	r22, Z+
 76c:	08 95       	ret
 76e:	60 81       	ld	r22, Z
 770:	08 95       	ret

00000772 <_exit>:
 772:	f8 94       	cli

00000774 <__stop_program>:
 774:	ff cf       	rjmp	.-2      	; 0x774 <__stop_program>
