
i2c_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000422  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  000004bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001515  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b24  00000000  00000000  00001b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000975  00000000  00000000  0000263d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a8  00000000  00000000  0000315c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000982  00000000  00000000  00003704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	46 d1       	rcall	.+652    	; 0x350 <main>
  c4:	ac c1       	rjmp	.+856    	; 0x41e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <i2c_start>:
uint8_t response = 0x00;
static uint8_t page_buffer[PAGE_MAX] = {0x00};

void i2c_start()
{
	CLK_OUT;
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	81 bb       	out	0x11, r24	; 17
	DATA_OUT;
  ce:	81 b3       	in	r24, 0x11	; 17
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	81 bb       	out	0x11, r24	; 17
	DATA_HIGH;
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	82 bb       	out	0x12, r24	; 18
	CLK_HIGH;
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <i2c_start+0x1a>
	_delay_us(6);
	DATA_LOW;
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	8d 7f       	andi	r24, 0xFD	; 253
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <i2c_start+0x26>
	_delay_us(6);
	CLK_LOW;
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	08 95       	ret

000000fa <i2c_stop>:
}

void i2c_stop()
{
	CLK_OUT;
  fa:	81 b3       	in	r24, 0x11	; 17
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	81 bb       	out	0x11, r24	; 17
	DATA_OUT;
 100:	81 b3       	in	r24, 0x11	; 17
 102:	82 60       	ori	r24, 0x02	; 2
 104:	81 bb       	out	0x11, r24	; 17
	DATA_LOW;
 106:	82 b3       	in	r24, 0x12	; 18
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	82 bb       	out	0x12, r24	; 18
	CLK_HIGH;
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	82 bb       	out	0x12, r24	; 18
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <i2c_stop+0x1a>
	_delay_us(6);
	DATA_HIGH;
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	80 e2       	ldi	r24, 0x20	; 32
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <i2c_stop+0x26>
	_delay_us(6);
	CLK_LOW;
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	82 bb       	out	0x12, r24	; 18
 12a:	08 95       	ret

0000012c <write_data>:
}

void write_data(uint8_t data)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	d8 2f       	mov	r29, r24
	uint8_t i;
	DATA_OUT;
 132:	81 b3       	in	r24, 0x11	; 17
 134:	82 60       	ori	r24, 0x02	; 2
 136:	81 bb       	out	0x11, r24	; 17
	
	for (i = 0; i < 8; ++i)
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	25 c0       	rjmp	.+74     	; 0x186 <write_data+0x5a>
	{
		loading_led();
 13c:	f8 d0       	rcall	.+496    	; 0x32e <loading_led>
		if (GET_BIT(data, i) == 0x80)
 13e:	8d 2f       	mov	r24, r29
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0c 2e       	mov	r0, r28
 144:	02 c0       	rjmp	.+4      	; 0x14a <write_data+0x1e>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <write_data+0x1a>
 14e:	87 ff       	sbrs	r24, 7
 150:	04 c0       	rjmp	.+8      	; 0x15a <write_data+0x2e>
		{
			DATA_HIGH;
 152:	82 b3       	in	r24, 0x12	; 18
 154:	82 60       	ori	r24, 0x02	; 2
 156:	82 bb       	out	0x12, r24	; 18
 158:	03 c0       	rjmp	.+6      	; 0x160 <write_data+0x34>
		}
		else 
		{
			DATA_LOW;
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	82 bb       	out	0x12, r24	; 18
 160:	85 e1       	ldi	r24, 0x15	; 21
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <write_data+0x36>
 166:	00 00       	nop
		}
		
		_delay_us(4);
		CLK_HIGH;
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	82 bb       	out	0x12, r24	; 18
 16e:	85 e1       	ldi	r24, 0x15	; 21
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <write_data+0x44>
 174:	00 00       	nop
		_delay_us(4);
		CLK_LOW;
 176:	82 b3       	in	r24, 0x12	; 18
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	85 e1       	ldi	r24, 0x15	; 21
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <write_data+0x52>
 182:	00 00       	nop
void write_data(uint8_t data)
{
	uint8_t i;
	DATA_OUT;
	
	for (i = 0; i < 8; ++i)
 184:	cf 5f       	subi	r28, 0xFF	; 255
 186:	c8 30       	cpi	r28, 0x08	; 8
 188:	c8 f2       	brcs	.-78     	; 0x13c <write_data+0x10>
		CLK_HIGH;
		_delay_us(4);
		CLK_LOW;
		_delay_us(4);
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <receive_response>:

uint8_t receive_response()
{
 190:	cf 93       	push	r28
	uint8_t t;
	
	DATA_IN;
 192:	81 b3       	in	r24, 0x11	; 17
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	81 bb       	out	0x11, r24	; 17
 198:	85 e1       	ldi	r24, 0x15	; 21
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <receive_response+0xa>
 19e:	00 00       	nop
	_delay_us(4);
	CLK_HIGH;
 1a0:	82 b3       	in	r24, 0x12	; 18
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	82 bb       	out	0x12, r24	; 18
 1a6:	85 e1       	ldi	r24, 0x15	; 21
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <receive_response+0x18>
 1ac:	00 00       	nop
	_delay_us(4);
	
	for (t = 0; t < 20; ++t)
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0f c0       	rjmp	.+30     	; 0x1d0 <receive_response+0x40>
	{	
		// Waiting for response
		if ((PIND & 0x02) == ACK)
 1b2:	90 b3       	in	r25, 0x10	; 16
 1b4:	c9 2f       	mov	r28, r25
 1b6:	c2 70       	andi	r28, 0x02	; 2
 1b8:	91 fd       	sbrc	r25, 1
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <receive_response+0x3e>
		{
			ack_led();
 1bc:	c1 d0       	rcall	.+386    	; 0x340 <ack_led>
			CLK_LOW;
 1be:	82 b3       	in	r24, 0x12	; 18
 1c0:	8e 7f       	andi	r24, 0xFE	; 254
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	85 e1       	ldi	r24, 0x15	; 21
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <receive_response+0x36>
 1ca:	00 00       	nop
			_delay_us(4);
			return ACK;
 1cc:	0c c0       	rjmp	.+24     	; 0x1e6 <receive_response+0x56>
	DATA_IN;
	_delay_us(4);
	CLK_HIGH;
	_delay_us(4);
	
	for (t = 0; t < 20; ++t)
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	84 31       	cpi	r24, 0x14	; 20
			_delay_us(4);
			return ACK;
		}
	}
	
	noack_led();
 1d2:	78 f3       	brcs	.-34     	; 0x1b2 <receive_response+0x22>
 1d4:	b8 d0       	rcall	.+368    	; 0x346 <noack_led>
 1d6:	85 e1       	ldi	r24, 0x15	; 21
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <receive_response+0x48>
 1dc:	00 00       	nop

	_delay_us(4);
	CLK_LOW;
 1de:	82 b3       	in	r24, 0x12	; 18
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	82 bb       	out	0x12, r24	; 18

	return NOACK;
 1e4:	c2 e0       	ldi	r28, 0x02	; 2
}
 1e6:	8c 2f       	mov	r24, r28
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <read_data>:

uint8_t read_data()
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
	uint8_t received_data = 0x00;
	uint8_t i;
	
	DATA_IN;
 1f0:	81 b3       	in	r24, 0x11	; 17
 1f2:	8d 7f       	andi	r24, 0xFD	; 253
 1f4:	81 bb       	out	0x11, r24	; 17
 1f6:	85 e1       	ldi	r24, 0x15	; 21
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <read_data+0xc>
 1fc:	00 00       	nop
	_delay_us(4);
	CLK_HIGH;
 1fe:	82 b3       	in	r24, 0x12	; 18
 200:	81 60       	ori	r24, 0x01	; 1
 202:	82 bb       	out	0x12, r24	; 18
 204:	85 e1       	ldi	r24, 0x15	; 21
 206:	8a 95       	dec	r24
 208:	f1 f7       	brne	.-4      	; 0x206 <read_data+0x1a>
 20a:	00 00       	nop
	_delay_us(4);
	
	for (i = 0; i < 8; ++i)
 20c:	c0 e0       	ldi	r28, 0x00	; 0
	return NOACK;
}

uint8_t read_data()
{
	uint8_t received_data = 0x00;
 20e:	d0 e0       	ldi	r29, 0x00	; 0
	DATA_IN;
	_delay_us(4);
	CLK_HIGH;
	_delay_us(4);
	
	for (i = 0; i < 8; ++i)
 210:	09 c0       	rjmp	.+18     	; 0x224 <read_data+0x38>
	{
		loading_led();
 212:	8d d0       	rcall	.+282    	; 0x32e <loading_led>
		received_data |= ((PIND >> 1) & 0x01);
 214:	80 b3       	in	r24, 0x10	; 16
 216:	86 95       	lsr	r24
 218:	81 70       	andi	r24, 0x01	; 1
 21a:	d8 2b       	or	r29, r24
		if (i != 7) 
 21c:	c7 30       	cpi	r28, 0x07	; 7
 21e:	09 f0       	breq	.+2      	; 0x222 <read_data+0x36>
		{ 
			received_data <<= 1;
 220:	dd 0f       	add	r29, r29
	DATA_IN;
	_delay_us(4);
	CLK_HIGH;
	_delay_us(4);
	
	for (i = 0; i < 8; ++i)
 222:	cf 5f       	subi	r28, 0xFF	; 255
 224:	c8 30       	cpi	r28, 0x08	; 8
 226:	a8 f3       	brcs	.-22     	; 0x212 <read_data+0x26>
 228:	85 e1       	ldi	r24, 0x15	; 21
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <read_data+0x3e>
 22e:	00 00       	nop
			received_data <<= 1;
		}
	}
	
	_delay_us(4);
	CLK_LOW;
 230:	82 b3       	in	r24, 0x12	; 18
 232:	8e 7f       	andi	r24, 0xFE	; 254
 234:	82 bb       	out	0x12, r24	; 18
	
	return received_data;
}
 236:	8d 2f       	mov	r24, r29
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <send_response>:

void send_response(uint8_t data)
{
	DATA_OUT;
 23e:	91 b3       	in	r25, 0x11	; 17
 240:	92 60       	ori	r25, 0x02	; 2
 242:	91 bb       	out	0x11, r25	; 17
 244:	95 e1       	ldi	r25, 0x15	; 21
 246:	9a 95       	dec	r25
 248:	f1 f7       	brne	.-4      	; 0x246 <send_response+0x8>
 24a:	00 00       	nop
	_delay_us(4);
	
	if (data == ACK)
 24c:	81 11       	cpse	r24, r1
 24e:	05 c0       	rjmp	.+10     	; 0x25a <send_response+0x1c>
	{
		ack_led();
 250:	77 d0       	rcall	.+238    	; 0x340 <ack_led>
		PORTD &= 0xFD;
 252:	82 b3       	in	r24, 0x12	; 18
 254:	8d 7f       	andi	r24, 0xFD	; 253
 256:	82 bb       	out	0x12, r24	; 18
 258:	06 c0       	rjmp	.+12     	; 0x266 <send_response+0x28>
	}
	else if (data == NOACK)
 25a:	82 30       	cpi	r24, 0x02	; 2
	{
		noack_led();
 25c:	21 f4       	brne	.+8      	; 0x266 <send_response+0x28>
 25e:	73 d0       	rcall	.+230    	; 0x346 <noack_led>
		PORTD |= 0x02;
 260:	82 b3       	in	r24, 0x12	; 18
 262:	82 60       	ori	r24, 0x02	; 2
 264:	82 bb       	out	0x12, r24	; 18
 266:	85 e1       	ldi	r24, 0x15	; 21
 268:	8a 95       	dec	r24
 26a:	f1 f7       	brne	.-4      	; 0x268 <send_response+0x2a>
 26c:	00 00       	nop
	}
	
	_delay_us(4);
	CLK_HIGH;
 26e:	82 b3       	in	r24, 0x12	; 18
 270:	81 60       	ori	r24, 0x01	; 1
 272:	82 bb       	out	0x12, r24	; 18
 274:	95 e1       	ldi	r25, 0x15	; 21
 276:	9a 95       	dec	r25
 278:	f1 f7       	brne	.-4      	; 0x276 <send_response+0x38>
 27a:	00 00       	nop
	_delay_us(4);
	CLK_LOW;
 27c:	82 b3       	in	r24, 0x12	; 18
 27e:	8e 7f       	andi	r24, 0xFE	; 254
 280:	82 bb       	out	0x12, r24	; 18
 282:	08 95       	ret

00000284 <i2c_device_address_setup>:
void i2c_device_address_setup(uint8_t device_id, uint8_t rw)
{
	uint8_t device_address = 0x00;
	device_address |= rw;
	device_address |= device_id;
	write_data(device_address);
 284:	86 2b       	or	r24, r22
 286:	52 df       	rcall	.-348    	; 0x12c <write_data>
	
	response = receive_response();
 288:	83 df       	rcall	.-250    	; 0x190 <receive_response>
 28a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 28e:	82 30       	cpi	r24, 0x02	; 2
	if (response == NOACK) { i2c_stop(); }
 290:	09 f4       	brne	.+2      	; 0x294 <i2c_device_address_setup+0x10>
 292:	33 cf       	rjmp	.-410    	; 0xfa <i2c_stop>
 294:	08 95       	ret

00000296 <i2c_address_setup>:
 296:	4a df       	rcall	.-364    	; 0x12c <write_data>

void i2c_address_setup(uint8_t address)
{
	write_data(address);
	
	response = receive_response();
 298:	7b df       	rcall	.-266    	; 0x190 <receive_response>
 29a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 29e:	82 30       	cpi	r24, 0x02	; 2
	if (response == NOACK) { i2c_stop(); }
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <i2c_address_setup+0xe>
 2a2:	2b cf       	rjmp	.-426    	; 0xfa <i2c_stop>
 2a4:	08 95       	ret

000002a6 <i2c_byte_write>:
 2a6:	42 df       	rcall	.-380    	; 0x12c <write_data>
}

void i2c_byte_write(uint8_t data)
{
	write_data(data);
	response = receive_response();
 2a8:	73 df       	rcall	.-282    	; 0x190 <receive_response>
 2aa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 2ae:	08 95       	ret

000002b0 <i2c_page_write>:
 2b0:	0f 93       	push	r16
}

void i2c_page_write(const uint8_t page[], uint8_t page_size)
{
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	8c 01       	movw	r16, r24
 2ba:	d6 2f       	mov	r29, r22
	uint8_t data_index;
	uint8_t temp_data;
	
	for (data_index = 0; data_index < page_size; ++data_index)
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
 2be:	09 c0       	rjmp	.+18     	; 0x2d2 <i2c_page_write+0x22>
	{
		temp_data = page[data_index];
 2c0:	f8 01       	movw	r30, r16
 2c2:	ec 0f       	add	r30, r28
 2c4:	f1 1d       	adc	r31, r1
		write_data(temp_data);
 2c6:	80 81       	ld	r24, Z
 2c8:	31 df       	rcall	.-414    	; 0x12c <write_data>
		
		response = receive_response();
 2ca:	62 df       	rcall	.-316    	; 0x190 <receive_response>
 2cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 2d0:	cf 5f       	subi	r28, 0xFF	; 255
void i2c_page_write(const uint8_t page[], uint8_t page_size)
{
	uint8_t data_index;
	uint8_t temp_data;
	
	for (data_index = 0; data_index < page_size; ++data_index)
 2d2:	cd 17       	cp	r28, r29
 2d4:	a8 f3       	brcs	.-22     	; 0x2c0 <i2c_page_write+0x10>
 2d6:	df 91       	pop	r29
		temp_data = page[data_index];
		write_data(temp_data);
		
		response = receive_response();
	}
}
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	08 95       	ret

000002e0 <i2c_byte_read>:
 2e0:	cf 93       	push	r28

void i2c_byte_read()
{
	uint8_t received_data;

	received_data = read_data();
 2e2:	84 df       	rcall	.-248    	; 0x1ec <read_data>
 2e4:	c8 2f       	mov	r28, r24
	
	send_response(NOACK);
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	aa df       	rcall	.-172    	; 0x23e <send_response>
	
	display_led(received_data);
 2ea:	8c 2f       	mov	r24, r28
 2ec:	2f d0       	rcall	.+94     	; 0x34c <display_led>
 2ee:	cf 91       	pop	r28
}
 2f0:	08 95       	ret

000002f2 <i2c_page_read>:
 2f2:	1f 93       	push	r17

void i2c_page_read(uint8_t page_size)
{
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	18 2f       	mov	r17, r24
	uint8_t data_index;
	uint8_t received_data;
	
	for (data_index = 0; data_index < page_size; ++data_index)
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <i2c_page_read+0x1a>
	{
		received_data = read_data();
 2fe:	76 df       	rcall	.-276    	; 0x1ec <read_data>
 300:	d8 2f       	mov	r29, r24
		page_buffer[data_index] = received_data;
		send_response(ACK);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	9c df       	rcall	.-200    	; 0x23e <send_response>
		
		display_led(received_data);
 306:	8d 2f       	mov	r24, r29
 308:	21 d0       	rcall	.+66     	; 0x34c <display_led>
 30a:	cf 5f       	subi	r28, 0xFF	; 255
void i2c_page_read(uint8_t page_size)
{
	uint8_t data_index;
	uint8_t received_data;
	
	for (data_index = 0; data_index < page_size; ++data_index)
 30c:	c1 17       	cp	r28, r17
 30e:	b8 f3       	brcs	.-18     	; 0x2fe <i2c_page_read+0xc>
		send_response(ACK);
		
		display_led(received_data);
	}
	
	send_response(NOACK);
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	95 df       	rcall	.-214    	; 0x23e <send_response>
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	08 95       	ret

0000031c <shift_left>:

uint8_t led = 0xFE;

uint8_t shift_left(uint8_t pattern)
{
	return ((pattern << 1) | (pattern >> 7));
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	88 1f       	adc	r24, r24
 326:	88 27       	eor	r24, r24
 328:	88 1f       	adc	r24, r24
}
 32a:	82 2b       	or	r24, r18
 32c:	08 95       	ret

0000032e <loading_led>:

void loading_led()
{
	PORTC = led;
 32e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 332:	85 bb       	out	0x15, r24	; 21
	led = shift_left(led);
 334:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 338:	f1 df       	rcall	.-30     	; 0x31c <shift_left>
 33a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 33e:	08 95       	ret

00000340 <ack_led>:
}

void ack_led()
{
	PORTC = 0xBF;
 340:	8f eb       	ldi	r24, 0xBF	; 191
 342:	85 bb       	out	0x15, r24	; 21
 344:	08 95       	ret

00000346 <noack_led>:
}

void noack_led()
{
	PORTC = 0x7F;
 346:	8f e7       	ldi	r24, 0x7F	; 127
 348:	85 bb       	out	0x15, r24	; 21
 34a:	08 95       	ret

0000034c <display_led>:
}

void display_led(uint8_t led_to_display)
{
	PORTC = led_to_display;
 34c:	85 bb       	out	0x15, r24	; 21
 34e:	08 95       	ret

00000350 <main>:

int main(void)
{
	uint8_t address_to_write = 0x00;
	
	CLK_OUT;
 350:	81 b3       	in	r24, 0x11	; 17
 352:	81 60       	ori	r24, 0x01	; 1
 354:	81 bb       	out	0x11, r24	; 17
	DATA_OUT;
 356:	81 b3       	in	r24, 0x11	; 17
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	81 bb       	out	0x11, r24	; 17
	
	DDRC = 0xFF;
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	84 bb       	out	0x14, r24	; 20
	DDRE = 0x00;
 360:	12 b8       	out	0x02, r1	; 2
	PORTC = 0xFF;
 362:	85 bb       	out	0x15, r24	; 21
	
    while (1) 
    {
		if ((PINE & 0x10) == 0)
 364:	0c 99       	sbic	0x01, 4	; 1
 366:	13 c0       	rjmp	.+38     	; 0x38e <main+0x3e>
		{
			i2c_start();
 368:	af de       	rcall	.-674    	; 0xc8 <i2c_start>
			
			i2c_device_address_setup(DEVICE_ID, DA_WRITE);	
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	80 ea       	ldi	r24, 0xA0	; 160
 36e:	8a df       	rcall	.-236    	; 0x284 <i2c_device_address_setup>
			i2c_address_setup(address_to_write);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	91 df       	rcall	.-222    	; 0x296 <i2c_address_setup>
 			i2c_byte_write(tmp_write);
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	97 df       	rcall	.-210    	; 0x2a6 <i2c_byte_write>
 378:	c0 de       	rcall	.-640    	; 0xfa <i2c_stop>
			 
 			i2c_stop();
 37a:	2f ef       	ldi	r18, 0xFF	; 255
 37c:	8b e7       	ldi	r24, 0x7B	; 123
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	92 e9       	ldi	r25, 0x92	; 146
 380:	21 50       	subi	r18, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <main+0x30>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x3a>
 38a:	00 00       	nop
 38c:	eb cf       	rjmp	.-42     	; 0x364 <main+0x14>
 38e:	0d 99       	sbic	0x01, 5	; 1
			 _delay_ms(3000);
		}
		else if ((PINE & 0x20) == 0)
 390:	15 c0       	rjmp	.+42     	; 0x3bc <main+0x6c>
		{
			i2c_start();
 392:	9a de       	rcall	.-716    	; 0xc8 <i2c_start>
			
			i2c_device_address_setup(DEVICE_ID, DA_WRITE);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	80 ea       	ldi	r24, 0xA0	; 160
 398:	75 df       	rcall	.-278    	; 0x284 <i2c_device_address_setup>
			i2c_address_setup(address_to_write);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	7c df       	rcall	.-264    	; 0x296 <i2c_address_setup>
 39e:	65 e0       	ldi	r22, 0x05	; 5
			i2c_page_write(tmp_page, 5);
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	85 df       	rcall	.-246    	; 0x2b0 <i2c_page_write>
 3a6:	a9 de       	rcall	.-686    	; 0xfa <i2c_stop>
 3a8:	2f ef       	ldi	r18, 0xFF	; 255
			
			i2c_stop();
 3aa:	8b e7       	ldi	r24, 0x7B	; 123
 3ac:	92 e9       	ldi	r25, 0x92	; 146
 3ae:	21 50       	subi	r18, 0x01	; 1
 3b0:	80 40       	sbci	r24, 0x00	; 0
 3b2:	90 40       	sbci	r25, 0x00	; 0
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x5e>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0x68>
 3b8:	00 00       	nop
 3ba:	d4 cf       	rjmp	.-88     	; 0x364 <main+0x14>
			_delay_ms(3000);
		}
		else if ((PINE & 0x40) == 0)
 3bc:	0e 99       	sbic	0x01, 6	; 1
		{
			i2c_start();
 3be:	16 c0       	rjmp	.+44     	; 0x3ec <main+0x9c>
			i2c_device_address_setup(DEVICE_ID, DA_WRITE);
 3c0:	83 de       	rcall	.-762    	; 0xc8 <i2c_start>
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	80 ea       	ldi	r24, 0xA0	; 160
 3c6:	5e df       	rcall	.-324    	; 0x284 <i2c_device_address_setup>
			i2c_address_setup(address_to_write);
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	65 df       	rcall	.-310    	; 0x296 <i2c_address_setup>
 3cc:	7d de       	rcall	.-774    	; 0xc8 <i2c_start>
			
			i2c_start();
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	80 ea       	ldi	r24, 0xA0	; 160
			i2c_device_address_setup(DEVICE_ID, DA_READ);
 3d2:	58 df       	rcall	.-336    	; 0x284 <i2c_device_address_setup>
 3d4:	85 df       	rcall	.-246    	; 0x2e0 <i2c_byte_read>
 3d6:	91 de       	rcall	.-734    	; 0xfa <i2c_stop>
			i2c_byte_read();
 3d8:	2f ef       	ldi	r18, 0xFF	; 255
 3da:	8b e7       	ldi	r24, 0x7B	; 123
			
			i2c_stop();
 3dc:	92 e9       	ldi	r25, 0x92	; 146
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x8e>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x98>
 3e8:	00 00       	nop
			_delay_ms(3000);
		}
		else if ((PINE & 0x80) == 0)
 3ea:	bc cf       	rjmp	.-136    	; 0x364 <main+0x14>
 3ec:	0f 99       	sbic	0x01, 7	; 1
		{
			i2c_start();
 3ee:	ba cf       	rjmp	.-140    	; 0x364 <main+0x14>
 3f0:	6b de       	rcall	.-810    	; 0xc8 <i2c_start>
			i2c_device_address_setup(DEVICE_ID, DA_WRITE);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	80 ea       	ldi	r24, 0xA0	; 160
 3f6:	46 df       	rcall	.-372    	; 0x284 <i2c_device_address_setup>
 3f8:	80 e0       	ldi	r24, 0x00	; 0
			i2c_address_setup(address_to_write);
 3fa:	4d df       	rcall	.-358    	; 0x296 <i2c_address_setup>
 3fc:	65 de       	rcall	.-822    	; 0xc8 <i2c_start>
 3fe:	61 e0       	ldi	r22, 0x01	; 1
			
			i2c_start();
 400:	80 ea       	ldi	r24, 0xA0	; 160
 402:	40 df       	rcall	.-384    	; 0x284 <i2c_device_address_setup>
			i2c_device_address_setup(DEVICE_ID, DA_READ);			
 404:	85 e0       	ldi	r24, 0x05	; 5
 406:	75 df       	rcall	.-278    	; 0x2f2 <i2c_page_read>
 408:	78 de       	rcall	.-784    	; 0xfa <i2c_stop>
 40a:	2f ef       	ldi	r18, 0xFF	; 255
			i2c_page_read(5);
 40c:	8b e7       	ldi	r24, 0x7B	; 123
 40e:	92 e9       	ldi	r25, 0x92	; 146
 410:	21 50       	subi	r18, 0x01	; 1
			
			i2c_stop();
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	a3 cf       	rjmp	.-186    	; 0x364 <main+0x14>

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
