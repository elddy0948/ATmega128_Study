
i2c_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  00000426  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001165  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2a  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e6  00000000  00000000  000021f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000574  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ae  00000000  00000000  000031e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000378e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f8 d0       	rcall	.+496    	; 0x2b4 <main>
  c4:	61 c1       	rjmp	.+706    	; 0x388 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <i2c_start>:
uint8_t response = 0x00;
static uint8_t page_buffer[PAGE_MAX] = {0x00};

void i2c_start()
{
	CLK_OUT;
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	81 bb       	out	0x11, r24	; 17
	DATA_OUT;
  ce:	81 b3       	in	r24, 0x11	; 17
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	81 bb       	out	0x11, r24	; 17
	DATA_HIGH;
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	82 bb       	out	0x12, r24	; 18
	CLK_HIGH;
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	82 bb       	out	0x12, r24	; 18
	DATA_LOW;
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	8d 7f       	andi	r24, 0xFD	; 253
  e4:	82 bb       	out	0x12, r24	; 18
	CLK_LOW;
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	08 95       	ret

000000ee <i2c_stop>:
}

void i2c_stop()
{
	CLK_OUT;
  ee:	81 b3       	in	r24, 0x11	; 17
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	81 bb       	out	0x11, r24	; 17
	DATA_OUT;
  f4:	81 b3       	in	r24, 0x11	; 17
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	81 bb       	out	0x11, r24	; 17
	DATA_LOW;
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	82 bb       	out	0x12, r24	; 18
	CLK_HIGH;
 100:	82 b3       	in	r24, 0x12	; 18
 102:	81 60       	ori	r24, 0x01	; 1
 104:	82 bb       	out	0x12, r24	; 18
	DATA_HIGH;
 106:	82 b3       	in	r24, 0x12	; 18
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	82 bb       	out	0x12, r24	; 18
	CLK_LOW;
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	82 bb       	out	0x12, r24	; 18
 112:	08 95       	ret

00000114 <write_data>:
}

void write_data(uint8_t data)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	d8 2f       	mov	r29, r24
	uint8_t i;
	DATA_OUT;
 11a:	81 b3       	in	r24, 0x11	; 17
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	81 bb       	out	0x11, r24	; 17
	
	for (i = 0; i < 8; ++i)
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	19 c0       	rjmp	.+50     	; 0x156 <write_data+0x42>
	{
		loading_led();
 124:	b2 d0       	rcall	.+356    	; 0x28a <loading_led>
		if (GET_BIT(data, i) == 0x80)
 126:	8d 2f       	mov	r24, r29
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0c 2e       	mov	r0, r28
 12c:	02 c0       	rjmp	.+4      	; 0x132 <write_data+0x1e>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <write_data+0x1a>
 136:	87 ff       	sbrs	r24, 7
 138:	04 c0       	rjmp	.+8      	; 0x142 <write_data+0x2e>
		{
			PORTD |= 0x02;
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	82 bb       	out	0x12, r24	; 18
 140:	03 c0       	rjmp	.+6      	; 0x148 <write_data+0x34>
		}
		else
		{
			PORTD &= 0xFD;
 142:	82 b3       	in	r24, 0x12	; 18
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	82 bb       	out	0x12, r24	; 18
		}
		CLK_HIGH;
 148:	82 b3       	in	r24, 0x12	; 18
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	82 bb       	out	0x12, r24	; 18
		CLK_LOW;
 14e:	82 b3       	in	r24, 0x12	; 18
 150:	8e 7f       	andi	r24, 0xFE	; 254
 152:	82 bb       	out	0x12, r24	; 18
void write_data(uint8_t data)
{
	uint8_t i;
	DATA_OUT;
	
	for (i = 0; i < 8; ++i)
 154:	cf 5f       	subi	r28, 0xFF	; 255
 156:	c8 30       	cpi	r28, 0x08	; 8
 158:	28 f3       	brcs	.-54     	; 0x124 <write_data+0x10>
			PORTD &= 0xFD;
		}
		CLK_HIGH;
		CLK_LOW;
	}
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <receive_response>:

uint8_t receive_response()
{
 160:	cf 93       	push	r28
	uint8_t t;
	
	DATA_IN;
 162:	81 b3       	in	r24, 0x11	; 17
 164:	8d 7f       	andi	r24, 0xFD	; 253
 166:	81 bb       	out	0x11, r24	; 17
	CLK_HIGH;
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	82 bb       	out	0x12, r24	; 18
	
	for (t = 0; t < 20; ++t)
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0b c0       	rjmp	.+22     	; 0x188 <receive_response+0x28>
	{	
		// Waiting for response
		if ((PIND & 0x02) == ACK)
 172:	90 b3       	in	r25, 0x10	; 16
 174:	c9 2f       	mov	r28, r25
 176:	c2 70       	andi	r28, 0x02	; 2
 178:	91 fd       	sbrc	r25, 1
 17a:	05 c0       	rjmp	.+10     	; 0x186 <receive_response+0x26>
		{
			ack_led();
 17c:	95 d0       	rcall	.+298    	; 0x2a8 <ack_led>
			CLK_LOW;
 17e:	82 b3       	in	r24, 0x12	; 18
 180:	8e 7f       	andi	r24, 0xFE	; 254
 182:	82 bb       	out	0x12, r24	; 18
			return ACK;
 184:	08 c0       	rjmp	.+16     	; 0x196 <receive_response+0x36>
	uint8_t t;
	
	DATA_IN;
	CLK_HIGH;
	
	for (t = 0; t < 20; ++t)
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	84 31       	cpi	r24, 0x14	; 20
			CLK_LOW;
			return ACK;
		}
	}
	
	noack_led();
 18a:	98 f3       	brcs	.-26     	; 0x172 <receive_response+0x12>
 18c:	90 d0       	rcall	.+288    	; 0x2ae <noack_led>
	CLK_LOW;
 18e:	82 b3       	in	r24, 0x12	; 18
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	82 bb       	out	0x12, r24	; 18
	return NOACK;
 194:	c2 e0       	ldi	r28, 0x02	; 2
}
 196:	8c 2f       	mov	r24, r28
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <read_data>:

uint8_t read_data()
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
	uint8_t received_data = 0x00;
	uint8_t i;
	
	DATA_IN;
 1a0:	81 b3       	in	r24, 0x11	; 17
 1a2:	8d 7f       	andi	r24, 0xFD	; 253
 1a4:	81 bb       	out	0x11, r24	; 17
	CLK_HIGH;
 1a6:	82 b3       	in	r24, 0x12	; 18
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	82 bb       	out	0x12, r24	; 18
	
	for (i = 0; i < 8; ++i)
 1ac:	c0 e0       	ldi	r28, 0x00	; 0
	return NOACK;
}

uint8_t read_data()
{
	uint8_t received_data = 0x00;
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	
	DATA_IN;
	CLK_HIGH;
	
	for (i = 0; i < 8; ++i)
 1b0:	06 c0       	rjmp	.+12     	; 0x1be <read_data+0x22>
	{
		loading_led();
 1b2:	6b d0       	rcall	.+214    	; 0x28a <loading_led>
		received_data |= ((PIND >> 1) & 0x01);
 1b4:	80 b3       	in	r24, 0x10	; 16
 1b6:	86 95       	lsr	r24
 1b8:	81 70       	andi	r24, 0x01	; 1
 1ba:	d8 2b       	or	r29, r24
	uint8_t i;
	
	DATA_IN;
	CLK_HIGH;
	
	for (i = 0; i < 8; ++i)
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
 1be:	c8 30       	cpi	r28, 0x08	; 8
 1c0:	c0 f3       	brcs	.-16     	; 0x1b2 <read_data+0x16>
		{ 
			received_data << 1;
		}
	}
	
	CLK_LOW;
 1c2:	82 b3       	in	r24, 0x12	; 18
 1c4:	8e 7f       	andi	r24, 0xFE	; 254
 1c6:	82 bb       	out	0x12, r24	; 18
	return received_data;
}
 1c8:	8d 2f       	mov	r24, r29
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <send_response>:

void send_response(uint8_t data)
{
	DATA_OUT;
 1d0:	91 b3       	in	r25, 0x11	; 17
 1d2:	92 60       	ori	r25, 0x02	; 2
 1d4:	91 bb       	out	0x11, r25	; 17
	
	if (data == ACK)
 1d6:	81 11       	cpse	r24, r1
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <send_response+0x14>
	{
		ack_led();
 1da:	66 d0       	rcall	.+204    	; 0x2a8 <ack_led>
		PORTD &= 0xFD;
 1dc:	82 b3       	in	r24, 0x12	; 18
 1de:	8d 7f       	andi	r24, 0xFD	; 253
 1e0:	82 bb       	out	0x12, r24	; 18
 1e2:	06 c0       	rjmp	.+12     	; 0x1f0 <send_response+0x20>
	}
	else if (data == NOACK)
 1e4:	82 30       	cpi	r24, 0x02	; 2
	{
		noack_led();
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <send_response+0x20>
 1e8:	62 d0       	rcall	.+196    	; 0x2ae <noack_led>
		PORTD |= 0x02;
 1ea:	82 b3       	in	r24, 0x12	; 18
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	82 bb       	out	0x12, r24	; 18
	}
	
	CLK_HIGH;
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	82 bb       	out	0x12, r24	; 18
	CLK_LOW;
 1f6:	82 b3       	in	r24, 0x12	; 18
 1f8:	8e 7f       	andi	r24, 0xFE	; 254
 1fa:	82 bb       	out	0x12, r24	; 18
 1fc:	08 95       	ret

000001fe <i2c_device_address_setup>:

void i2c_device_address_setup(uint8_t device_address)
{
	device_address = BASE_DEVICE_ADDRESS;
	device_address &= 0xFE;
	write_data(device_address);
 1fe:	80 ea       	ldi	r24, 0xA0	; 160
 200:	89 df       	rcall	.-238    	; 0x114 <write_data>
	
	response = receive_response();
 202:	ae df       	rcall	.-164    	; 0x160 <receive_response>
 204:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 208:	82 30       	cpi	r24, 0x02	; 2
	
	if (response == NOACK) { i2c_stop();}
 20a:	09 f4       	brne	.+2      	; 0x20e <i2c_device_address_setup+0x10>
 20c:	70 cf       	rjmp	.-288    	; 0xee <i2c_stop>
 20e:	08 95       	ret

00000210 <i2c_address_setup>:
 210:	80 e0       	ldi	r24, 0x00	; 0
}

void i2c_address_setup(uint8_t address)
{
	address = 0x00;
	write_data(address);
 212:	80 df       	rcall	.-256    	; 0x114 <write_data>
	response = receive_response();
 214:	a5 df       	rcall	.-182    	; 0x160 <receive_response>
 216:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 21a:	82 30       	cpi	r24, 0x02	; 2
	
	if (response == NOACK) { i2c_stop(); }
 21c:	09 f4       	brne	.+2      	; 0x220 <i2c_address_setup+0x10>
 21e:	67 cf       	rjmp	.-306    	; 0xee <i2c_stop>
 220:	08 95       	ret

00000222 <i2c_byte_write>:
 222:	8f ef       	ldi	r24, 0xFF	; 255

void i2c_byte_write(uint8_t data)
{
	// send data
	data = 0xFF;
	write_data(data);
 224:	77 df       	rcall	.-274    	; 0x114 <write_data>
	response = receive_response();
 226:	9c df       	rcall	.-200    	; 0x160 <receive_response>
 228:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 22c:	08 95       	ret

0000022e <i2c_page_write>:
 22e:	0f 93       	push	r16
}

void i2c_page_write(const uint8_t page[], uint8_t page_size)
{
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	8c 01       	movw	r16, r24
 238:	d6 2f       	mov	r29, r22
	uint8_t data_index;
	uint8_t temp_data;
	
	for (data_index = 0; data_index < page_size; ++data_index)
 23a:	c0 e0       	ldi	r28, 0x00	; 0
 23c:	12 c0       	rjmp	.+36     	; 0x262 <i2c_page_write+0x34>
	{
		temp_data = page[data_index];
 23e:	f8 01       	movw	r30, r16
 240:	ec 0f       	add	r30, r28
 242:	f1 1d       	adc	r31, r1
		write_data(temp_data);
 244:	80 81       	ld	r24, Z
 246:	66 df       	rcall	.-308    	; 0x114 <write_data>
		
		response = receive_response();
 248:	8b df       	rcall	.-234    	; 0x160 <receive_response>
 24a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	89 e6       	ldi	r24, 0x69	; 105
 252:	98 e1       	ldi	r25, 0x18	; 24
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <i2c_page_write+0x26>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <i2c_page_write+0x30>
 25e:	00 00       	nop
 260:	cf 5f       	subi	r28, 0xFF	; 255
void i2c_page_write(const uint8_t page[], uint8_t page_size)
{
	uint8_t data_index;
	uint8_t temp_data;
	
	for (data_index = 0; data_index < page_size; ++data_index)
 262:	cd 17       	cp	r28, r29
 264:	60 f3       	brcs	.-40     	; 0x23e <i2c_page_write+0x10>
 266:	df 91       	pop	r29
		write_data(temp_data);
		
		response = receive_response();
		_delay_ms(500);
	}
}
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <i2c_byte_read>:
 270:	95 df       	rcall	.-214    	; 0x19c <read_data>
{
	uint8_t received_data;

	received_data = read_data();
	
	send_response(NOACK);
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	ad cf       	rjmp	.-166    	; 0x1d0 <send_response>
 276:	08 95       	ret

00000278 <shift_left>:

uint8_t led = 0xFE;

uint8_t shift_left(uint8_t pattern)
{
	return ((pattern << 1) | (pattern >> 7));
 278:	28 2f       	mov	r18, r24
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	22 0f       	add	r18, r18
 27e:	33 1f       	adc	r19, r19
 280:	88 1f       	adc	r24, r24
 282:	88 27       	eor	r24, r24
 284:	88 1f       	adc	r24, r24
}
 286:	82 2b       	or	r24, r18
 288:	08 95       	ret

0000028a <loading_led>:

void loading_led()
{
	PORTC = led;
 28a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28e:	85 bb       	out	0x15, r24	; 21
	led = shift_left(led);
 290:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 294:	f1 df       	rcall	.-30     	; 0x278 <shift_left>
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 29a:	8f e7       	ldi	r24, 0x7F	; 127
 29c:	9e e3       	ldi	r25, 0x3E	; 62
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <loading_led+0x14>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <loading_led+0x1a>
 2a4:	00 00       	nop
 2a6:	08 95       	ret

000002a8 <ack_led>:
	_delay_ms(4);
}

void ack_led()
{
	PORTC = 0xBF;
 2a8:	8f eb       	ldi	r24, 0xBF	; 191
 2aa:	85 bb       	out	0x15, r24	; 21
 2ac:	08 95       	ret

000002ae <noack_led>:
}

void noack_led()
{
	PORTC = 0x7F;
 2ae:	8f e7       	ldi	r24, 0x7F	; 127
 2b0:	85 bb       	out	0x15, r24	; 21
 2b2:	08 95       	ret

000002b4 <main>:
int main(void)
{
	uint8_t device_address = 0xA0;
	uint8_t address_to_write = 0x00;
	
	CLK_OUT;
 2b4:	81 b3       	in	r24, 0x11	; 17
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	81 bb       	out	0x11, r24	; 17
	DATA_OUT;
 2ba:	81 b3       	in	r24, 0x11	; 17
 2bc:	82 60       	ori	r24, 0x02	; 2
 2be:	81 bb       	out	0x11, r24	; 17
	
	DDRC = 0xFF;
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	84 bb       	out	0x14, r24	; 20
	//DDRE &= 0x0F;
	DDRE = 0x00;
 2c4:	12 b8       	out	0x02, r1	; 2
	PORTC = 0xFF;
 2c6:	85 bb       	out	0x15, r24	; 21
const uint8_t tmp_write = 0xFF;
const uint8_t tmp_page[5] = {0xFF, 0xFE, 0xFD, 0xFC, 0xFB};

int main(void)
{
	uint8_t device_address = 0xA0;
 2c8:	c0 ea       	ldi	r28, 0xA0	; 160
	DDRE = 0x00;
	PORTC = 0xFF;
	
    while (1) 
    {
		if ((PINE & 0x10) == 0)
 2ca:	0c 99       	sbic	0x01, 4	; 1
 2cc:	25 c0       	rjmp	.+74     	; 0x318 <main+0x64>
		{
			i2c_start();
 2ce:	fc de       	rcall	.-520    	; 0xc8 <i2c_start>
			
			device_address &= 0xFE;
 2d0:	ce 7f       	andi	r28, 0xFE	; 254
			i2c_device_address_setup(device_address);
 2d2:	8c 2f       	mov	r24, r28
 2d4:	94 df       	rcall	.-216    	; 0x1fe <i2c_device_address_setup>
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	83 ed       	ldi	r24, 0xD3	; 211
 2da:	90 e3       	ldi	r25, 0x30	; 48
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x28>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x32>
			_delay_ms(1000);
			i2c_address_setup(address_to_write);
 2e6:	00 00       	nop
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	92 df       	rcall	.-220    	; 0x210 <i2c_address_setup>
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	83 ed       	ldi	r24, 0xD3	; 211
 2f0:	90 e3       	ldi	r25, 0x30	; 48
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x3e>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x48>
			_delay_ms(1000);
			i2c_byte_write(tmp_write);
 2fc:	00 00       	nop
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	90 df       	rcall	.-224    	; 0x222 <i2c_byte_write>
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	83 ed       	ldi	r24, 0xD3	; 211
 306:	90 e3       	ldi	r25, 0x30	; 48
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x54>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x5e>
			_delay_ms(1000);
			i2c_stop();
 312:	00 00       	nop
 314:	ec de       	rcall	.-552    	; 0xee <i2c_stop>
		}
		else if ((PINE & 0x20) == 0)
 316:	d9 cf       	rjmp	.-78     	; 0x2ca <main+0x16>
		{
			i2c_start();
 318:	0d 99       	sbic	0x01, 5	; 1
 31a:	27 c0       	rjmp	.+78     	; 0x36a <main+0xb6>
			
			device_address &= 0xFE;
 31c:	d5 de       	rcall	.-598    	; 0xc8 <i2c_start>
			i2c_device_address_setup(device_address);
 31e:	ce 7f       	andi	r28, 0xFE	; 254
 320:	8c 2f       	mov	r24, r28
 322:	6d df       	rcall	.-294    	; 0x1fe <i2c_device_address_setup>
 324:	2f ef       	ldi	r18, 0xFF	; 255
 326:	83 ed       	ldi	r24, 0xD3	; 211
 328:	90 e3       	ldi	r25, 0x30	; 48
 32a:	21 50       	subi	r18, 0x01	; 1
 32c:	80 40       	sbci	r24, 0x00	; 0
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0x76>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0x80>
			_delay_ms(1000);
			i2c_address_setup(address_to_write);
 334:	00 00       	nop
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	6b df       	rcall	.-298    	; 0x210 <i2c_address_setup>
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	83 ed       	ldi	r24, 0xD3	; 211
 33e:	90 e3       	ldi	r25, 0x30	; 48
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x8c>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x96>
			_delay_ms(1000);
			i2c_page_write(tmp_page, 5);
 34a:	00 00       	nop
 34c:	65 e0       	ldi	r22, 0x05	; 5
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	6d df       	rcall	.-294    	; 0x22e <i2c_page_write>
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	83 ed       	ldi	r24, 0xD3	; 211
 358:	90 e3       	ldi	r25, 0x30	; 48
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <main+0xa6>
			_delay_ms(1000);
			i2c_stop();
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0xb0>
		}
		else if ((PINE & 0x80) == 0)
 364:	00 00       	nop
		{
			i2c_start();
 366:	c3 de       	rcall	.-634    	; 0xee <i2c_stop>
			
			device_address &= 0xFE;
 368:	b0 cf       	rjmp	.-160    	; 0x2ca <main+0x16>
			i2c_device_address_setup(device_address);
 36a:	0f 99       	sbic	0x01, 7	; 1
 36c:	ae cf       	rjmp	.-164    	; 0x2ca <main+0x16>
 36e:	ac de       	rcall	.-680    	; 0xc8 <i2c_start>
			i2c_address_setup(address_to_write);
 370:	ce 7f       	andi	r28, 0xFE	; 254
 372:	8c 2f       	mov	r24, r28
 374:	44 df       	rcall	.-376    	; 0x1fe <i2c_device_address_setup>
			
			i2c_start();
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	4b df       	rcall	.-362    	; 0x210 <i2c_address_setup>
			
			device_address |= 0x01;
 37a:	a6 de       	rcall	.-692    	; 0xc8 <i2c_start>
			i2c_device_address_setup(device_address);
 37c:	c1 60       	ori	r28, 0x01	; 1
 37e:	8c 2f       	mov	r24, r28
 380:	3e df       	rcall	.-388    	; 0x1fe <i2c_device_address_setup>
			
			i2c_byte_read();
 382:	76 df       	rcall	.-276    	; 0x270 <i2c_byte_read>
 384:	b4 de       	rcall	.-664    	; 0xee <i2c_stop>
			
			i2c_stop();
 386:	a1 cf       	rjmp	.-190    	; 0x2ca <main+0x16>

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
