
i2c_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000046e  00000502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800106  00800106  00000508  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b5  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a68  00000000  00000000  00001af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000959  00000000  00000000  0000255d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b1  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a4  00000000  00000000  000035e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003f8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	62 d1       	rcall	.+708    	; 0x388 <main>
  c4:	d2 c1       	rjmp	.+932    	; 0x46a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <i2c_start>:
uint8_t response = 0x00;
static uint8_t page_buffer[PAGE_MAX] = {0x00};

void i2c_start(void)
{
	CLK_OUT;
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	81 bb       	out	0x11, r24	; 17
	DATA_OUT;
  ce:	81 b3       	in	r24, 0x11	; 17
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	81 bb       	out	0x11, r24	; 17
	DATA_HIGH;
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	82 bb       	out	0x12, r24	; 18
	CLK_HIGH;
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <i2c_start+0x1a>
	_delay_us(6);
	DATA_LOW;
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	8d 7f       	andi	r24, 0xFD	; 253
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <i2c_start+0x26>
	_delay_us(6);
	CLK_LOW;
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	08 95       	ret

000000fa <i2c_stop>:
}

void i2c_stop(void)
{
	CLK_OUT;
  fa:	81 b3       	in	r24, 0x11	; 17
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	81 bb       	out	0x11, r24	; 17
	DATA_OUT;
 100:	81 b3       	in	r24, 0x11	; 17
 102:	82 60       	ori	r24, 0x02	; 2
 104:	81 bb       	out	0x11, r24	; 17
	DATA_LOW;
 106:	82 b3       	in	r24, 0x12	; 18
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	82 bb       	out	0x12, r24	; 18
	CLK_HIGH;
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	82 bb       	out	0x12, r24	; 18
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <i2c_stop+0x1a>
	_delay_us(6);
	DATA_HIGH;
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	80 e2       	ldi	r24, 0x20	; 32
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <i2c_stop+0x26>
	_delay_us(6);
	CLK_LOW;
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	82 bb       	out	0x12, r24	; 18
 12a:	08 95       	ret

0000012c <write_data>:
}

void write_data(uint8_t data)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	d8 2f       	mov	r29, r24
	uint8_t i;
	uint8_t data_buffer = data;

	DATA_OUT;
 132:	81 b3       	in	r24, 0x11	; 17
 134:	82 60       	ori	r24, 0x02	; 2
 136:	81 bb       	out	0x11, r24	; 17
	
	for (i = 0; i < 7; ++i)
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	24 c0       	rjmp	.+72     	; 0x184 <write_data+0x58>
	{
		loading_led();
 13c:	1a d1       	rcall	.+564    	; 0x372 <loading_led>
		if (GET_BIT(data_buffer, i) == 0x80)
 13e:	8d 2f       	mov	r24, r29
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0c 2e       	mov	r0, r28
 144:	02 c0       	rjmp	.+4      	; 0x14a <write_data+0x1e>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <write_data+0x1a>
 14e:	87 ff       	sbrs	r24, 7
 150:	04 c0       	rjmp	.+8      	; 0x15a <write_data+0x2e>
		{
			DATA_HIGH;
 152:	82 b3       	in	r24, 0x12	; 18
 154:	82 60       	ori	r24, 0x02	; 2
 156:	82 bb       	out	0x12, r24	; 18
 158:	03 c0       	rjmp	.+6      	; 0x160 <write_data+0x34>
		}
		else 
		{
			DATA_LOW;
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	82 bb       	out	0x12, r24	; 18
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <write_data+0x36>
		}
		
		_delay_us(3);
		CLK_HIGH;
 166:	82 b3       	in	r24, 0x12	; 18
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	8a e1       	ldi	r24, 0x1A	; 26
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <write_data+0x42>
 172:	00 c0       	rjmp	.+0      	; 0x174 <write_data+0x48>
		_delay_us(5);
		CLK_LOW;
 174:	82 b3       	in	r24, 0x12	; 18
 176:	8e 7f       	andi	r24, 0xFE	; 254
 178:	82 bb       	out	0x12, r24	; 18
 17a:	8a e1       	ldi	r24, 0x1A	; 26
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <write_data+0x50>
 180:	00 c0       	rjmp	.+0      	; 0x182 <write_data+0x56>
	uint8_t i;
	uint8_t data_buffer = data;

	DATA_OUT;
	
	for (i = 0; i < 7; ++i)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c7 30       	cpi	r28, 0x07	; 7
 186:	d0 f2       	brcs	.-76     	; 0x13c <write_data+0x10>
		_delay_us(5);
		CLK_LOW;
		_delay_us(5);
	}
	
	if (((data_buffer << i) & 0x80) == 0x80) DATA_HIGH;
 188:	8d 2f       	mov	r24, r29
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <write_data+0x66>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	ca 95       	dec	r28
 194:	e2 f7       	brpl	.-8      	; 0x18e <write_data+0x62>
 196:	87 ff       	sbrs	r24, 7
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <write_data+0x76>
 19a:	82 b3       	in	r24, 0x12	; 18
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	82 bb       	out	0x12, r24	; 18
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <write_data+0x7c>
	else DATA_LOW;
 1a2:	82 b3       	in	r24, 0x12	; 18
 1a4:	8d 7f       	andi	r24, 0xFD	; 253
 1a6:	82 bb       	out	0x12, r24	; 18
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <write_data+0x7e>
	
	_delay_us(3);
	CLK_HIGH;
 1ae:	82 b3       	in	r24, 0x12	; 18
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	82 bb       	out	0x12, r24	; 18
 1b4:	8a e1       	ldi	r24, 0x1A	; 26
 1b6:	8a 95       	dec	r24
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <write_data+0x8a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <write_data+0x90>
	_delay_us(5);
	CLK_LOW;
 1bc:	82 b3       	in	r24, 0x12	; 18
 1be:	8e 7f       	andi	r24, 0xFE	; 254
 1c0:	82 bb       	out	0x12, r24	; 18
 1c2:	8a e1       	ldi	r24, 0x1A	; 26
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <write_data+0x98>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <write_data+0x9e>
	_delay_us(5);
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <receive_response>:

uint8_t receive_response(void)
{
	uint8_t t;
	
	DATA_IN;
 1d0:	81 b3       	in	r24, 0x11	; 17
 1d2:	8d 7f       	andi	r24, 0xFD	; 253
 1d4:	81 bb       	out	0x11, r24	; 17
	CLK_HIGH;
 1d6:	82 b3       	in	r24, 0x12	; 18
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	82 bb       	out	0x12, r24	; 18
	
	for (t = 0; t < 20; ++t)
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	13 c0       	rjmp	.+38     	; 0x206 <receive_response+0x36>
	{	
		if ((PIND & 0x02) == ACK)
 1e0:	20 b3       	in	r18, 0x10	; 16
 1e2:	82 2f       	mov	r24, r18
 1e4:	82 70       	andi	r24, 0x02	; 2
 1e6:	21 fd       	sbrc	r18, 1
 1e8:	0d c0       	rjmp	.+26     	; 0x204 <receive_response+0x34>
 1ea:	90 e2       	ldi	r25, 0x20	; 32
 1ec:	9a 95       	dec	r25
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <receive_response+0x1c>
		{
			_delay_us(6);			
			CLK_LOW;
 1f0:	92 b3       	in	r25, 0x12	; 18
 1f2:	9e 7f       	andi	r25, 0xFE	; 254
 1f4:	92 bb       	out	0x12, r25	; 18
			DATA_OUT;
 1f6:	91 b3       	in	r25, 0x11	; 17
 1f8:	92 60       	ori	r25, 0x02	; 2
 1fa:	91 bb       	out	0x11, r25	; 17
 1fc:	90 e2       	ldi	r25, 0x20	; 32
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <receive_response+0x2e>
			_delay_us(6);
			return ACK;
 202:	08 95       	ret
	uint8_t t;
	
	DATA_IN;
	CLK_HIGH;
	
	for (t = 0; t < 20; ++t)
 204:	9f 5f       	subi	r25, 0xFF	; 255
 206:	94 31       	cpi	r25, 0x14	; 20
 208:	58 f3       	brcs	.-42     	; 0x1e0 <receive_response+0x10>
 20a:	80 e2       	ldi	r24, 0x20	; 32
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <receive_response+0x3c>
			return ACK;
		}
	}
	
	_delay_us(6);
	CLK_LOW;
 210:	82 b3       	in	r24, 0x12	; 18
 212:	8e 7f       	andi	r24, 0xFE	; 254
 214:	82 bb       	out	0x12, r24	; 18
	DATA_OUT;
 216:	81 b3       	in	r24, 0x11	; 17
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	81 bb       	out	0x11, r24	; 17
 21c:	90 e2       	ldi	r25, 0x20	; 32
 21e:	9a 95       	dec	r25
 220:	f1 f7       	brne	.-4      	; 0x21e <receive_response+0x4e>
	_delay_us(6);
	
	return NOACK;
 222:	82 e0       	ldi	r24, 0x02	; 2
}
 224:	08 95       	ret

00000226 <read_data>:

uint8_t read_data(void)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
	uint8_t data_buffer = 0x00;
	uint8_t i;
	
	DATA_IN;
 22a:	81 b3       	in	r24, 0x11	; 17
 22c:	8d 7f       	andi	r24, 0xFD	; 253
 22e:	81 bb       	out	0x11, r24	; 17
	
	for (i = 0; i < 8; ++i)
 230:	c0 e0       	ldi	r28, 0x00	; 0
	return NOACK;
}

uint8_t read_data(void)
{
	uint8_t data_buffer = 0x00;
 232:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	
	DATA_IN;
	
	for (i = 0; i < 8; ++i)
 234:	16 c0       	rjmp	.+44     	; 0x262 <read_data+0x3c>
	{
		loading_led();
 236:	9d d0       	rcall	.+314    	; 0x372 <loading_led>
		CLK_HIGH;
 238:	82 b3       	in	r24, 0x12	; 18
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	82 bb       	out	0x12, r24	; 18
 23e:	85 e3       	ldi	r24, 0x35	; 53
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <read_data+0x1a>
 244:	00 00       	nop
		_delay_us(10);
		CLK_LOW;
 246:	82 b3       	in	r24, 0x12	; 18
 248:	8e 7f       	andi	r24, 0xFE	; 254
 24a:	82 bb       	out	0x12, r24	; 18
		data_buffer |= ((PIND >> 1) & 0x01);
 24c:	80 b3       	in	r24, 0x10	; 16
 24e:	86 95       	lsr	r24
 250:	81 70       	andi	r24, 0x01	; 1
 252:	d8 2b       	or	r29, r24
		if (i != 7) 
 254:	c7 30       	cpi	r28, 0x07	; 7
 256:	09 f0       	breq	.+2      	; 0x25a <read_data+0x34>
		{ 
			data_buffer <<= 1;
 258:	dd 0f       	add	r29, r29
 25a:	80 e1       	ldi	r24, 0x10	; 16
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <read_data+0x36>
	uint8_t data_buffer = 0x00;
	uint8_t i;
	
	DATA_IN;
	
	for (i = 0; i < 8; ++i)
 260:	cf 5f       	subi	r28, 0xFF	; 255
 262:	c8 30       	cpi	r28, 0x08	; 8
 264:	40 f3       	brcs	.-48     	; 0x236 <read_data+0x10>
		}
		_delay_us(3);
	}
	
	return data_buffer;
}
 266:	8d 2f       	mov	r24, r29
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <send_response>:

void send_response(uint8_t data)
{
	DATA_OUT;
 26e:	91 b3       	in	r25, 0x11	; 17
 270:	92 60       	ori	r25, 0x02	; 2
 272:	91 bb       	out	0x11, r25	; 17

	if (data == ACK)
 274:	81 11       	cpse	r24, r1
 276:	04 c0       	rjmp	.+8      	; 0x280 <send_response+0x12>
		SEND_ACK;
 278:	82 b3       	in	r24, 0x12	; 18
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	82 bb       	out	0x12, r24	; 18
 27e:	05 c0       	rjmp	.+10     	; 0x28a <send_response+0x1c>
	else if (data == NOACK)
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	19 f4       	brne	.+6      	; 0x28a <send_response+0x1c>
		SEND_NOACK;
 284:	82 b3       	in	r24, 0x12	; 18
 286:	82 60       	ori	r24, 0x02	; 2
 288:	82 bb       	out	0x12, r24	; 18
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <send_response+0x1e>
	
	_delay_us(3);
	CLK_HIGH;
 290:	82 b3       	in	r24, 0x12	; 18
 292:	81 60       	ori	r24, 0x01	; 1
 294:	82 bb       	out	0x12, r24	; 18
 296:	8a e1       	ldi	r24, 0x1A	; 26
 298:	8a 95       	dec	r24
 29a:	f1 f7       	brne	.-4      	; 0x298 <send_response+0x2a>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <send_response+0x30>
	_delay_us(5);
	CLK_LOW;
 29e:	82 b3       	in	r24, 0x12	; 18
 2a0:	8e 7f       	andi	r24, 0xFE	; 254
 2a2:	82 bb       	out	0x12, r24	; 18
 2a4:	8a e1       	ldi	r24, 0x1A	; 26
 2a6:	8a 95       	dec	r24
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <send_response+0x38>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <send_response+0x3e>
 2ac:	08 95       	ret

000002ae <i2c_device_address_setup>:

void i2c_device_address_setup(uint8_t device_id, uint16_t target_address, uint8_t rw)
{
	uint8_t device_address = 0x00;

	if (((target_address >> 9) & 0x0001) == 0x0001)
 2ae:	71 fd       	sbrc	r23, 1
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <i2c_device_address_setup+0xc>
		SET_A9(device_address);
	else if (((target_address >> 8) & 0x0001) == 0x0001)
 2b2:	70 fd       	sbrc	r23, 0
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <i2c_device_address_setup+0x10>
	_delay_us(5);
}

void i2c_device_address_setup(uint8_t device_id, uint16_t target_address, uint8_t rw)
{
	uint8_t device_address = 0x00;
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <i2c_device_address_setup+0x12>

	if (((target_address >> 9) & 0x0001) == 0x0001)
		SET_A9(device_address);
 2ba:	94 e0       	ldi	r25, 0x04	; 4
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <i2c_device_address_setup+0x12>
	else if (((target_address >> 8) & 0x0001) == 0x0001)
		SET_A8(device_address);
 2be:	92 e0       	ldi	r25, 0x02	; 2
	
	device_address |= rw;
 2c0:	49 2b       	or	r20, r25
	device_address |= device_id;
	
	write_data(device_address);
 2c2:	84 2b       	or	r24, r20
 2c4:	33 df       	rcall	.-410    	; 0x12c <write_data>
	
	response = receive_response();
 2c6:	84 df       	rcall	.-248    	; 0x1d0 <receive_response>
 2c8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 2cc:	82 30       	cpi	r24, 0x02	; 2
	
	if (response == NOACK) { i2c_stop(); }
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <i2c_device_address_setup+0x24>
 2d0:	14 cf       	rjmp	.-472    	; 0xfa <i2c_stop>
 2d2:	08 95       	ret

000002d4 <i2c_address_setup>:
 2d4:	2b df       	rcall	.-426    	; 0x12c <write_data>
{
	uint8_t address = (uint8_t)target_address;

	write_data(address);
	
	response = receive_response();
 2d6:	7c df       	rcall	.-264    	; 0x1d0 <receive_response>
 2d8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 2dc:	82 30       	cpi	r24, 0x02	; 2
	
	if (response == NOACK) { i2c_stop(); }
 2de:	09 f4       	brne	.+2      	; 0x2e2 <i2c_address_setup+0xe>
 2e0:	0c cf       	rjmp	.-488    	; 0xfa <i2c_stop>
 2e2:	08 95       	ret

000002e4 <i2c_byte_write>:
 2e4:	23 df       	rcall	.-442    	; 0x12c <write_data>
}

void i2c_byte_write(uint8_t data)
{
	write_data(data);
	response = receive_response();
 2e6:	74 df       	rcall	.-280    	; 0x1d0 <receive_response>
 2e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 2ec:	08 95       	ret

000002ee <i2c_page_write>:
 2ee:	0f 93       	push	r16
}

void i2c_page_write(const uint8_t page[], uint8_t page_size)
{
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	8c 01       	movw	r16, r24
 2f8:	d6 2f       	mov	r29, r22
	uint8_t data_index;
	uint8_t data_buffer = 0x00;
	
	for (data_index = 0; data_index < page_size; ++data_index)
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
 2fc:	09 c0       	rjmp	.+18     	; 0x310 <i2c_page_write+0x22>
	{
		data_buffer = page[data_index];
 2fe:	f8 01       	movw	r30, r16
 300:	ec 0f       	add	r30, r28
 302:	f1 1d       	adc	r31, r1
		
		write_data(data_buffer);
 304:	80 81       	ld	r24, Z
 306:	12 df       	rcall	.-476    	; 0x12c <write_data>
		
		response = receive_response();
 308:	63 df       	rcall	.-314    	; 0x1d0 <receive_response>
 30a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 30e:	cf 5f       	subi	r28, 0xFF	; 255
void i2c_page_write(const uint8_t page[], uint8_t page_size)
{
	uint8_t data_index;
	uint8_t data_buffer = 0x00;
	
	for (data_index = 0; data_index < page_size; ++data_index)
 310:	cd 17       	cp	r28, r29
 312:	a8 f3       	brcs	.-22     	; 0x2fe <i2c_page_write+0x10>
 314:	df 91       	pop	r29
		
		write_data(data_buffer);
		
		response = receive_response();
	}
}
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	08 95       	ret

0000031e <i2c_byte_read>:
 31e:	cf 93       	push	r28

void i2c_byte_read(void)
{
	uint8_t data_buffer;

	data_buffer = read_data();
 320:	82 df       	rcall	.-252    	; 0x226 <read_data>
 322:	c8 2f       	mov	r28, r24
	
	send_response(NOACK);
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	a3 df       	rcall	.-186    	; 0x26e <send_response>
	
	display_led(data_buffer);
 328:	8c 2f       	mov	r24, r28
 32a:	2c d0       	rcall	.+88     	; 0x384 <display_led>
 32c:	cf 91       	pop	r28
}
 32e:	08 95       	ret

00000330 <i2c_page_read>:
 330:	1f 93       	push	r17

void i2c_page_read(uint8_t page_size)
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	18 2f       	mov	r17, r24
	uint8_t data_index;
	uint8_t data_buffer = 0x00;
 338:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (data_index = 0; data_index < page_size; ++data_index)
 33a:	c0 e0       	ldi	r28, 0x00	; 0
 33c:	07 c0       	rjmp	.+14     	; 0x34c <i2c_page_read+0x1c>
	{
		data_buffer = read_data();
 33e:	73 df       	rcall	.-282    	; 0x226 <read_data>
 340:	d8 2f       	mov	r29, r24
		page_buffer[data_index] = data_buffer;
		
		send_response(ACK);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	94 df       	rcall	.-216    	; 0x26e <send_response>
		
		display_led(data_buffer);
 346:	8d 2f       	mov	r24, r29
 348:	1d d0       	rcall	.+58     	; 0x384 <display_led>
 34a:	cf 5f       	subi	r28, 0xFF	; 255
void i2c_page_read(uint8_t page_size)
{
	uint8_t data_index;
	uint8_t data_buffer = 0x00;
	
	for (data_index = 0; data_index < page_size; ++data_index)
 34c:	c1 17       	cp	r28, r17
 34e:	b8 f3       	brcs	.-18     	; 0x33e <i2c_page_read+0xe>
		send_response(ACK);
		
		display_led(data_buffer);
	}
	
	send_response(NOACK);
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	8d df       	rcall	.-230    	; 0x26e <send_response>
	
	display_led(data_buffer);
 354:	8d 2f       	mov	r24, r29
 356:	16 d0       	rcall	.+44     	; 0x384 <display_led>
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	08 95       	ret

00000360 <shift_left>:

uint8_t led = 0xFE;

uint8_t shift_left(uint8_t pattern)
{
	return ((pattern << 1) | (pattern >> 7));
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	88 1f       	adc	r24, r24
 36a:	88 27       	eor	r24, r24
 36c:	88 1f       	adc	r24, r24
}
 36e:	82 2b       	or	r24, r18
 370:	08 95       	ret

00000372 <loading_led>:

void loading_led()
{
	PORTC = led;
 372:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 376:	85 bb       	out	0x15, r24	; 21
	led = shift_left(led);
 378:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 37c:	f1 df       	rcall	.-30     	; 0x360 <shift_left>
 37e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 382:	08 95       	ret

00000384 <display_led>:
}

void display_led(uint8_t led_to_display)
{
	PORTC = led_to_display;
 384:	85 bb       	out	0x15, r24	; 21
 386:	08 95       	ret

00000388 <main>:
uint8_t prev_state = 0x00;
uint8_t curr_state = 0x00;

void main(void)
{
	CLK_OUT;
 388:	81 b3       	in	r24, 0x11	; 17
 38a:	81 60       	ori	r24, 0x01	; 1
 38c:	81 bb       	out	0x11, r24	; 17
	DATA_OUT;
 38e:	81 b3       	in	r24, 0x11	; 17
 390:	82 60       	ori	r24, 0x02	; 2
 392:	81 bb       	out	0x11, r24	; 17
	
	DDRC = 0xFF;
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	84 bb       	out	0x14, r24	; 20
	DDRE = 0x00;
 398:	12 b8       	out	0x02, r1	; 2
	PORTC = 0xFF;
 39a:	85 bb       	out	0x15, r24	; 21
	
    while (1) 
    {
		curr_state = PINE;
 39c:	91 b1       	in	r25, 0x01	; 1
 39e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <curr_state>
		
		if (ALL_SWITCH_OFF(prev_state) && SWITCH4_ON(curr_state))
 3a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <prev_state>
 3a6:	80 7f       	andi	r24, 0xF0	; 240
 3a8:	80 3f       	cpi	r24, 0xF0	; 240
 3aa:	71 f4       	brne	.+28     	; 0x3c8 <main+0x40>
 3ac:	94 fd       	sbrc	r25, 4
 3ae:	0c c0       	rjmp	.+24     	; 0x3c8 <main+0x40>
		{
			i2c_start();
 3b0:	8b de       	rcall	.-746    	; 0xc8 <i2c_start>
			
			i2c_device_address_setup(DEVICE_ID, address_to_write, DA_WRITE);	
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	72 e0       	ldi	r23, 0x02	; 2
 3b8:	80 ea       	ldi	r24, 0xA0	; 160
 3ba:	79 df       	rcall	.-270    	; 0x2ae <i2c_device_address_setup>
			i2c_address_setup(address_to_write);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	92 e0       	ldi	r25, 0x02	; 2
 			i2c_byte_write(tmp_write);
 3c0:	89 df       	rcall	.-238    	; 0x2d4 <i2c_address_setup>
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	8f df       	rcall	.-226    	; 0x2e4 <i2c_byte_write>
			 
 			i2c_stop();
 3c6:	99 de       	rcall	.-718    	; 0xfa <i2c_stop>
 3c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <prev_state>
		}
		if (ALL_SWITCH_OFF(prev_state) && SWITCH5_ON(curr_state))
 3cc:	80 7f       	andi	r24, 0xF0	; 240
 3ce:	80 3f       	cpi	r24, 0xF0	; 240
 3d0:	91 f4       	brne	.+36     	; 0x3f6 <main+0x6e>
 3d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <curr_state>
 3d6:	85 fd       	sbrc	r24, 5
 3d8:	0e c0       	rjmp	.+28     	; 0x3f6 <main+0x6e>
		{
			i2c_start();
 3da:	76 de       	rcall	.-788    	; 0xc8 <i2c_start>
			
			i2c_device_address_setup(DEVICE_ID,address_to_write, DA_WRITE);
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	72 e0       	ldi	r23, 0x02	; 2
 3e2:	80 ea       	ldi	r24, 0xA0	; 160
 3e4:	64 df       	rcall	.-312    	; 0x2ae <i2c_device_address_setup>
			i2c_address_setup(address_to_write);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	92 e0       	ldi	r25, 0x02	; 2
 3ea:	74 df       	rcall	.-280    	; 0x2d4 <i2c_address_setup>
			i2c_page_write(tmp_page, PAGE_SIZE(tmp_page));
 3ec:	65 e0       	ldi	r22, 0x05	; 5
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	7d df       	rcall	.-262    	; 0x2ee <i2c_page_write>
 3f4:	82 de       	rcall	.-764    	; 0xfa <i2c_stop>
			
			i2c_stop();
 3f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <prev_state>
		}
		if (ALL_SWITCH_OFF(prev_state) && SWITCH6_ON(curr_state))
 3fa:	80 7f       	andi	r24, 0xF0	; 240
 3fc:	80 3f       	cpi	r24, 0xF0	; 240
 3fe:	a9 f4       	brne	.+42     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 400:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <curr_state>
 404:	86 fd       	sbrc	r24, 6
		{
			i2c_start();
 406:	11 c0       	rjmp	.+34     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 408:	5f de       	rcall	.-834    	; 0xc8 <i2c_start>
			i2c_device_address_setup(DEVICE_ID, address_to_write, DA_WRITE);
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	72 e0       	ldi	r23, 0x02	; 2
 410:	80 ea       	ldi	r24, 0xA0	; 160
			i2c_address_setup(address_to_write);
 412:	4d df       	rcall	.-358    	; 0x2ae <i2c_device_address_setup>
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	92 e0       	ldi	r25, 0x02	; 2
 418:	5d df       	rcall	.-326    	; 0x2d4 <i2c_address_setup>
			
			i2c_start();
 41a:	56 de       	rcall	.-852    	; 0xc8 <i2c_start>
 41c:	41 e0       	ldi	r20, 0x01	; 1
			i2c_device_address_setup(DEVICE_ID, address_to_write, DA_READ);
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	72 e0       	ldi	r23, 0x02	; 2
 422:	80 ea       	ldi	r24, 0xA0	; 160
 424:	44 df       	rcall	.-376    	; 0x2ae <i2c_device_address_setup>
 426:	7b df       	rcall	.-266    	; 0x31e <i2c_byte_read>
			i2c_byte_read();
 428:	68 de       	rcall	.-816    	; 0xfa <i2c_stop>
			
			i2c_stop();
 42a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <prev_state>
		}
		if (ALL_SWITCH_OFF(prev_state) && SWITCH7_ON(curr_state))
 42e:	80 7f       	andi	r24, 0xF0	; 240
 430:	80 3f       	cpi	r24, 0xF0	; 240
 432:	b1 f4       	brne	.+44     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 434:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <curr_state>
 438:	88 23       	and	r24, r24
		{
			i2c_start();
 43a:	94 f0       	brlt	.+36     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
			i2c_device_address_setup(DEVICE_ID,address_to_write, DA_WRITE);
 43c:	45 de       	rcall	.-886    	; 0xc8 <i2c_start>
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	72 e0       	ldi	r23, 0x02	; 2
 444:	80 ea       	ldi	r24, 0xA0	; 160
 446:	33 df       	rcall	.-410    	; 0x2ae <i2c_device_address_setup>
			i2c_address_setup(address_to_write);
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	92 e0       	ldi	r25, 0x02	; 2
 44c:	43 df       	rcall	.-378    	; 0x2d4 <i2c_address_setup>
 44e:	3c de       	rcall	.-904    	; 0xc8 <i2c_start>
			
			i2c_start();
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	61 e0       	ldi	r22, 0x01	; 1
			i2c_device_address_setup(DEVICE_ID, address_to_write, DA_READ);			
 454:	72 e0       	ldi	r23, 0x02	; 2
 456:	80 ea       	ldi	r24, 0xA0	; 160
 458:	2a df       	rcall	.-428    	; 0x2ae <i2c_device_address_setup>
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	69 df       	rcall	.-302    	; 0x330 <i2c_page_read>
 45e:	4d de       	rcall	.-870    	; 0xfa <i2c_stop>
			i2c_page_read(5);
 460:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <curr_state>
 464:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <prev_state>
			
			i2c_stop();
 468:	99 cf       	rjmp	.-206    	; 0x39c <main+0x14>

0000046a <_exit>:
		}
		
		prev_state = curr_state;
 46a:	f8 94       	cli

0000046c <__stop_program>:
 46c:	ff cf       	rjmp	.-2      	; 0x46c <__stop_program>
