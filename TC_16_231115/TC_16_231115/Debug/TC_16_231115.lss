
TC_16_231115.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000434  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000434  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  000004d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000baf  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f9  00000000  00000000  0000116b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000507  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000311  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002875  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__vector_5>
  16:	00 00       	nop
  18:	b5 c0       	rjmp	.+362    	; 0x184 <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a1 d1       	rcall	.+834    	; 0x406 <main>
  c4:	b5 c1       	rjmp	.+874    	; 0x430 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_5>:
uint8_t hours = 0;
uint8_t numbers[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
uint8_t position = 0;

ISR(INT4_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	cli();
  da:	f8 94       	cli
	PORTC = 0xFE;
  dc:	8e ef       	ldi	r24, 0xFE	; 254
  de:	85 bb       	out	0x15, r24	; 21
	if (position == 0)
  e0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  e4:	81 11       	cpse	r24, r1
  e6:	10 c0       	rjmp	.+32     	; 0x108 <__vector_5+0x40>
	{
		mins++;
  e8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <mins>
  ec:	9f 5f       	subi	r25, 0xFF	; 255
		mins = mins % 60;
  ee:	29 e8       	ldi	r18, 0x89	; 137
  f0:	92 9f       	mul	r25, r18
  f2:	21 2d       	mov	r18, r1
  f4:	11 24       	eor	r1, r1
  f6:	22 95       	swap	r18
  f8:	26 95       	lsr	r18
  fa:	27 70       	andi	r18, 0x07	; 7
  fc:	3c e3       	ldi	r19, 0x3C	; 60
  fe:	23 9f       	mul	r18, r19
 100:	90 19       	sub	r25, r0
 102:	11 24       	eor	r1, r1
 104:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <mins>
	}
	if (position == 1)
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	81 f4       	brne	.+32     	; 0x12c <__vector_5+0x64>
	{
		mins += 10;
 10c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <mins>
 110:	96 5f       	subi	r25, 0xF6	; 246
		mins = mins % 60;
 112:	29 e8       	ldi	r18, 0x89	; 137
 114:	92 9f       	mul	r25, r18
 116:	21 2d       	mov	r18, r1
 118:	11 24       	eor	r1, r1
 11a:	22 95       	swap	r18
 11c:	26 95       	lsr	r18
 11e:	27 70       	andi	r18, 0x07	; 7
 120:	3c e3       	ldi	r19, 0x3C	; 60
 122:	23 9f       	mul	r18, r19
 124:	90 19       	sub	r25, r0
 126:	11 24       	eor	r1, r1
 128:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <mins>
	}
	if (position == 2)
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	79 f4       	brne	.+30     	; 0x14e <__vector_5+0x86>
	{
		hours++;
 130:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <hours>
 134:	9f 5f       	subi	r25, 0xFF	; 255
		hours = hours % 24;
 136:	2b ea       	ldi	r18, 0xAB	; 171
 138:	92 9f       	mul	r25, r18
 13a:	21 2d       	mov	r18, r1
 13c:	11 24       	eor	r1, r1
 13e:	22 95       	swap	r18
 140:	2f 70       	andi	r18, 0x0F	; 15
 142:	38 e1       	ldi	r19, 0x18	; 24
 144:	23 9f       	mul	r18, r19
 146:	90 19       	sub	r25, r0
 148:	11 24       	eor	r1, r1
 14a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <hours>
	}
	if (position == 3)
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	79 f4       	brne	.+30     	; 0x170 <__vector_5+0xa8>
	{
		hours += 10;
 152:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <hours>
 156:	86 5f       	subi	r24, 0xF6	; 246
		hours = hours % 24;
 158:	9b ea       	ldi	r25, 0xAB	; 171
 15a:	89 9f       	mul	r24, r25
 15c:	91 2d       	mov	r25, r1
 15e:	11 24       	eor	r1, r1
 160:	92 95       	swap	r25
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	28 e1       	ldi	r18, 0x18	; 24
 166:	92 9f       	mul	r25, r18
 168:	80 19       	sub	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <hours>
	}
	sei();
 170:	78 94       	sei
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_6>:

ISR(INT5_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
	cli();
 192:	f8 94       	cli
	PORTC = 0xFC;
 194:	8c ef       	ldi	r24, 0xFC	; 252
 196:	85 bb       	out	0x15, r24	; 21
	position = (position + 1) % 4;
 198:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	83 70       	andi	r24, 0x03	; 3
 1a2:	90 78       	andi	r25, 0x80	; 128
 1a4:	99 23       	and	r25, r25
 1a6:	24 f4       	brge	.+8      	; 0x1b0 <__vector_6+0x2c>
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	8c 6f       	ori	r24, 0xFC	; 252
 1ac:	9f 6f       	ori	r25, 0xFF	; 255
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	sei();
 1b4:	78 94       	sei
}
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	0b b6       	in	r0, 0x3b	; 59
 1d0:	0f 92       	push	r0
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	cli();
 1ea:	f8 94       	cli
	millis += MILLIS_INCREMENT_SIZE;
 1ec:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <millis>
 1f0:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <millis+0x1>
 1f4:	4e 5f       	subi	r20, 0xFE	; 254
 1f6:	5f 4f       	sbci	r21, 0xFF	; 255
	secs += (millis / 1000);
 1f8:	9a 01       	movw	r18, r20
 1fa:	36 95       	lsr	r19
 1fc:	27 95       	ror	r18
 1fe:	36 95       	lsr	r19
 200:	27 95       	ror	r18
 202:	36 95       	lsr	r19
 204:	27 95       	ror	r18
 206:	a5 ec       	ldi	r26, 0xC5	; 197
 208:	b0 e2       	ldi	r27, 0x20	; 32
 20a:	03 d1       	rcall	.+518    	; 0x412 <__umulhisi3>
 20c:	9c 01       	movw	r18, r24
 20e:	32 95       	swap	r19
 210:	22 95       	swap	r18
 212:	2f 70       	andi	r18, 0x0F	; 15
 214:	23 27       	eor	r18, r19
 216:	3f 70       	andi	r19, 0x0F	; 15
 218:	23 27       	eor	r18, r19
 21a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <secs>
 21e:	92 0f       	add	r25, r18
	millis = (millis % 1000);
 220:	e8 ee       	ldi	r30, 0xE8	; 232
 222:	f3 e0       	ldi	r31, 0x03	; 3
 224:	2e 9f       	mul	r18, r30
 226:	b0 01       	movw	r22, r0
 228:	2f 9f       	mul	r18, r31
 22a:	70 0d       	add	r23, r0
 22c:	3e 9f       	mul	r19, r30
 22e:	70 0d       	add	r23, r0
 230:	11 24       	eor	r1, r1
 232:	46 1b       	sub	r20, r22
 234:	57 0b       	sbc	r21, r23
 236:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <millis+0x1>
 23a:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <millis>
	
	mins += (secs / 60);
 23e:	89 e8       	ldi	r24, 0x89	; 137
 240:	98 9f       	mul	r25, r24
 242:	31 2d       	mov	r19, r1
 244:	11 24       	eor	r1, r1
 246:	32 95       	swap	r19
 248:	36 95       	lsr	r19
 24a:	37 70       	andi	r19, 0x07	; 7
 24c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <mins>
 250:	23 0f       	add	r18, r19
	secs = (secs % 60);
 252:	4c e3       	ldi	r20, 0x3C	; 60
 254:	34 9f       	mul	r19, r20
 256:	90 19       	sub	r25, r0
 258:	11 24       	eor	r1, r1
 25a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <secs>
	
	hours += (mins / 60);
 25e:	28 9f       	mul	r18, r24
 260:	81 2d       	mov	r24, r1
 262:	11 24       	eor	r1, r1
 264:	82 95       	swap	r24
 266:	86 95       	lsr	r24
 268:	87 70       	andi	r24, 0x07	; 7
 26a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <hours>
 26e:	98 0f       	add	r25, r24
	mins = (mins % 60);
 270:	84 9f       	mul	r24, r20
 272:	20 19       	sub	r18, r0
 274:	11 24       	eor	r1, r1
 276:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <mins>
	
	hours = hours % 24;
 27a:	8b ea       	ldi	r24, 0xAB	; 171
 27c:	98 9f       	mul	r25, r24
 27e:	81 2d       	mov	r24, r1
 280:	11 24       	eor	r1, r1
 282:	82 95       	swap	r24
 284:	8f 70       	andi	r24, 0x0F	; 15
 286:	28 e1       	ldi	r18, 0x18	; 24
 288:	82 9f       	mul	r24, r18
 28a:	90 19       	sub	r25, r0
 28c:	11 24       	eor	r1, r1
 28e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <hours>
	TCNT0 = TCNT0_BASE;
 292:	83 e8       	ldi	r24, 0x83	; 131
 294:	82 bf       	out	0x32, r24	; 50
	sei();
 296:	78 94       	sei
}
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0b be       	out	0x3b, r0	; 59
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <init_ports>:

void init_ports(void)
{
	DDRC |= 0xFF;
 2be:	84 b3       	in	r24, 0x14	; 20
 2c0:	9f ef       	ldi	r25, 0xFF	; 255
 2c2:	94 bb       	out	0x14, r25	; 20
	DDRB |= 0xF0;
 2c4:	87 b3       	in	r24, 0x17	; 23
 2c6:	80 6f       	ori	r24, 0xF0	; 240
 2c8:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0xF0;
 2ca:	81 b3       	in	r24, 0x11	; 17
 2cc:	80 6f       	ori	r24, 0xF0	; 240
 2ce:	81 bb       	out	0x11, r24	; 17
	DDRG |= 0x0F;
 2d0:	e4 e6       	ldi	r30, 0x64	; 100
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	8f 60       	ori	r24, 0x0F	; 15
 2d8:	80 83       	st	Z, r24
	
	PORTC = 0xFF;
 2da:	95 bb       	out	0x15, r25	; 21
	PORTB = 0x00;
 2dc:	18 ba       	out	0x18, r1	; 24
	PORTD = 0x00;
 2de:	12 ba       	out	0x12, r1	; 18
	PORTG = 0x0F;
 2e0:	8f e0       	ldi	r24, 0x0F	; 15
 2e2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 2e6:	08 95       	ret

000002e8 <init_ext_int>:
}

void init_ext_int()
{
	EICRB |= (1 << ISC41) | (1 << ISC51);
 2e8:	8a b7       	in	r24, 0x3a	; 58
 2ea:	8a 60       	ori	r24, 0x0A	; 10
 2ec:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1 << INT4) | (1 << INT5);
 2ee:	89 b7       	in	r24, 0x39	; 57
 2f0:	80 63       	ori	r24, 0x30	; 48
 2f2:	89 bf       	out	0x39, r24	; 57
 2f4:	08 95       	ret

000002f6 <init_tc_int>:
}

void init_tc_int()
{
	TCCR0 |= (1 << CS02) | (1 << CS01);
 2f6:	83 b7       	in	r24, 0x33	; 51
 2f8:	86 60       	ori	r24, 0x06	; 6
 2fa:	83 bf       	out	0x33, r24	; 51
	TCNT0 = TCNT0_BASE;
 2fc:	83 e8       	ldi	r24, 0x83	; 131
 2fe:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1 << TOIE0);
 300:	87 b7       	in	r24, 0x37	; 55
 302:	81 60       	ori	r24, 0x01	; 1
 304:	87 bf       	out	0x37, r24	; 55
 306:	08 95       	ret

00000308 <display_digits>:
}

void display_digits(uint8_t position, uint8_t num)
{
 308:	28 2f       	mov	r18, r24
	PORTG &= 0xF0;
 30a:	e5 e6       	ldi	r30, 0x65	; 101
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	80 7f       	andi	r24, 0xF0	; 240
 312:	80 83       	st	Z, r24
	PORTG |= (1 << (position - 1));
 314:	40 81       	ld	r20, Z
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	21 50       	subi	r18, 0x01	; 1
 31a:	31 09       	sbc	r19, r1
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <display_digits+0x1e>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <display_digits+0x1a>
 32a:	84 2b       	or	r24, r20
 32c:	80 83       	st	Z, r24
	PORTD = ((numbers[num] & 0x0F) << 4) | (PORTD & 0x0F);
 32e:	e6 2f       	mov	r30, r22
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	e0 50       	subi	r30, 0x00	; 0
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	80 81       	ld	r24, Z
 338:	20 e1       	ldi	r18, 0x10	; 16
 33a:	82 9f       	mul	r24, r18
 33c:	c0 01       	movw	r24, r0
 33e:	11 24       	eor	r1, r1
 340:	92 b3       	in	r25, 0x12	; 18
 342:	9f 70       	andi	r25, 0x0F	; 15
 344:	89 2b       	or	r24, r25
 346:	82 bb       	out	0x12, r24	; 18
	PORTB = (numbers[num] & 0x70) | (PORTB & 0x0F);
 348:	90 81       	ld	r25, Z
 34a:	88 b3       	in	r24, 0x18	; 24
 34c:	90 77       	andi	r25, 0x70	; 112
 34e:	8f 70       	andi	r24, 0x0F	; 15
 350:	89 2b       	or	r24, r25
 352:	88 bb       	out	0x18, r24	; 24
 354:	08 95       	ret

00000356 <timer_main>:
}

void timer_main()
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
	uint8_t i = 0;
	for (i = 0; i < 2; ++i)
 35a:	d0 e0       	ldi	r29, 0x00	; 0
 35c:	4e c0       	rjmp	.+156    	; 0x3fa <timer_main+0xa4>
	{
		display_digits(1, hours / 10);
 35e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <hours>
 362:	cd ec       	ldi	r28, 0xCD	; 205
 364:	6c 9f       	mul	r22, r28
 366:	61 2d       	mov	r22, r1
 368:	11 24       	eor	r1, r1
 36a:	66 95       	lsr	r22
 36c:	66 95       	lsr	r22
 36e:	66 95       	lsr	r22
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	ca df       	rcall	.-108    	; 0x308 <display_digits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 374:	8f e1       	ldi	r24, 0x1F	; 31
 376:	9e e4       	ldi	r25, 0x4E	; 78
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <timer_main+0x22>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <timer_main+0x28>
 37e:	00 00       	nop
		_delay_ms(5);
 		display_digits(2, hours % 10);
 380:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <hours>
 384:	6c 9f       	mul	r22, r28
 386:	81 2d       	mov	r24, r1
 388:	11 24       	eor	r1, r1
 38a:	86 95       	lsr	r24
 38c:	86 95       	lsr	r24
 38e:	86 95       	lsr	r24
 390:	88 0f       	add	r24, r24
 392:	98 2f       	mov	r25, r24
 394:	99 0f       	add	r25, r25
 396:	99 0f       	add	r25, r25
 398:	89 0f       	add	r24, r25
 39a:	68 1b       	sub	r22, r24
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	b4 df       	rcall	.-152    	; 0x308 <display_digits>
 3a0:	8f e1       	ldi	r24, 0x1F	; 31
 3a2:	9e e4       	ldi	r25, 0x4E	; 78
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <timer_main+0x4e>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <timer_main+0x54>
 3aa:	00 00       	nop
 		_delay_ms(5);
 		display_digits(3, mins / 10);
 3ac:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <mins>
 3b0:	6c 9f       	mul	r22, r28
 3b2:	61 2d       	mov	r22, r1
 3b4:	11 24       	eor	r1, r1
 3b6:	66 95       	lsr	r22
 3b8:	66 95       	lsr	r22
 3ba:	66 95       	lsr	r22
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	a4 df       	rcall	.-184    	; 0x308 <display_digits>
 3c0:	8f e1       	ldi	r24, 0x1F	; 31
 3c2:	9e e4       	ldi	r25, 0x4E	; 78
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <timer_main+0x6e>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <timer_main+0x74>
 3ca:	00 00       	nop
 		_delay_ms(5);
 		display_digits(4, mins % 10);
 3cc:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <mins>
 3d0:	6c 9f       	mul	r22, r28
 3d2:	c1 2d       	mov	r28, r1
 3d4:	11 24       	eor	r1, r1
 3d6:	c6 95       	lsr	r28
 3d8:	c6 95       	lsr	r28
 3da:	c6 95       	lsr	r28
 3dc:	cc 0f       	add	r28, r28
 3de:	8c 2f       	mov	r24, r28
 3e0:	88 0f       	add	r24, r24
 3e2:	88 0f       	add	r24, r24
 3e4:	c8 0f       	add	r28, r24
 3e6:	6c 1b       	sub	r22, r28
 3e8:	84 e0       	ldi	r24, 0x04	; 4
 3ea:	8e df       	rcall	.-228    	; 0x308 <display_digits>
 3ec:	8f e1       	ldi	r24, 0x1F	; 31
 3ee:	9e e4       	ldi	r25, 0x4E	; 78
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <timer_main+0x9a>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <timer_main+0xa0>
 3f6:	00 00       	nop
}

void timer_main()
{
	uint8_t i = 0;
	for (i = 0; i < 2; ++i)
 3f8:	df 5f       	subi	r29, 0xFF	; 255
 3fa:	d2 30       	cpi	r29, 0x02	; 2
 3fc:	08 f4       	brcc	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	af cf       	rjmp	.-162    	; 0x35e <timer_main+0x8>
 		display_digits(3, mins / 10);
 		_delay_ms(5);
 		display_digits(4, mins % 10);
 		_delay_ms(5);
	}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <main>:
 */ 
#include "timer_main.h"

int main(void)
{
	init_ports();
 406:	5b df       	rcall	.-330    	; 0x2be <init_ports>
	init_ext_int();
 408:	6f df       	rcall	.-290    	; 0x2e8 <init_ext_int>
	init_tc_int();
 40a:	75 df       	rcall	.-278    	; 0x2f6 <init_tc_int>
	sei();
 40c:	78 94       	sei
    while (1) 
    {
		timer_main();
 40e:	a3 df       	rcall	.-186    	; 0x356 <timer_main>
 410:	fe cf       	rjmp	.-4      	; 0x40e <main+0x8>

00000412 <__umulhisi3>:
 412:	a2 9f       	mul	r26, r18
 414:	b0 01       	movw	r22, r0
 416:	b3 9f       	mul	r27, r19
 418:	c0 01       	movw	r24, r0
 41a:	a3 9f       	mul	r26, r19
 41c:	70 0d       	add	r23, r0
 41e:	81 1d       	adc	r24, r1
 420:	11 24       	eor	r1, r1
 422:	91 1d       	adc	r25, r1
 424:	b2 9f       	mul	r27, r18
 426:	70 0d       	add	r23, r0
 428:	81 1d       	adc	r24, r1
 42a:	11 24       	eor	r1, r1
 42c:	91 1d       	adc	r25, r1
 42e:	08 95       	ret

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
