
Timer_Counter_8bits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000000  00800100  00800100  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fe  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a5  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ab  00000000  00000000  000015c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f5  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000020e5  2**0
=======
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c7  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d1  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001958  2**0
>>>>>>> 6b25de4a6c3123bffb209df752a8b58b2efad1fd
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
<<<<<<< HEAD
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	56 c0       	rjmp	.+172    	; 0xde <__vector_12>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	38 c0       	rjmp	.+112    	; 0xae <__vector_15>
  3e:	00 00       	nop
  40:	6c c0       	rjmp	.+216    	; 0x11a <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
=======
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
>>>>>>> 6b25de4a6c3123bffb209df752a8b58b2efad1fd
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
<<<<<<< HEAD

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	31 d0       	rcall	.+98     	; 0x10c <main>
  aa:	7d c0       	rjmp	.+250    	; 0x1a6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_15>:
void INIT_TCINT(void)
{
	TCCR0 |= 0x07;
	OCR0 = 128;
	TIMSK |= 0x02;
	sei();
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  ce:	12 be       	out	0x32, r1	; 50
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_12>:
}

ISR(TIMER1_COMPA_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	count++;
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <main>:
 */ 
#include "overflow_int.h"

int main(void)
{
	DDRC |= 0x01;
 10c:	84 b3       	in	r24, 0x14	; 20
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	85 bb       	out	0x15, r24	; 21
	
	INIT_OF_TCINT();
 116:	3f d0       	rcall	.+126    	; 0x196 <INIT_OF_TCINT>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0xc>

0000011a <__vector_16>:

volatile int overflow_count = 0;
volatile int sw_state = 0;

ISR(TIMER0_OVF_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	overflow_count++;
 12c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <overflow_count>
 130:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <overflow_count+0x1>
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <overflow_count+0x1>
 13a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <overflow_count>
	if (overflow_count == 32)
 13e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <overflow_count>
 142:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <overflow_count+0x1>
 146:	80 97       	sbiw	r24, 0x20	; 32
 148:	e9 f4       	brne	.+58     	; 0x184 <__vector_16+0x6a>
	{
		// 32 overflow occur (0.5 sec passed)
		overflow_count = 0;
 14a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <overflow_count+0x1>
 14e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <overflow_count>
		sw_state = !sw_state;
 152:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <sw_state>
 156:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <sw_state+0x1>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	23 2b       	or	r18, r19
 160:	11 f0       	breq	.+4      	; 0x166 <__vector_16+0x4c>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <sw_state+0x1>
 16a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <sw_state>
		if (sw_state) PORTC = 0xFE;
 16e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <sw_state>
 172:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <sw_state+0x1>
 176:	89 2b       	or	r24, r25
 178:	19 f0       	breq	.+6      	; 0x180 <__vector_16+0x66>
 17a:	8e ef       	ldi	r24, 0xFE	; 254
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__vector_16+0x6a>
		else PORTC = 0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	85 bb       	out	0x15, r24	; 21
	}
}
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <INIT_OF_TCINT>:

void INIT_OF_TCINT(void)
{
	TCCR0 |= 0x07;	// set pre-scaling factor to 1024
 196:	83 b7       	in	r24, 0x33	; 51
 198:	87 60       	ori	r24, 0x07	; 7
 19a:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0x01;	// allow overflow interrupt
 19c:	87 b7       	in	r24, 0x37	; 55
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	87 bf       	out	0x37, r24	; 55
	sei();
 1a2:	78 94       	sei
 1a4:	08 95       	ret

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
=======
  98:	10 d0       	rcall	.+32     	; 0xba <main>
  9a:	12 c0       	rjmp	.+36     	; 0xc0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <init_port>:

#include "int_oscillator.h"

void init_port(void)
{
	DDRB = 0x01;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  a2:	18 ba       	out	0x18, r1	; 24
  a4:	08 95       	ret

000000a6 <init_timer0>:
}

void init_timer0(void)
{
	ASSR |= (1 << AS0);	// using external oscillator
  a6:	80 b7       	in	r24, 0x30	; 48
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	80 bf       	out	0x30, r24	; 48
	TCCR0 |= (1 << CS02) | (1 << CS00);
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	85 60       	ori	r24, 0x05	; 5
  b0:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
  b2:	87 b7       	in	r24, 0x37	; 55
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	87 bf       	out	0x37, r24	; 55
  b8:	08 95       	ret

000000ba <main>:
 */ 
#include "int_oscillator.h"

int main(void)
{
	init_port();
  ba:	f1 df       	rcall	.-30     	; 0x9e <init_port>
	init_timer0();
  bc:	f4 df       	rcall	.-24     	; 0xa6 <init_timer0>
  be:	ff cf       	rjmp	.-2      	; 0xbe <main+0x4>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
>>>>>>> 6b25de4a6c3123bffb209df752a8b58b2efad1fd
